interface BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

type BaseModel implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

type BaseModelUUID implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

input BaseWhereInput {
  id_eq: String
  id_in: [String!]
  createdAt_eq: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdById_eq: String
  updatedAt_eq: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedById_eq: String
  deletedAt_all: Boolean
  deletedAt_eq: String
  deletedAt_lt: String
  deletedAt_lte: String
  deletedAt_gt: String
  deletedAt_gte: String
  deletedById_eq: String
}

"""GraphQL representation of BigInt"""
scalar BigInt

"""A block in the blockchain."""
type Block implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!

  """Network in which block occurred."""
  network: Network!

  """Height at which block is committed."""
  height: BigInt!

  """
  Is block finalized. Note: we can have richer consensus information here in the
  future, like who signed, but its not a priority now.
  """
  isFinalized: Boolean!

  """Timestamp in block."""
  timestamp: BigInt!

  """Hash of block in hex encoding."""
  hash: String!

  """Hash of parent block in hex encoding."""
  parentHash: String!

  """State root hash in hex encoding."""
  stateRoot: String!

  """Extrinsics merkle root in hex encoding."""
  extrinsicRoot: String!

  """Time since last block."""
  blockTime: BigInt!
  extrinsics: [Extrinsic!]!
}

type BlockConnection {
  totalCount: Int!
  edges: [BlockEdge!]!
  pageInfo: PageInfo!
}

input BlockCreateInput {
  network: Network!
  height: BigInt!
  isFinalized: Boolean!
  timestamp: BigInt!
  hash: String!
  parentHash: String!
  stateRoot: String!
  extrinsicRoot: String!
  blockTime: BigInt!
}

type BlockEdge {
  node: Block!
  cursor: String!
}

enum BlockOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  network_ASC
  network_DESC
  height_ASC
  height_DESC
  isFinalized_ASC
  isFinalized_DESC
  timestamp_ASC
  timestamp_DESC
  hash_ASC
  hash_DESC
  parentHash_ASC
  parentHash_DESC
  stateRoot_ASC
  stateRoot_DESC
  extrinsicRoot_ASC
  extrinsicRoot_DESC
  blockTime_ASC
  blockTime_DESC
}

input BlockUpdateInput {
  network: Network
  height: BigInt
  isFinalized: Boolean
  timestamp: BigInt
  hash: String
  parentHash: String
  stateRoot: String
  extrinsicRoot: String
  blockTime: BigInt
}

input BlockWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  network_eq: Network
  network_in: [Network!]
  height_eq: BigInt
  height_gt: BigInt
  height_gte: BigInt
  height_lt: BigInt
  height_lte: BigInt
  height_in: [BigInt!]
  isFinalized_eq: Boolean
  isFinalized_in: [Boolean!]
  timestamp_eq: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  hash_eq: String
  hash_contains: String
  hash_startsWith: String
  hash_endsWith: String
  hash_in: [String!]
  parentHash_eq: String
  parentHash_contains: String
  parentHash_startsWith: String
  parentHash_endsWith: String
  parentHash_in: [String!]
  stateRoot_eq: String
  stateRoot_contains: String
  stateRoot_startsWith: String
  stateRoot_endsWith: String
  stateRoot_in: [String!]
  extrinsicRoot_eq: String
  extrinsicRoot_contains: String
  extrinsicRoot_startsWith: String
  extrinsicRoot_endsWith: String
  extrinsicRoot_in: [String!]
  blockTime_eq: BigInt
  blockTime_gt: BigInt
  blockTime_gte: BigInt
  blockTime_lt: BigInt
  blockTime_lte: BigInt
  blockTime_in: [BigInt!]
}

input BlockWhereUniqueInput {
  id: ID!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

interface DeleteResponse {
  id: ID!
}

"""A general blockchain extrinsic."""
type Extrinsic implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!

  """Name of runtime module to which extrinsic was targeted."""
  moduleName: String!

  """Name of extrinsic, including module prefix."""
  call: String!

  """Nonce"""
  nonce: BigInt!

  """Fee charged."""
  fee: BigInt!

  """Tip provided."""
  tip: BigInt!

  """Origin for extrinsic."""
  origin: ExtrinsicOrigin!

  """Call parameters, unknown encoding currently."""
  parameters: String

  """Index of extrinsic in block."""
  indexInBlock: Int!
  inBlock: Block!
  inBlockId: String!

  """Whether extrinsic was successful."""
  successful: Boolean!
}

type ExtrinsicConnection {
  totalCount: Int!
  edges: [ExtrinsicEdge!]!
  pageInfo: PageInfo!
}

input ExtrinsicCreateInput {
  moduleName: String!
  call: String!
  nonce: BigInt!
  fee: BigInt!
  tip: BigInt!
  origin: JSONObject!
  parameters: String
  indexInBlock: Float!
  inBlockId: ID!
  successful: Boolean!
}

type ExtrinsicEdge {
  node: Extrinsic!
  cursor: String!
}

enum ExtrinsicOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  moduleName_ASC
  moduleName_DESC
  call_ASC
  call_DESC
  nonce_ASC
  nonce_DESC
  fee_ASC
  fee_DESC
  tip_ASC
  tip_DESC
  parameters_ASC
  parameters_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  inBlockId_ASC
  inBlockId_DESC
  successful_ASC
  successful_DESC
}

union ExtrinsicOrigin = RootOrigin | SignedOrigin | NoneOrigin

input ExtrinsicUpdateInput {
  moduleName: String
  call: String
  nonce: BigInt
  fee: BigInt
  tip: BigInt
  origin: JSONObject
  parameters: String
  indexInBlock: Float
  inBlockId: ID
  successful: Boolean
}

input ExtrinsicWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  moduleName_eq: String
  moduleName_contains: String
  moduleName_startsWith: String
  moduleName_endsWith: String
  moduleName_in: [String!]
  call_eq: String
  call_contains: String
  call_startsWith: String
  call_endsWith: String
  call_in: [String!]
  nonce_eq: BigInt
  nonce_gt: BigInt
  nonce_gte: BigInt
  nonce_lt: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  fee_eq: BigInt
  fee_gt: BigInt
  fee_gte: BigInt
  fee_lt: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  tip_eq: BigInt
  tip_gt: BigInt
  tip_gte: BigInt
  tip_lt: BigInt
  tip_lte: BigInt
  tip_in: [BigInt!]
  origin_json: JSONObject
  parameters_eq: String
  parameters_contains: String
  parameters_startsWith: String
  parameters_endsWith: String
  parameters_in: [String!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  inBlockId_eq: ID
  inBlockId_in: [ID!]
  successful_eq: Boolean
  successful_in: [Boolean!]
}

input ExtrinsicWhereUniqueInput {
  id: ID!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

"""
State of the membership system. NB: There should only be one instance of this entity.
"""
type MembershipSystem implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!

  """Current price to buy a membership."""
  membershipPrice: BigInt!

  """Amount of tokens diverted to invitor."""
  referralCut: BigInt!

  """Initial invitation count of a new member."""
  defaultInviteCount: BigInt!

  """
  The initial, locked, balance credited to controller account of invitee.
  """
  invitedInitialBalance: BigInt!
}

type MembershipSystemConnection {
  totalCount: Int!
  edges: [MembershipSystemEdge!]!
  pageInfo: PageInfo!
}

input MembershipSystemCreateInput {
  membershipPrice: BigInt!
  referralCut: BigInt!
  defaultInviteCount: BigInt!
  invitedInitialBalance: BigInt!
}

type MembershipSystemEdge {
  node: MembershipSystem!
  cursor: String!
}

enum MembershipSystemOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  membershipPrice_ASC
  membershipPrice_DESC
  referralCut_ASC
  referralCut_DESC
  defaultInviteCount_ASC
  defaultInviteCount_DESC
  invitedInitialBalance_ASC
  invitedInitialBalance_DESC
}

input MembershipSystemUpdateInput {
  membershipPrice: BigInt
  referralCut: BigInt
  defaultInviteCount: BigInt
  invitedInitialBalance: BigInt
}

input MembershipSystemWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  membershipPrice_eq: BigInt
  membershipPrice_gt: BigInt
  membershipPrice_gte: BigInt
  membershipPrice_lt: BigInt
  membershipPrice_lte: BigInt
  membershipPrice_in: [BigInt!]
  referralCut_eq: BigInt
  referralCut_gt: BigInt
  referralCut_gte: BigInt
  referralCut_lt: BigInt
  referralCut_lte: BigInt
  referralCut_in: [BigInt!]
  defaultInviteCount_eq: BigInt
  defaultInviteCount_gt: BigInt
  defaultInviteCount_gte: BigInt
  defaultInviteCount_lt: BigInt
  defaultInviteCount_lte: BigInt
  defaultInviteCount_in: [BigInt!]
  invitedInitialBalance_eq: BigInt
  invitedInitialBalance_gt: BigInt
  invitedInitialBalance_gte: BigInt
  invitedInitialBalance_lt: BigInt
  invitedInitialBalance_lte: BigInt
  invitedInitialBalance_in: [BigInt!]
}

input MembershipSystemWhereUniqueInput {
  id: ID!
}

enum Network {
  Babylon
  Sumer
}

type NoneOrigin {
  """No meaning, only here because GraphQL cannot support empty types."""
  phantomField: Int
}

input NoneOriginCreateInput {
  phantomField: Float
}

input NoneOriginUpdateInput {
  phantomField: Float
}

input NoneOriginWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  phantomField_eq: Int
  phantomField_gt: Int
  phantomField_gte: Int
  phantomField_lt: Int
  phantomField_lte: Int
  phantomField_in: [Int!]
}

input NoneOriginWhereUniqueInput {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  blocks(offset: Int, limit: Int = 50, where: BlockWhereInput, orderBy: BlockOrderByInput): [Block!]!
  block(where: BlockWhereUniqueInput!): Block
  blocksConnection(first: Int, after: String, last: Int, before: String, where: BlockWhereInput, orderBy: BlockOrderByInput): BlockConnection!
  extrinsics(offset: Int, limit: Int = 50, where: ExtrinsicWhereInput, orderBy: ExtrinsicOrderByInput): [Extrinsic!]!
  extrinsic(where: ExtrinsicWhereUniqueInput!): Extrinsic
  extrinsicsConnection(first: Int, after: String, last: Int, before: String, where: ExtrinsicWhereInput, orderBy: ExtrinsicOrderByInput): ExtrinsicConnection!
  membershipSystems(offset: Int, limit: Int = 50, where: MembershipSystemWhereInput, orderBy: MembershipSystemOrderByInput): [MembershipSystem!]!
  membershipSystem(where: MembershipSystemWhereUniqueInput!): MembershipSystem
  membershipSystemsConnection(first: Int, after: String, last: Int, before: String, where: MembershipSystemWhereInput, orderBy: MembershipSystemOrderByInput): MembershipSystemConnection!
}

type RootOrigin {
  """No meaning, only here because GraphQL cannot support empty types."""
  phantomField: Int
}

input RootOriginCreateInput {
  phantomField: Float
}

input RootOriginUpdateInput {
  phantomField: Float
}

input RootOriginWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  phantomField_eq: Int
  phantomField_gt: Int
  phantomField_gte: Int
  phantomField_lt: Int
  phantomField_lte: Int
  phantomField_in: [Int!]
}

input RootOriginWhereUniqueInput {
  id: ID!
}

type SignedOrigin {
  """Signing account in SS58 encoding."""
  signingAccount: String!
}

input SignedOriginCreateInput {
  signingAccount: String!
}

input SignedOriginUpdateInput {
  signingAccount: String
}

input SignedOriginWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  signingAccount_eq: String
  signingAccount_contains: String
  signingAccount_startsWith: String
  signingAccount_endsWith: String
  signingAccount_in: [String!]
}

input SignedOriginWhereUniqueInput {
  id: ID!
}

type StandardDeleteResponse {
  id: ID!
}
