type AmendConstitutionProposalDetails {
  text: String!
}

input AmendConstitutionProposalDetailsCreateInput {
  text: String!
}

input AmendConstitutionProposalDetailsUpdateInput {
  text: String
}

input AmendConstitutionProposalDetailsWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  text_eq: String
  text_contains: String
  text_startsWith: String
  text_endsWith: String
  text_in: [String!]
  AND: [AmendConstitutionProposalDetailsWhereInput!]
  OR: [AmendConstitutionProposalDetailsWhereInput!]
}

input AmendConstitutionProposalDetailsWhereUniqueInput {
  id: ID!
}

type ApplicationFormQuestion implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  openingMetadata: WorkingGroupOpeningMetadata!
  openingMetadataId: String!
  question: String
  type: ApplicationFormQuestionType!
  index: Int!
  applicationformquestionanswerquestion: [ApplicationFormQuestionAnswer!]
}

type ApplicationFormQuestionAnswer implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  application: WorkingGroupApplication!
  applicationId: String!
  question: ApplicationFormQuestion!
  questionId: String!
  answer: String!
}

type ApplicationFormQuestionAnswerConnection {
  totalCount: Int!
  edges: [ApplicationFormQuestionAnswerEdge!]!
  pageInfo: PageInfo!
}

input ApplicationFormQuestionAnswerCreateInput {
  application: ID!
  question: ID!
  answer: String!
}

type ApplicationFormQuestionAnswerEdge {
  node: ApplicationFormQuestionAnswer!
  cursor: String!
}

enum ApplicationFormQuestionAnswerOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  application_ASC
  application_DESC
  question_ASC
  question_DESC
  answer_ASC
  answer_DESC
}

input ApplicationFormQuestionAnswerUpdateInput {
  application: ID
  question: ID
  answer: String
}

input ApplicationFormQuestionAnswerWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  application_eq: ID
  application_in: [ID!]
  question_eq: ID
  question_in: [ID!]
  answer_eq: String
  answer_contains: String
  answer_startsWith: String
  answer_endsWith: String
  answer_in: [String!]
  application: WorkingGroupApplicationWhereInput
  question: ApplicationFormQuestionWhereInput
  AND: [ApplicationFormQuestionAnswerWhereInput!]
  OR: [ApplicationFormQuestionAnswerWhereInput!]
}

input ApplicationFormQuestionAnswerWhereUniqueInput {
  id: ID!
}

type ApplicationFormQuestionConnection {
  totalCount: Int!
  edges: [ApplicationFormQuestionEdge!]!
  pageInfo: PageInfo!
}

input ApplicationFormQuestionCreateInput {
  openingMetadata: ID!
  question: String
  type: ApplicationFormQuestionType!
  index: Float!
}

type ApplicationFormQuestionEdge {
  node: ApplicationFormQuestion!
  cursor: String!
}

enum ApplicationFormQuestionOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  openingMetadata_ASC
  openingMetadata_DESC
  question_ASC
  question_DESC
  type_ASC
  type_DESC
  index_ASC
  index_DESC
}

enum ApplicationFormQuestionType {
  TEXT
  TEXTAREA
}

input ApplicationFormQuestionUpdateInput {
  openingMetadata: ID
  question: String
  type: ApplicationFormQuestionType
  index: Float
}

input ApplicationFormQuestionWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  openingMetadata_eq: ID
  openingMetadata_in: [ID!]
  question_eq: String
  question_contains: String
  question_startsWith: String
  question_endsWith: String
  question_in: [String!]
  type_eq: ApplicationFormQuestionType
  type_in: [ApplicationFormQuestionType!]
  index_eq: Int
  index_gt: Int
  index_gte: Int
  index_lt: Int
  index_lte: Int
  index_in: [Int!]
  openingMetadata: WorkingGroupOpeningMetadataWhereInput
  applicationformquestionanswerquestion_none: ApplicationFormQuestionAnswerWhereInput
  applicationformquestionanswerquestion_some: ApplicationFormQuestionAnswerWhereInput
  applicationformquestionanswerquestion_every: ApplicationFormQuestionAnswerWhereInput
  AND: [ApplicationFormQuestionWhereInput!]
  OR: [ApplicationFormQuestionWhereInput!]
}

input ApplicationFormQuestionWhereUniqueInput {
  id: ID!
}

type ApplicationStatusAccepted {
  openingFilledEvent: OpeningFilledEvent
}

type ApplicationStatusCancelled {
  openingCanceledEvent: OpeningCanceledEvent
}

type ApplicationStatusPending {
  phantom: Int
}

input ApplicationStatusPendingCreateInput {
  phantom: Float
}

input ApplicationStatusPendingUpdateInput {
  phantom: Float
}

input ApplicationStatusPendingWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  phantom_eq: Int
  phantom_gt: Int
  phantom_gte: Int
  phantom_lt: Int
  phantom_lte: Int
  phantom_in: [Int!]
  AND: [ApplicationStatusPendingWhereInput!]
  OR: [ApplicationStatusPendingWhereInput!]
}

input ApplicationStatusPendingWhereUniqueInput {
  id: ID!
}

type ApplicationStatusRejected {
  openingFilledEvent: OpeningFilledEvent
}

type ApplicationStatusWithdrawn {
  applicationWithdrawnEvent: ApplicationWithdrawnEvent
}

type ApplicationWithdrawnEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  group: WorkingGroup!
  groupId: String!
  application: WorkingGroupApplication!
  applicationId: String!
}

type ApplicationWithdrawnEventConnection {
  totalCount: Int!
  edges: [ApplicationWithdrawnEventEdge!]!
  pageInfo: PageInfo!
}

input ApplicationWithdrawnEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  group: ID!
  application: ID!
}

type ApplicationWithdrawnEventEdge {
  node: ApplicationWithdrawnEvent!
  cursor: String!
}

enum ApplicationWithdrawnEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  group_ASC
  group_DESC
  application_ASC
  application_DESC
}

input ApplicationWithdrawnEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  group: ID
  application: ID
}

input ApplicationWithdrawnEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  group_eq: ID
  group_in: [ID!]
  application_eq: ID
  application_in: [ID!]
  group: WorkingGroupWhereInput
  application: WorkingGroupApplicationWhereInput
  AND: [ApplicationWithdrawnEventWhereInput!]
  OR: [ApplicationWithdrawnEventWhereInput!]
}

input ApplicationWithdrawnEventWhereUniqueInput {
  id: ID!
}

type AppliedOnOpeningEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  group: WorkingGroup!
  groupId: String!
  opening: WorkingGroupOpening!
  openingId: String!
  application: WorkingGroupApplication!
  applicationId: String!
}

type AppliedOnOpeningEventConnection {
  totalCount: Int!
  edges: [AppliedOnOpeningEventEdge!]!
  pageInfo: PageInfo!
}

input AppliedOnOpeningEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  group: ID!
  opening: ID!
  application: ID!
}

type AppliedOnOpeningEventEdge {
  node: AppliedOnOpeningEvent!
  cursor: String!
}

enum AppliedOnOpeningEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  group_ASC
  group_DESC
  opening_ASC
  opening_DESC
  application_ASC
  application_DESC
}

input AppliedOnOpeningEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  group: ID
  opening: ID
  application: ID
}

input AppliedOnOpeningEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  group_eq: ID
  group_in: [ID!]
  opening_eq: ID
  opening_in: [ID!]
  application_eq: ID
  application_in: [ID!]
  group: WorkingGroupWhereInput
  opening: WorkingGroupOpeningWhereInput
  application: WorkingGroupApplicationWhereInput
  AND: [AppliedOnOpeningEventWhereInput!]
  OR: [AppliedOnOpeningEventWhereInput!]
}

input AppliedOnOpeningEventWhereUniqueInput {
  id: ID!
}

interface BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

type BaseModel implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

type BaseModelUUID implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

input BaseWhereInput {
  id_eq: String
  id_in: [String!]
  createdAt_eq: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdById_eq: String
  updatedAt_eq: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedById_eq: String
  deletedAt_all: Boolean
  deletedAt_eq: String
  deletedAt_lt: String
  deletedAt_lte: String
  deletedAt_gt: String
  deletedAt_gte: String
  deletedById_eq: String
}

scalar BigInt

type BudgetSetEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  group: WorkingGroup!
  groupId: String!
  newBudget: BigInt!
}

type BudgetSetEventConnection {
  totalCount: Int!
  edges: [BudgetSetEventEdge!]!
  pageInfo: PageInfo!
}

input BudgetSetEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  group: ID!
  newBudget: BigInt!
}

type BudgetSetEventEdge {
  node: BudgetSetEvent!
  cursor: String!
}

enum BudgetSetEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  group_ASC
  group_DESC
  newBudget_ASC
  newBudget_DESC
}

input BudgetSetEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  group: ID
  newBudget: BigInt
}

input BudgetSetEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  group_eq: ID
  group_in: [ID!]
  newBudget_eq: BigInt
  newBudget_gt: BigInt
  newBudget_gte: BigInt
  newBudget_lt: BigInt
  newBudget_lte: BigInt
  newBudget_in: [BigInt!]
  group: WorkingGroupWhereInput
  AND: [BudgetSetEventWhereInput!]
  OR: [BudgetSetEventWhereInput!]
}

input BudgetSetEventWhereUniqueInput {
  id: ID!
}

type BudgetSpendingEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  group: WorkingGroup!
  groupId: String!
  reciever: String!
  amount: BigInt!
  rationale: String
}

type BudgetSpendingEventConnection {
  totalCount: Int!
  edges: [BudgetSpendingEventEdge!]!
  pageInfo: PageInfo!
}

input BudgetSpendingEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  group: ID!
  reciever: String!
  amount: BigInt!
  rationale: String
}

type BudgetSpendingEventEdge {
  node: BudgetSpendingEvent!
  cursor: String!
}

enum BudgetSpendingEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  group_ASC
  group_DESC
  reciever_ASC
  reciever_DESC
  amount_ASC
  amount_DESC
  rationale_ASC
  rationale_DESC
}

input BudgetSpendingEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  group: ID
  reciever: String
  amount: BigInt
  rationale: String
}

input BudgetSpendingEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  group_eq: ID
  group_in: [ID!]
  reciever_eq: String
  reciever_contains: String
  reciever_startsWith: String
  reciever_endsWith: String
  reciever_in: [String!]
  amount_eq: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_lt: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  rationale_eq: String
  rationale_contains: String
  rationale_startsWith: String
  rationale_endsWith: String
  rationale_in: [String!]
  group: WorkingGroupWhereInput
  AND: [BudgetSpendingEventWhereInput!]
  OR: [BudgetSpendingEventWhereInput!]
}

input BudgetSpendingEventWhereUniqueInput {
  id: ID!
}

scalar Bytes

type CancelWorkingGroupLeadOpeningProposalDetails {
  opening: WorkingGroupOpening
}

type CategoryCreatedEvent implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  category: ForumCategory!
  categoryId: String!
}

type CategoryCreatedEventConnection {
  totalCount: Int!
  edges: [CategoryCreatedEventEdge!]!
  pageInfo: PageInfo!
}

input CategoryCreatedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  category: ID!
}

type CategoryCreatedEventEdge {
  node: CategoryCreatedEvent!
  cursor: String!
}

enum CategoryCreatedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  category_ASC
  category_DESC
}

input CategoryCreatedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  category: ID
}

input CategoryCreatedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  category_eq: ID
  category_in: [ID!]
  category: ForumCategoryWhereInput
  AND: [CategoryCreatedEventWhereInput!]
  OR: [CategoryCreatedEventWhereInput!]
}

input CategoryCreatedEventWhereUniqueInput {
  id: ID!
}

type CategoryDeletedEvent implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  category: ForumCategory!
  categoryId: String!
  actor: Worker!
  actorId: String!
}

type CategoryDeletedEventConnection {
  totalCount: Int!
  edges: [CategoryDeletedEventEdge!]!
  pageInfo: PageInfo!
}

input CategoryDeletedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  category: ID!
  actor: ID!
}

type CategoryDeletedEventEdge {
  node: CategoryDeletedEvent!
  cursor: String!
}

enum CategoryDeletedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  category_ASC
  category_DESC
  actor_ASC
  actor_DESC
}

input CategoryDeletedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  category: ID
  actor: ID
}

input CategoryDeletedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  category_eq: ID
  category_in: [ID!]
  actor_eq: ID
  actor_in: [ID!]
  category: ForumCategoryWhereInput
  actor: WorkerWhereInput
  AND: [CategoryDeletedEventWhereInput!]
  OR: [CategoryDeletedEventWhereInput!]
}

input CategoryDeletedEventWhereUniqueInput {
  id: ID!
}

type CategoryMembershipOfModeratorUpdatedEvent implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  moderator: Worker!
  moderatorId: String!
  category: ForumCategory!
  categoryId: String!
  newCanModerateValue: Boolean!
}

type CategoryMembershipOfModeratorUpdatedEventConnection {
  totalCount: Int!
  edges: [CategoryMembershipOfModeratorUpdatedEventEdge!]!
  pageInfo: PageInfo!
}

input CategoryMembershipOfModeratorUpdatedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  moderator: ID!
  category: ID!
  newCanModerateValue: Boolean!
}

type CategoryMembershipOfModeratorUpdatedEventEdge {
  node: CategoryMembershipOfModeratorUpdatedEvent!
  cursor: String!
}

enum CategoryMembershipOfModeratorUpdatedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  moderator_ASC
  moderator_DESC
  category_ASC
  category_DESC
  newCanModerateValue_ASC
  newCanModerateValue_DESC
}

input CategoryMembershipOfModeratorUpdatedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  moderator: ID
  category: ID
  newCanModerateValue: Boolean
}

input CategoryMembershipOfModeratorUpdatedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  moderator_eq: ID
  moderator_in: [ID!]
  category_eq: ID
  category_in: [ID!]
  newCanModerateValue_eq: Boolean
  newCanModerateValue_in: [Boolean!]
  moderator: WorkerWhereInput
  category: ForumCategoryWhereInput
  AND: [CategoryMembershipOfModeratorUpdatedEventWhereInput!]
  OR: [CategoryMembershipOfModeratorUpdatedEventWhereInput!]
}

input CategoryMembershipOfModeratorUpdatedEventWhereUniqueInput {
  id: ID!
}

union CategoryStatus =
  CategoryStatusActive
  | CategoryStatusArchived
  | CategoryStatusRemoved
type CategoryStatusActive {
  phantom: Int
}

input CategoryStatusActiveCreateInput {
  phantom: Float
}

input CategoryStatusActiveUpdateInput {
  phantom: Float
}

input CategoryStatusActiveWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  phantom_eq: Int
  phantom_gt: Int
  phantom_gte: Int
  phantom_lt: Int
  phantom_lte: Int
  phantom_in: [Int!]
  AND: [CategoryStatusActiveWhereInput!]
  OR: [CategoryStatusActiveWhereInput!]
}

input CategoryStatusActiveWhereUniqueInput {
  id: ID!
}

type CategoryStatusArchived {
  categoryUpdatedEvent: CategoryUpdatedEvent
}

type CategoryStatusRemoved {
  categoryDeletedEvent: CategoryDeletedEvent
}

type CategoryStickyThreadUpdateEvent implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  category: ForumCategory!
  categoryId: String!
  newStickyThreads: [ForumThread!]!
  actor: Worker!
  actorId: String!
}

type CategoryStickyThreadUpdateEventConnection {
  totalCount: Int!
  edges: [CategoryStickyThreadUpdateEventEdge!]!
  pageInfo: PageInfo!
}

input CategoryStickyThreadUpdateEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  category: ID!
  actor: ID!
}

type CategoryStickyThreadUpdateEventEdge {
  node: CategoryStickyThreadUpdateEvent!
  cursor: String!
}

enum CategoryStickyThreadUpdateEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  category_ASC
  category_DESC
  actor_ASC
  actor_DESC
}

input CategoryStickyThreadUpdateEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  category: ID
  actor: ID
}

input CategoryStickyThreadUpdateEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  category_eq: ID
  category_in: [ID!]
  actor_eq: ID
  actor_in: [ID!]
  category: ForumCategoryWhereInput
  newStickyThreads_none: ForumThreadWhereInput
  newStickyThreads_some: ForumThreadWhereInput
  newStickyThreads_every: ForumThreadWhereInput
  actor: WorkerWhereInput
  AND: [CategoryStickyThreadUpdateEventWhereInput!]
  OR: [CategoryStickyThreadUpdateEventWhereInput!]
}

input CategoryStickyThreadUpdateEventWhereUniqueInput {
  id: ID!
}

type CategoryUpdatedEvent implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  category: ForumCategory!
  categoryId: String!
  newArchivalStatus: Boolean!
  actor: Worker!
  actorId: String!
}

type CategoryUpdatedEventConnection {
  totalCount: Int!
  edges: [CategoryUpdatedEventEdge!]!
  pageInfo: PageInfo!
}

input CategoryUpdatedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  category: ID!
  newArchivalStatus: Boolean!
  actor: ID!
}

type CategoryUpdatedEventEdge {
  node: CategoryUpdatedEvent!
  cursor: String!
}

enum CategoryUpdatedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  category_ASC
  category_DESC
  newArchivalStatus_ASC
  newArchivalStatus_DESC
  actor_ASC
  actor_DESC
}

input CategoryUpdatedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  category: ID
  newArchivalStatus: Boolean
  actor: ID
}

input CategoryUpdatedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  category_eq: ID
  category_in: [ID!]
  newArchivalStatus_eq: Boolean
  newArchivalStatus_in: [Boolean!]
  actor_eq: ID
  actor_in: [ID!]
  category: ForumCategoryWhereInput
  actor: WorkerWhereInput
  AND: [CategoryUpdatedEventWhereInput!]
  OR: [CategoryUpdatedEventWhereInput!]
}

input CategoryUpdatedEventWhereUniqueInput {
  id: ID!
}

type CreateBlogPostProposalDetails {
  title: String!
  body: String!
}

input CreateBlogPostProposalDetailsCreateInput {
  title: String!
  body: String!
}

input CreateBlogPostProposalDetailsUpdateInput {
  title: String
  body: String
}

input CreateBlogPostProposalDetailsWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  title_eq: String
  title_contains: String
  title_startsWith: String
  title_endsWith: String
  title_in: [String!]
  body_eq: String
  body_contains: String
  body_startsWith: String
  body_endsWith: String
  body_in: [String!]
  AND: [CreateBlogPostProposalDetailsWhereInput!]
  OR: [CreateBlogPostProposalDetailsWhereInput!]
}

input CreateBlogPostProposalDetailsWhereUniqueInput {
  id: ID!
}

type CreateWorkingGroupLeadOpeningProposalDetails {
  metadata: WorkingGroupOpeningMetadata
  stakeAmount: BigInt!
  unstakingPeriod: Int!
  rewardPerBlock: BigInt!
  group: WorkingGroup
}

input CreateWorkingGroupLeadOpeningProposalDetailsCreateInput {
  stakeAmount: BigInt!
  unstakingPeriod: Float!
  rewardPerBlock: BigInt!
}

input CreateWorkingGroupLeadOpeningProposalDetailsUpdateInput {
  stakeAmount: BigInt
  unstakingPeriod: Float
  rewardPerBlock: BigInt
}

input CreateWorkingGroupLeadOpeningProposalDetailsWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  stakeAmount_eq: BigInt
  stakeAmount_gt: BigInt
  stakeAmount_gte: BigInt
  stakeAmount_lt: BigInt
  stakeAmount_lte: BigInt
  stakeAmount_in: [BigInt!]
  unstakingPeriod_eq: Int
  unstakingPeriod_gt: Int
  unstakingPeriod_gte: Int
  unstakingPeriod_lt: Int
  unstakingPeriod_lte: Int
  unstakingPeriod_in: [Int!]
  rewardPerBlock_eq: BigInt
  rewardPerBlock_gt: BigInt
  rewardPerBlock_gte: BigInt
  rewardPerBlock_lt: BigInt
  rewardPerBlock_lte: BigInt
  rewardPerBlock_in: [BigInt!]
  AND: [CreateWorkingGroupLeadOpeningProposalDetailsWhereInput!]
  OR: [CreateWorkingGroupLeadOpeningProposalDetailsWhereInput!]
}

input CreateWorkingGroupLeadOpeningProposalDetailsWhereUniqueInput {
  id: ID!
}

type DataObject implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  owner: DataObjectOwner!
  addedAt: Int!
  typeId: Int!
  size: BigInt!
  liaisonId: BigInt!
  liaisonJudgement: LiaisonJudgement!
  ipfsContentId: String!
  joystreamContentId: String!
  membermetadataavatar: [MemberMetadata!]
}

type DataObjectConnection {
  totalCount: Int!
  edges: [DataObjectEdge!]!
  pageInfo: PageInfo!
}

input DataObjectCreateInput {
  owner: JSONObject!
  addedAt: Float!
  typeId: Float!
  size: BigInt!
  liaisonId: BigInt!
  liaisonJudgement: LiaisonJudgement!
  ipfsContentId: String!
  joystreamContentId: String!
}

type DataObjectEdge {
  node: DataObject!
  cursor: String!
}

enum DataObjectOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  addedAt_ASC
  addedAt_DESC
  typeId_ASC
  typeId_DESC
  size_ASC
  size_DESC
  liaisonId_ASC
  liaisonId_DESC
  liaisonJudgement_ASC
  liaisonJudgement_DESC
  ipfsContentId_ASC
  ipfsContentId_DESC
  joystreamContentId_ASC
  joystreamContentId_DESC
}

union DataObjectOwner =
  DataObjectOwnerMember
  | DataObjectOwnerChannel
  | DataObjectOwnerDao
  | DataObjectOwnerCouncil
  | DataObjectOwnerWorkingGroup
type DataObjectOwnerChannel {
  channel: BigInt!
  dummy: Int
}

input DataObjectOwnerChannelCreateInput {
  channel: BigInt!
  dummy: Float
}

input DataObjectOwnerChannelUpdateInput {
  channel: BigInt
  dummy: Float
}

input DataObjectOwnerChannelWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  channel_eq: BigInt
  channel_gt: BigInt
  channel_gte: BigInt
  channel_lt: BigInt
  channel_lte: BigInt
  channel_in: [BigInt!]
  dummy_eq: Int
  dummy_gt: Int
  dummy_gte: Int
  dummy_lt: Int
  dummy_lte: Int
  dummy_in: [Int!]
  AND: [DataObjectOwnerChannelWhereInput!]
  OR: [DataObjectOwnerChannelWhereInput!]
}

input DataObjectOwnerChannelWhereUniqueInput {
  id: ID!
}

type DataObjectOwnerCouncil {
  dummy: Int
}

input DataObjectOwnerCouncilCreateInput {
  dummy: Float
}

input DataObjectOwnerCouncilUpdateInput {
  dummy: Float
}

input DataObjectOwnerCouncilWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  dummy_eq: Int
  dummy_gt: Int
  dummy_gte: Int
  dummy_lt: Int
  dummy_lte: Int
  dummy_in: [Int!]
  AND: [DataObjectOwnerCouncilWhereInput!]
  OR: [DataObjectOwnerCouncilWhereInput!]
}

input DataObjectOwnerCouncilWhereUniqueInput {
  id: ID!
}

type DataObjectOwnerDao {
  dao: BigInt!
}

input DataObjectOwnerDaoCreateInput {
  dao: BigInt!
}

input DataObjectOwnerDaoUpdateInput {
  dao: BigInt
}

input DataObjectOwnerDaoWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  dao_eq: BigInt
  dao_gt: BigInt
  dao_gte: BigInt
  dao_lt: BigInt
  dao_lte: BigInt
  dao_in: [BigInt!]
  AND: [DataObjectOwnerDaoWhereInput!]
  OR: [DataObjectOwnerDaoWhereInput!]
}

input DataObjectOwnerDaoWhereUniqueInput {
  id: ID!
}

type DataObjectOwnerMember {
  member: BigInt!
  dummy: Int
}

input DataObjectOwnerMemberCreateInput {
  member: BigInt!
  dummy: Float
}

input DataObjectOwnerMemberUpdateInput {
  member: BigInt
  dummy: Float
}

input DataObjectOwnerMemberWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  member_eq: BigInt
  member_gt: BigInt
  member_gte: BigInt
  member_lt: BigInt
  member_lte: BigInt
  member_in: [BigInt!]
  dummy_eq: Int
  dummy_gt: Int
  dummy_gte: Int
  dummy_lt: Int
  dummy_lte: Int
  dummy_in: [Int!]
  AND: [DataObjectOwnerMemberWhereInput!]
  OR: [DataObjectOwnerMemberWhereInput!]
}

input DataObjectOwnerMemberWhereUniqueInput {
  id: ID!
}

type DataObjectOwnerWorkingGroup {
  dummy: Int
}

input DataObjectOwnerWorkingGroupCreateInput {
  dummy: Float
}

input DataObjectOwnerWorkingGroupUpdateInput {
  dummy: Float
}

input DataObjectOwnerWorkingGroupWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  dummy_eq: Int
  dummy_gt: Int
  dummy_gte: Int
  dummy_lt: Int
  dummy_lte: Int
  dummy_in: [Int!]
  AND: [DataObjectOwnerWorkingGroupWhereInput!]
  OR: [DataObjectOwnerWorkingGroupWhereInput!]
}

input DataObjectOwnerWorkingGroupWhereUniqueInput {
  id: ID!
}

input DataObjectUpdateInput {
  owner: JSONObject
  addedAt: Float
  typeId: Float
  size: BigInt
  liaisonId: BigInt
  liaisonJudgement: LiaisonJudgement
  ipfsContentId: String
  joystreamContentId: String
}

input DataObjectWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  owner_json: JSONObject
  addedAt_eq: Int
  addedAt_gt: Int
  addedAt_gte: Int
  addedAt_lt: Int
  addedAt_lte: Int
  addedAt_in: [Int!]
  typeId_eq: Int
  typeId_gt: Int
  typeId_gte: Int
  typeId_lt: Int
  typeId_lte: Int
  typeId_in: [Int!]
  size_eq: BigInt
  size_gt: BigInt
  size_gte: BigInt
  size_lt: BigInt
  size_lte: BigInt
  size_in: [BigInt!]
  liaisonId_eq: BigInt
  liaisonId_gt: BigInt
  liaisonId_gte: BigInt
  liaisonId_lt: BigInt
  liaisonId_lte: BigInt
  liaisonId_in: [BigInt!]
  liaisonJudgement_eq: LiaisonJudgement
  liaisonJudgement_in: [LiaisonJudgement!]
  ipfsContentId_eq: String
  ipfsContentId_contains: String
  ipfsContentId_startsWith: String
  ipfsContentId_endsWith: String
  ipfsContentId_in: [String!]
  joystreamContentId_eq: String
  joystreamContentId_contains: String
  joystreamContentId_startsWith: String
  joystreamContentId_endsWith: String
  joystreamContentId_in: [String!]
  membermetadataavatar_none: MemberMetadataWhereInput
  membermetadataavatar_some: MemberMetadataWhereInput
  membermetadataavatar_every: MemberMetadataWhereInput
  AND: [DataObjectWhereInput!]
  OR: [DataObjectWhereInput!]
}

input DataObjectWhereUniqueInput {
  id: ID!
}

scalar DateTime

type DecreaseWorkingGroupLeadStakeProposalDetails {
  lead: Worker
  amount: BigInt!
}

input DecreaseWorkingGroupLeadStakeProposalDetailsCreateInput {
  amount: BigInt!
}

input DecreaseWorkingGroupLeadStakeProposalDetailsUpdateInput {
  amount: BigInt
}

input DecreaseWorkingGroupLeadStakeProposalDetailsWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  amount_eq: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_lt: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  AND: [DecreaseWorkingGroupLeadStakeProposalDetailsWhereInput!]
  OR: [DecreaseWorkingGroupLeadStakeProposalDetailsWhereInput!]
}

input DecreaseWorkingGroupLeadStakeProposalDetailsWhereUniqueInput {
  id: ID!
}

interface DeleteResponse {
  id: ID!
}

type EditBlogPostProposalDetails {
  blogPost: String!
  newTitle: String
  newBody: String
}

input EditBlogPostProposalDetailsCreateInput {
  blogPost: String!
  newTitle: String
  newBody: String
}

input EditBlogPostProposalDetailsUpdateInput {
  blogPost: String
  newTitle: String
  newBody: String
}

input EditBlogPostProposalDetailsWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  blogPost_eq: String
  blogPost_contains: String
  blogPost_startsWith: String
  blogPost_endsWith: String
  blogPost_in: [String!]
  newTitle_eq: String
  newTitle_contains: String
  newTitle_startsWith: String
  newTitle_endsWith: String
  newTitle_in: [String!]
  newBody_eq: String
  newBody_contains: String
  newBody_startsWith: String
  newBody_endsWith: String
  newBody_in: [String!]
  AND: [EditBlogPostProposalDetailsWhereInput!]
  OR: [EditBlogPostProposalDetailsWhereInput!]
}

input EditBlogPostProposalDetailsWhereUniqueInput {
  id: ID!
}

interface Event {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
}

input EventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  type: EventTypeOptions
}

enum EventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  type_ASC
  type_DESC
}

enum EventTypeOptions {
  ApplicationWithdrawnEvent
  AppliedOnOpeningEvent
  BudgetSetEvent
  BudgetSpendingEvent
  InitialInvitationBalanceUpdatedEvent
  InitialInvitationCountUpdatedEvent
  InvitesTransferredEvent
  LeaderInvitationQuotaUpdatedEvent
  LeaderSetEvent
  LeaderUnsetEvent
  MemberAccountsUpdatedEvent
  MemberInvitedEvent
  MemberProfileUpdatedEvent
  MemberVerificationStatusUpdatedEvent
  MembershipBoughtEvent
  MembershipPriceUpdatedEvent
  NewMissedRewardLevelReachedEvent
  OpeningAddedEvent
  OpeningCanceledEvent
  OpeningFilledEvent
  ProposalCancelledEvent
  ProposalCreatedEvent
  ProposalDecisionMadeEvent
  ProposalDiscussionPostCreatedEvent
  ProposalDiscussionPostDeletedEvent
  ProposalDiscussionPostUpdatedEvent
  ProposalDiscussionThreadCreatedEvent
  ProposalDiscussionThreadModeChangedEvent
  ProposalExecutedEvent
  ProposalStatusUpdatedEvent
  ProposalVotedEvent
  ReferralCutUpdatedEvent
  RewardPaidEvent
  StakeDecreasedEvent
  StakeIncreasedEvent
  StakeSlashedEvent
  StakingAccountAddedEvent
  StakingAccountConfirmedEvent
  StakingAccountRemovedEvent
  StatusTextChangedEvent
  TerminatedLeaderEvent
  TerminatedWorkerEvent
  WorkerExitedEvent
  WorkerRewardAccountUpdatedEvent
  WorkerRewardAmountUpdatedEvent
  WorkerRoleAccountUpdatedEvent
  WorkerStartedLeavingEvent
}

input EventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  type: EventTypeOptions
}

input EventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  type_eq: EventTypeOptions
  type_in: [EventTypeOptions!]
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
}

input EventWhereUniqueInput {
  id: ID!
}

type FillWorkingGroupLeadOpeningProposalDetails {
  opening: WorkingGroupOpening
  application: WorkingGroupApplication
}

type ForumCategory implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  parent: ForumCategory
  parentId: String
  title: String!
  description: String!
  threads: [ForumThread!]!
  moderators: [Worker!]!
  createdInEvent: CategoryCreatedEvent!
  status: CategoryStatus!
  categorydeletedeventcategory: [CategoryDeletedEvent!]
  categorymembershipofmoderatorupdatedeventcategory: [CategoryMembershipOfModeratorUpdatedEvent!]
  categorystickythreadupdateeventcategory: [CategoryStickyThreadUpdateEvent!]
  categoryupdatedeventcategory: [CategoryUpdatedEvent!]
  forumcategoryparent: [ForumCategory!]
  threadmovedeventoldCategory: [ThreadMovedEvent!]
  threadmovedeventnewCategory: [ThreadMovedEvent!]
}

type ForumCategoryConnection {
  totalCount: Int!
  edges: [ForumCategoryEdge!]!
  pageInfo: PageInfo!
}

input ForumCategoryCreateInput {
  parent: ID
  title: String!
  description: String!
  status: JSONObject!
}

type ForumCategoryEdge {
  node: ForumCategory!
  cursor: String!
}

enum ForumCategoryOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  parent_ASC
  parent_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
}

input ForumCategoryUpdateInput {
  parent: ID
  title: String
  description: String
  status: JSONObject
}

input ForumCategoryWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  parent_eq: ID
  parent_in: [ID!]
  title_eq: String
  title_contains: String
  title_startsWith: String
  title_endsWith: String
  title_in: [String!]
  description_eq: String
  description_contains: String
  description_startsWith: String
  description_endsWith: String
  description_in: [String!]
  status_json: JSONObject
  parent: ForumCategoryWhereInput
  threads_none: ForumThreadWhereInput
  threads_some: ForumThreadWhereInput
  threads_every: ForumThreadWhereInput
  moderators_none: WorkerWhereInput
  moderators_some: WorkerWhereInput
  moderators_every: WorkerWhereInput
  createdInEvent: CategoryCreatedEventWhereInput
  categorydeletedeventcategory_none: CategoryDeletedEventWhereInput
  categorydeletedeventcategory_some: CategoryDeletedEventWhereInput
  categorydeletedeventcategory_every: CategoryDeletedEventWhereInput
  categorymembershipofmoderatorupdatedeventcategory_none: CategoryMembershipOfModeratorUpdatedEventWhereInput
  categorymembershipofmoderatorupdatedeventcategory_some: CategoryMembershipOfModeratorUpdatedEventWhereInput
  categorymembershipofmoderatorupdatedeventcategory_every: CategoryMembershipOfModeratorUpdatedEventWhereInput
  categorystickythreadupdateeventcategory_none: CategoryStickyThreadUpdateEventWhereInput
  categorystickythreadupdateeventcategory_some: CategoryStickyThreadUpdateEventWhereInput
  categorystickythreadupdateeventcategory_every: CategoryStickyThreadUpdateEventWhereInput
  categoryupdatedeventcategory_none: CategoryUpdatedEventWhereInput
  categoryupdatedeventcategory_some: CategoryUpdatedEventWhereInput
  categoryupdatedeventcategory_every: CategoryUpdatedEventWhereInput
  forumcategoryparent_none: ForumCategoryWhereInput
  forumcategoryparent_some: ForumCategoryWhereInput
  forumcategoryparent_every: ForumCategoryWhereInput
  threadmovedeventoldCategory_none: ThreadMovedEventWhereInput
  threadmovedeventoldCategory_some: ThreadMovedEventWhereInput
  threadmovedeventoldCategory_every: ThreadMovedEventWhereInput
  threadmovedeventnewCategory_none: ThreadMovedEventWhereInput
  threadmovedeventnewCategory_some: ThreadMovedEventWhereInput
  threadmovedeventnewCategory_every: ThreadMovedEventWhereInput
  AND: [ForumCategoryWhereInput!]
  OR: [ForumCategoryWhereInput!]
}

input ForumCategoryWhereUniqueInput {
  id: ID!
}

type ForumPoll implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  thread: ForumThread!
  threadId: String!
  description: String!
  endTime: DateTime!
  pollAlternatives: [ForumPollAlternative!]!
}

type ForumPollAlternative implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  index: Int!
  poll: ForumPoll!
  pollId: String!
  text: String!
  votes: [VoteOnPollEvent!]!
}

type ForumPollAlternativeConnection {
  totalCount: Int!
  edges: [ForumPollAlternativeEdge!]!
  pageInfo: PageInfo!
}

input ForumPollAlternativeCreateInput {
  index: Float!
  poll: ID!
  text: String!
}

type ForumPollAlternativeEdge {
  node: ForumPollAlternative!
  cursor: String!
}

enum ForumPollAlternativeOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  index_ASC
  index_DESC
  poll_ASC
  poll_DESC
  text_ASC
  text_DESC
}

input ForumPollAlternativeUpdateInput {
  index: Float
  poll: ID
  text: String
}

input ForumPollAlternativeWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  index_eq: Int
  index_gt: Int
  index_gte: Int
  index_lt: Int
  index_lte: Int
  index_in: [Int!]
  poll_eq: ID
  poll_in: [ID!]
  text_eq: String
  text_contains: String
  text_startsWith: String
  text_endsWith: String
  text_in: [String!]
  poll: ForumPollWhereInput
  votes_none: VoteOnPollEventWhereInput
  votes_some: VoteOnPollEventWhereInput
  votes_every: VoteOnPollEventWhereInput
  AND: [ForumPollAlternativeWhereInput!]
  OR: [ForumPollAlternativeWhereInput!]
}

input ForumPollAlternativeWhereUniqueInput {
  id: ID!
}

type ForumPollConnection {
  totalCount: Int!
  edges: [ForumPollEdge!]!
  pageInfo: PageInfo!
}

input ForumPollCreateInput {
  thread: ID!
  description: String!
  endTime: DateTime!
}

type ForumPollEdge {
  node: ForumPoll!
  cursor: String!
}

enum ForumPollOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  thread_ASC
  thread_DESC
  description_ASC
  description_DESC
  endTime_ASC
  endTime_DESC
}

input ForumPollUpdateInput {
  thread: ID
  description: String
  endTime: DateTime
}

input ForumPollWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  thread_eq: ID
  thread_in: [ID!]
  description_eq: String
  description_contains: String
  description_startsWith: String
  description_endsWith: String
  description_in: [String!]
  endTime_eq: DateTime
  endTime_lt: DateTime
  endTime_lte: DateTime
  endTime_gt: DateTime
  endTime_gte: DateTime
  thread: ForumThreadWhereInput
  pollAlternatives_none: ForumPollAlternativeWhereInput
  pollAlternatives_some: ForumPollAlternativeWhereInput
  pollAlternatives_every: ForumPollAlternativeWhereInput
  AND: [ForumPollWhereInput!]
  OR: [ForumPollWhereInput!]
}

input ForumPollWhereUniqueInput {
  id: ID!
}

type ForumPost implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  author: Membership!
  authorId: String!
  thread: ForumThread!
  threadId: String!
  text: String!
  repliesTo: ForumPost
  repliesToId: String
  status: PostStatus!
  origin: PostOrigin!
  edits: [PostTextUpdatedEvent!]!
  reactions: [ForumPostReaction!]!
  deletedInEvent: PostDeletedEvent
  deletedInEventId: String
  forumpostrepliesTo: [ForumPost!]
  postaddedeventpost: [PostAddedEvent!]
  postmoderatedeventpost: [PostModeratedEvent!]
  postreactedeventpost: [PostReactedEvent!]
}

type ForumPostConnection {
  totalCount: Int!
  edges: [ForumPostEdge!]!
  pageInfo: PageInfo!
}

input ForumPostCreateInput {
  author: ID!
  thread: ID!
  text: String!
  repliesTo: ID
  status: JSONObject!
  origin: JSONObject!
  deletedInEvent: ID
}

type ForumPostEdge {
  node: ForumPost!
  cursor: String!
}

enum ForumPostOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  author_ASC
  author_DESC
  thread_ASC
  thread_DESC
  text_ASC
  text_DESC
  repliesTo_ASC
  repliesTo_DESC
  deletedInEvent_ASC
  deletedInEvent_DESC
}

type ForumPostReaction implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  member: Membership!
  memberId: String!
  post: ForumPost!
  postId: String!
  reaction: PostReaction!
}

type ForumPostReactionConnection {
  totalCount: Int!
  edges: [ForumPostReactionEdge!]!
  pageInfo: PageInfo!
}

input ForumPostReactionCreateInput {
  member: ID!
  post: ID!
  reaction: PostReaction!
}

type ForumPostReactionEdge {
  node: ForumPostReaction!
  cursor: String!
}

enum ForumPostReactionOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  member_ASC
  member_DESC
  post_ASC
  post_DESC
  reaction_ASC
  reaction_DESC
}

input ForumPostReactionUpdateInput {
  member: ID
  post: ID
  reaction: PostReaction
}

input ForumPostReactionWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  member_eq: ID
  member_in: [ID!]
  post_eq: ID
  post_in: [ID!]
  reaction_eq: PostReaction
  reaction_in: [PostReaction!]
  member: MembershipWhereInput
  post: ForumPostWhereInput
  AND: [ForumPostReactionWhereInput!]
  OR: [ForumPostReactionWhereInput!]
}

input ForumPostReactionWhereUniqueInput {
  id: ID!
}

input ForumPostUpdateInput {
  author: ID
  thread: ID
  text: String
  repliesTo: ID
  status: JSONObject
  origin: JSONObject
  deletedInEvent: ID
}

input ForumPostWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  author_eq: ID
  author_in: [ID!]
  thread_eq: ID
  thread_in: [ID!]
  text_eq: String
  text_contains: String
  text_startsWith: String
  text_endsWith: String
  text_in: [String!]
  repliesTo_eq: ID
  repliesTo_in: [ID!]
  status_json: JSONObject
  origin_json: JSONObject
  deletedInEvent_eq: ID
  deletedInEvent_in: [ID!]
  author: MembershipWhereInput
  thread: ForumThreadWhereInput
  repliesTo: ForumPostWhereInput
  edits_none: PostTextUpdatedEventWhereInput
  edits_some: PostTextUpdatedEventWhereInput
  edits_every: PostTextUpdatedEventWhereInput
  reactions_none: ForumPostReactionWhereInput
  reactions_some: ForumPostReactionWhereInput
  reactions_every: ForumPostReactionWhereInput
  deletedInEvent: PostDeletedEventWhereInput
  forumpostrepliesTo_none: ForumPostWhereInput
  forumpostrepliesTo_some: ForumPostWhereInput
  forumpostrepliesTo_every: ForumPostWhereInput
  postaddedeventpost_none: PostAddedEventWhereInput
  postaddedeventpost_some: PostAddedEventWhereInput
  postaddedeventpost_every: PostAddedEventWhereInput
  postmoderatedeventpost_none: PostModeratedEventWhereInput
  postmoderatedeventpost_some: PostModeratedEventWhereInput
  postmoderatedeventpost_every: PostModeratedEventWhereInput
  postreactedeventpost_none: PostReactedEventWhereInput
  postreactedeventpost_some: PostReactedEventWhereInput
  postreactedeventpost_every: PostReactedEventWhereInput
  AND: [ForumPostWhereInput!]
  OR: [ForumPostWhereInput!]
}

input ForumPostWhereUniqueInput {
  id: ID!
}

type ForumThread implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  author: Membership!
  authorId: String!
  category: ForumCategory!
  categoryId: String!
  title: String!
  posts: [ForumPost!]!
  poll: ForumPoll
  isSticky: Boolean!
  createdInEvent: ThreadCreatedEvent!
  status: ThreadStatus!
  titleUpdates: [ThreadTitleUpdatedEvent!]!
  madeStickyInEvents: [CategoryStickyThreadUpdateEvent!]!
  movedInEvents: [ThreadMovedEvent!]!
  threaddeletedeventthread: [ThreadDeletedEvent!]
  threadmoderatedeventthread: [ThreadModeratedEvent!]
}

type ForumThreadConnection {
  totalCount: Int!
  edges: [ForumThreadEdge!]!
  pageInfo: PageInfo!
}

input ForumThreadCreateInput {
  author: ID!
  category: ID!
  title: String!
  isSticky: Boolean!
  status: JSONObject!
}

type ForumThreadEdge {
  node: ForumThread!
  cursor: String!
}

enum ForumThreadOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  author_ASC
  author_DESC
  category_ASC
  category_DESC
  title_ASC
  title_DESC
  isSticky_ASC
  isSticky_DESC
}

input ForumThreadUpdateInput {
  author: ID
  category: ID
  title: String
  isSticky: Boolean
  status: JSONObject
}

input ForumThreadWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  author_eq: ID
  author_in: [ID!]
  category_eq: ID
  category_in: [ID!]
  title_eq: String
  title_contains: String
  title_startsWith: String
  title_endsWith: String
  title_in: [String!]
  isSticky_eq: Boolean
  isSticky_in: [Boolean!]
  status_json: JSONObject
  author: MembershipWhereInput
  category: ForumCategoryWhereInput
  posts_none: ForumPostWhereInput
  posts_some: ForumPostWhereInput
  posts_every: ForumPostWhereInput
  poll: ForumPollWhereInput
  createdInEvent: ThreadCreatedEventWhereInput
  titleUpdates_none: ThreadTitleUpdatedEventWhereInput
  titleUpdates_some: ThreadTitleUpdatedEventWhereInput
  titleUpdates_every: ThreadTitleUpdatedEventWhereInput
  madeStickyInEvents_none: CategoryStickyThreadUpdateEventWhereInput
  madeStickyInEvents_some: CategoryStickyThreadUpdateEventWhereInput
  madeStickyInEvents_every: CategoryStickyThreadUpdateEventWhereInput
  movedInEvents_none: ThreadMovedEventWhereInput
  movedInEvents_some: ThreadMovedEventWhereInput
  movedInEvents_every: ThreadMovedEventWhereInput
  threaddeletedeventthread_none: ThreadDeletedEventWhereInput
  threaddeletedeventthread_some: ThreadDeletedEventWhereInput
  threaddeletedeventthread_every: ThreadDeletedEventWhereInput
  threadmoderatedeventthread_none: ThreadModeratedEventWhereInput
  threadmoderatedeventthread_some: ThreadModeratedEventWhereInput
  threadmoderatedeventthread_every: ThreadModeratedEventWhereInput
  AND: [ForumThreadWhereInput!]
  OR: [ForumThreadWhereInput!]
}

input ForumThreadWhereUniqueInput {
  id: ID!
}

type FundingRequestDestination implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  amount: BigInt!
  account: String!
  list: FundingRequestDestinationsList!
  listId: String!
}

type FundingRequestDestinationConnection {
  totalCount: Int!
  edges: [FundingRequestDestinationEdge!]!
  pageInfo: PageInfo!
}

input FundingRequestDestinationCreateInput {
  amount: BigInt!
  account: String!
  list: ID!
}

type FundingRequestDestinationEdge {
  node: FundingRequestDestination!
  cursor: String!
}

enum FundingRequestDestinationOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  amount_ASC
  amount_DESC
  account_ASC
  account_DESC
  list_ASC
  list_DESC
}

type FundingRequestDestinationsList implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  phantom: Int
  destinations: [FundingRequestDestination!]!
}

type FundingRequestDestinationsListConnection {
  totalCount: Int!
  edges: [FundingRequestDestinationsListEdge!]!
  pageInfo: PageInfo!
}

input FundingRequestDestinationsListCreateInput {
  phantom: Float
}

type FundingRequestDestinationsListEdge {
  node: FundingRequestDestinationsList!
  cursor: String!
}

enum FundingRequestDestinationsListOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  phantom_ASC
  phantom_DESC
}

input FundingRequestDestinationsListUpdateInput {
  phantom: Float
}

input FundingRequestDestinationsListWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  phantom_eq: Int
  phantom_gt: Int
  phantom_gte: Int
  phantom_lt: Int
  phantom_lte: Int
  phantom_in: [Int!]
  destinations_none: FundingRequestDestinationWhereInput
  destinations_some: FundingRequestDestinationWhereInput
  destinations_every: FundingRequestDestinationWhereInput
  AND: [FundingRequestDestinationsListWhereInput!]
  OR: [FundingRequestDestinationsListWhereInput!]
}

input FundingRequestDestinationsListWhereUniqueInput {
  id: ID!
}

input FundingRequestDestinationUpdateInput {
  amount: BigInt
  account: String
  list: ID
}

input FundingRequestDestinationWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  amount_eq: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_lt: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  account_eq: String
  account_contains: String
  account_startsWith: String
  account_endsWith: String
  account_in: [String!]
  list_eq: ID
  list_in: [ID!]
  list: FundingRequestDestinationsListWhereInput
  AND: [FundingRequestDestinationWhereInput!]
  OR: [FundingRequestDestinationWhereInput!]
}

input FundingRequestDestinationWhereUniqueInput {
  id: ID!
}

type FundingRequestProposalDetails {
  destinationsList: FundingRequestDestinationsList
}

type InitialInvitationBalanceUpdatedEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  newInitialBalance: BigInt!
}

type InitialInvitationBalanceUpdatedEventConnection {
  totalCount: Int!
  edges: [InitialInvitationBalanceUpdatedEventEdge!]!
  pageInfo: PageInfo!
}

input InitialInvitationBalanceUpdatedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  newInitialBalance: BigInt!
}

type InitialInvitationBalanceUpdatedEventEdge {
  node: InitialInvitationBalanceUpdatedEvent!
  cursor: String!
}

enum InitialInvitationBalanceUpdatedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  newInitialBalance_ASC
  newInitialBalance_DESC
}

input InitialInvitationBalanceUpdatedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  newInitialBalance: BigInt
}

input InitialInvitationBalanceUpdatedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  newInitialBalance_eq: BigInt
  newInitialBalance_gt: BigInt
  newInitialBalance_gte: BigInt
  newInitialBalance_lt: BigInt
  newInitialBalance_lte: BigInt
  newInitialBalance_in: [BigInt!]
  AND: [InitialInvitationBalanceUpdatedEventWhereInput!]
  OR: [InitialInvitationBalanceUpdatedEventWhereInput!]
}

input InitialInvitationBalanceUpdatedEventWhereUniqueInput {
  id: ID!
}

type InitialInvitationCountUpdatedEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  newInitialInvitationCount: Int!
}

type InitialInvitationCountUpdatedEventConnection {
  totalCount: Int!
  edges: [InitialInvitationCountUpdatedEventEdge!]!
  pageInfo: PageInfo!
}

input InitialInvitationCountUpdatedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  newInitialInvitationCount: Float!
}

type InitialInvitationCountUpdatedEventEdge {
  node: InitialInvitationCountUpdatedEvent!
  cursor: String!
}

enum InitialInvitationCountUpdatedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  newInitialInvitationCount_ASC
  newInitialInvitationCount_DESC
}

input InitialInvitationCountUpdatedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  newInitialInvitationCount: Float
}

input InitialInvitationCountUpdatedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  newInitialInvitationCount_eq: Int
  newInitialInvitationCount_gt: Int
  newInitialInvitationCount_gte: Int
  newInitialInvitationCount_lt: Int
  newInitialInvitationCount_lte: Int
  newInitialInvitationCount_in: [Int!]
  AND: [InitialInvitationCountUpdatedEventWhereInput!]
  OR: [InitialInvitationCountUpdatedEventWhereInput!]
}

input InitialInvitationCountUpdatedEventWhereUniqueInput {
  id: ID!
}

type InvalidActionMetadata {
  reason: String!
}

input InvalidActionMetadataCreateInput {
  reason: String!
}

input InvalidActionMetadataUpdateInput {
  reason: String
}

input InvalidActionMetadataWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  reason_eq: String
  reason_contains: String
  reason_startsWith: String
  reason_endsWith: String
  reason_in: [String!]
  AND: [InvalidActionMetadataWhereInput!]
  OR: [InvalidActionMetadataWhereInput!]
}

input InvalidActionMetadataWhereUniqueInput {
  id: ID!
}

type InvitesTransferredEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  sourceMember: Membership!
  sourceMemberId: String!
  targetMember: Membership!
  targetMemberId: String!
  numberOfInvites: Int!
}

type InvitesTransferredEventConnection {
  totalCount: Int!
  edges: [InvitesTransferredEventEdge!]!
  pageInfo: PageInfo!
}

input InvitesTransferredEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  sourceMember: ID!
  targetMember: ID!
  numberOfInvites: Float!
}

type InvitesTransferredEventEdge {
  node: InvitesTransferredEvent!
  cursor: String!
}

enum InvitesTransferredEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  sourceMember_ASC
  sourceMember_DESC
  targetMember_ASC
  targetMember_DESC
  numberOfInvites_ASC
  numberOfInvites_DESC
}

input InvitesTransferredEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  sourceMember: ID
  targetMember: ID
  numberOfInvites: Float
}

input InvitesTransferredEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  sourceMember_eq: ID
  sourceMember_in: [ID!]
  targetMember_eq: ID
  targetMember_in: [ID!]
  numberOfInvites_eq: Int
  numberOfInvites_gt: Int
  numberOfInvites_gte: Int
  numberOfInvites_lt: Int
  numberOfInvites_lte: Int
  numberOfInvites_in: [Int!]
  sourceMember: MembershipWhereInput
  targetMember: MembershipWhereInput
  AND: [InvitesTransferredEventWhereInput!]
  OR: [InvitesTransferredEventWhereInput!]
}

input InvitesTransferredEventWhereUniqueInput {
  id: ID!
}

scalar JSONObject

type LeaderInvitationQuotaUpdatedEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  newInvitationQuota: Int!
}

type LeaderInvitationQuotaUpdatedEventConnection {
  totalCount: Int!
  edges: [LeaderInvitationQuotaUpdatedEventEdge!]!
  pageInfo: PageInfo!
}

input LeaderInvitationQuotaUpdatedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  newInvitationQuota: Float!
}

type LeaderInvitationQuotaUpdatedEventEdge {
  node: LeaderInvitationQuotaUpdatedEvent!
  cursor: String!
}

enum LeaderInvitationQuotaUpdatedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  newInvitationQuota_ASC
  newInvitationQuota_DESC
}

input LeaderInvitationQuotaUpdatedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  newInvitationQuota: Float
}

input LeaderInvitationQuotaUpdatedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  newInvitationQuota_eq: Int
  newInvitationQuota_gt: Int
  newInvitationQuota_gte: Int
  newInvitationQuota_lt: Int
  newInvitationQuota_lte: Int
  newInvitationQuota_in: [Int!]
  AND: [LeaderInvitationQuotaUpdatedEventWhereInput!]
  OR: [LeaderInvitationQuotaUpdatedEventWhereInput!]
}

input LeaderInvitationQuotaUpdatedEventWhereUniqueInput {
  id: ID!
}

type LeaderSetEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  group: WorkingGroup!
  groupId: String!
  worker: Worker
  workerId: String
}

type LeaderSetEventConnection {
  totalCount: Int!
  edges: [LeaderSetEventEdge!]!
  pageInfo: PageInfo!
}

input LeaderSetEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  group: ID!
  worker: ID
}

type LeaderSetEventEdge {
  node: LeaderSetEvent!
  cursor: String!
}

enum LeaderSetEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  group_ASC
  group_DESC
  worker_ASC
  worker_DESC
}

input LeaderSetEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  group: ID
  worker: ID
}

input LeaderSetEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  group_eq: ID
  group_in: [ID!]
  worker_eq: ID
  worker_in: [ID!]
  group: WorkingGroupWhereInput
  worker: WorkerWhereInput
  AND: [LeaderSetEventWhereInput!]
  OR: [LeaderSetEventWhereInput!]
}

input LeaderSetEventWhereUniqueInput {
  id: ID!
}

type LeaderUnsetEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  group: WorkingGroup!
  groupId: String!
  leader: Worker!
  leaderId: String!
}

type LeaderUnsetEventConnection {
  totalCount: Int!
  edges: [LeaderUnsetEventEdge!]!
  pageInfo: PageInfo!
}

input LeaderUnsetEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  group: ID!
  leader: ID!
}

type LeaderUnsetEventEdge {
  node: LeaderUnsetEvent!
  cursor: String!
}

enum LeaderUnsetEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  group_ASC
  group_DESC
  leader_ASC
  leader_DESC
}

input LeaderUnsetEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  group: ID
  leader: ID
}

input LeaderUnsetEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  group_eq: ID
  group_in: [ID!]
  leader_eq: ID
  leader_in: [ID!]
  group: WorkingGroupWhereInput
  leader: WorkerWhereInput
  AND: [LeaderUnsetEventWhereInput!]
  OR: [LeaderUnsetEventWhereInput!]
}

input LeaderUnsetEventWhereUniqueInput {
  id: ID!
}

enum LiaisonJudgement {
  PENDING
  ACCEPTED
  REJECTED
}

type LockBlogPostProposalDetails {
  blogPost: String!
}

input LockBlogPostProposalDetailsCreateInput {
  blogPost: String!
}

input LockBlogPostProposalDetailsUpdateInput {
  blogPost: String
}

input LockBlogPostProposalDetailsWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  blogPost_eq: String
  blogPost_contains: String
  blogPost_startsWith: String
  blogPost_endsWith: String
  blogPost_in: [String!]
  AND: [LockBlogPostProposalDetailsWhereInput!]
  OR: [LockBlogPostProposalDetailsWhereInput!]
}

input LockBlogPostProposalDetailsWhereUniqueInput {
  id: ID!
}

type MemberAccountsUpdatedEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  member: Membership!
  memberId: String!
  newRootAccount: String
  newControllerAccount: String
}

type MemberAccountsUpdatedEventConnection {
  totalCount: Int!
  edges: [MemberAccountsUpdatedEventEdge!]!
  pageInfo: PageInfo!
}

input MemberAccountsUpdatedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  member: ID!
  newRootAccount: String
  newControllerAccount: String
}

type MemberAccountsUpdatedEventEdge {
  node: MemberAccountsUpdatedEvent!
  cursor: String!
}

enum MemberAccountsUpdatedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  member_ASC
  member_DESC
  newRootAccount_ASC
  newRootAccount_DESC
  newControllerAccount_ASC
  newControllerAccount_DESC
}

input MemberAccountsUpdatedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  member: ID
  newRootAccount: String
  newControllerAccount: String
}

input MemberAccountsUpdatedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  member_eq: ID
  member_in: [ID!]
  newRootAccount_eq: String
  newRootAccount_contains: String
  newRootAccount_startsWith: String
  newRootAccount_endsWith: String
  newRootAccount_in: [String!]
  newControllerAccount_eq: String
  newControllerAccount_contains: String
  newControllerAccount_startsWith: String
  newControllerAccount_endsWith: String
  newControllerAccount_in: [String!]
  member: MembershipWhereInput
  AND: [MemberAccountsUpdatedEventWhereInput!]
  OR: [MemberAccountsUpdatedEventWhereInput!]
}

input MemberAccountsUpdatedEventWhereUniqueInput {
  id: ID!
}

type MemberInvitedEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  invitingMember: Membership!
  invitingMemberId: String!
  newMember: Membership!
  newMemberId: String!
  rootAccount: String!
  controllerAccount: String!
  handle: String!
  metadata: MemberMetadata!
  metadataId: String!
}

type MemberInvitedEventConnection {
  totalCount: Int!
  edges: [MemberInvitedEventEdge!]!
  pageInfo: PageInfo!
}

input MemberInvitedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  invitingMember: ID!
  newMember: ID!
  rootAccount: String!
  controllerAccount: String!
  handle: String!
  metadata: ID!
}

type MemberInvitedEventEdge {
  node: MemberInvitedEvent!
  cursor: String!
}

enum MemberInvitedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  invitingMember_ASC
  invitingMember_DESC
  newMember_ASC
  newMember_DESC
  rootAccount_ASC
  rootAccount_DESC
  controllerAccount_ASC
  controllerAccount_DESC
  handle_ASC
  handle_DESC
  metadata_ASC
  metadata_DESC
}

input MemberInvitedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  invitingMember: ID
  newMember: ID
  rootAccount: String
  controllerAccount: String
  handle: String
  metadata: ID
}

input MemberInvitedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  invitingMember_eq: ID
  invitingMember_in: [ID!]
  newMember_eq: ID
  newMember_in: [ID!]
  rootAccount_eq: String
  rootAccount_contains: String
  rootAccount_startsWith: String
  rootAccount_endsWith: String
  rootAccount_in: [String!]
  controllerAccount_eq: String
  controllerAccount_contains: String
  controllerAccount_startsWith: String
  controllerAccount_endsWith: String
  controllerAccount_in: [String!]
  handle_eq: String
  handle_contains: String
  handle_startsWith: String
  handle_endsWith: String
  handle_in: [String!]
  metadata_eq: ID
  metadata_in: [ID!]
  invitingMember: MembershipWhereInput
  newMember: MembershipWhereInput
  metadata: MemberMetadataWhereInput
  AND: [MemberInvitedEventWhereInput!]
  OR: [MemberInvitedEventWhereInput!]
}

input MemberInvitedEventWhereUniqueInput {
  id: ID!
}

type MemberMetadata implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  name: String
  avatar: DataObject
  avatarId: String
  about: String
  memberinvitedeventmetadata: [MemberInvitedEvent!]
  memberprofileupdatedeventnewMetadata: [MemberProfileUpdatedEvent!]
  membershipmetadata: [Membership!]
  membershipboughteventmetadata: [MembershipBoughtEvent!]
}

type MemberMetadataConnection {
  totalCount: Int!
  edges: [MemberMetadataEdge!]!
  pageInfo: PageInfo!
}

input MemberMetadataCreateInput {
  name: String
  avatar: ID
  about: String
}

type MemberMetadataEdge {
  node: MemberMetadata!
  cursor: String!
}

enum MemberMetadataOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  name_ASC
  name_DESC
  avatar_ASC
  avatar_DESC
  about_ASC
  about_DESC
}

input MemberMetadataUpdateInput {
  name: String
  avatar: ID
  about: String
}

input MemberMetadataWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  name_eq: String
  name_contains: String
  name_startsWith: String
  name_endsWith: String
  name_in: [String!]
  avatar_eq: ID
  avatar_in: [ID!]
  about_eq: String
  about_contains: String
  about_startsWith: String
  about_endsWith: String
  about_in: [String!]
  avatar: DataObjectWhereInput
  memberinvitedeventmetadata_none: MemberInvitedEventWhereInput
  memberinvitedeventmetadata_some: MemberInvitedEventWhereInput
  memberinvitedeventmetadata_every: MemberInvitedEventWhereInput
  memberprofileupdatedeventnewMetadata_none: MemberProfileUpdatedEventWhereInput
  memberprofileupdatedeventnewMetadata_some: MemberProfileUpdatedEventWhereInput
  memberprofileupdatedeventnewMetadata_every: MemberProfileUpdatedEventWhereInput
  membershipmetadata_none: MembershipWhereInput
  membershipmetadata_some: MembershipWhereInput
  membershipmetadata_every: MembershipWhereInput
  membershipboughteventmetadata_none: MembershipBoughtEventWhereInput
  membershipboughteventmetadata_some: MembershipBoughtEventWhereInput
  membershipboughteventmetadata_every: MembershipBoughtEventWhereInput
  AND: [MemberMetadataWhereInput!]
  OR: [MemberMetadataWhereInput!]
}

input MemberMetadataWhereUniqueInput {
  id: ID!
}

type MemberProfileUpdatedEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  member: Membership!
  memberId: String!
  newHandle: String
  newMetadata: MemberMetadata!
  newMetadataId: String!
}

type MemberProfileUpdatedEventConnection {
  totalCount: Int!
  edges: [MemberProfileUpdatedEventEdge!]!
  pageInfo: PageInfo!
}

input MemberProfileUpdatedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  member: ID!
  newHandle: String
  newMetadata: ID!
}

type MemberProfileUpdatedEventEdge {
  node: MemberProfileUpdatedEvent!
  cursor: String!
}

enum MemberProfileUpdatedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  member_ASC
  member_DESC
  newHandle_ASC
  newHandle_DESC
  newMetadata_ASC
  newMetadata_DESC
}

input MemberProfileUpdatedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  member: ID
  newHandle: String
  newMetadata: ID
}

input MemberProfileUpdatedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  member_eq: ID
  member_in: [ID!]
  newHandle_eq: String
  newHandle_contains: String
  newHandle_startsWith: String
  newHandle_endsWith: String
  newHandle_in: [String!]
  newMetadata_eq: ID
  newMetadata_in: [ID!]
  member: MembershipWhereInput
  newMetadata: MemberMetadataWhereInput
  AND: [MemberProfileUpdatedEventWhereInput!]
  OR: [MemberProfileUpdatedEventWhereInput!]
}

input MemberProfileUpdatedEventWhereUniqueInput {
  id: ID!
}

type MembersByHandleFTSOutput {
  item: MembersByHandleSearchResult!
  rank: Float!
  isTypeOf: String!
  highlight: String!
}

union MembersByHandleSearchResult = Membership
type Membership implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  handle: String!
  metadata: MemberMetadata!
  metadataId: String!
  controllerAccount: String!
  rootAccount: String!
  entry: MembershipEntryMethod!
  isVerified: Boolean!
  boundAccounts: [String!]!
  inviteCount: Int!
  invitees: [Membership!]!
  invitedBy: Membership
  invitedById: String
  referredMembers: [Membership!]!
  referredBy: Membership
  referredById: String
  isFoundingMember: Boolean!
  roles: [Worker!]!
  whitelistedIn: [ProposalDiscussionWhitelist!]!
  forumpostauthor: [ForumPost!]
  forumpostreactionmember: [ForumPostReaction!]
  forumthreadauthor: [ForumThread!]
  invitestransferredeventsourceMember: [InvitesTransferredEvent!]
  invitestransferredeventtargetMember: [InvitesTransferredEvent!]
  memberaccountsupdatedeventmember: [MemberAccountsUpdatedEvent!]
  memberinvitedeventinvitingMember: [MemberInvitedEvent!]
  memberinvitedeventnewMember: [MemberInvitedEvent!]
  memberprofileupdatedeventmember: [MemberProfileUpdatedEvent!]
  memberverificationstatusupdatedeventmember: [MemberVerificationStatusUpdatedEvent!]
  membershipboughteventnewMember: [MembershipBoughtEvent!]
  membershipboughteventreferrer: [MembershipBoughtEvent!]
  postdeletedeventactor: [PostDeletedEvent!]
  postreactedeventreactingMember: [PostReactedEvent!]
  proposalcreator: [Proposal!]
  proposaldiscussionpostauthor: [ProposalDiscussionPost!]
  proposaldiscussionpostdeletedeventactor: [ProposalDiscussionPostDeletedEvent!]
  proposaldiscussionthreadmodechangedeventactor: [ProposalDiscussionThreadModeChangedEvent!]
  proposalvotedeventvoter: [ProposalVotedEvent!]
  stakingaccountaddedeventmember: [StakingAccountAddedEvent!]
  stakingaccountconfirmedeventmember: [StakingAccountConfirmedEvent!]
  stakingaccountremovedeventmember: [StakingAccountRemovedEvent!]
  voteonpolleventvotingMember: [VoteOnPollEvent!]
  workinggroupapplicationapplicant: [WorkingGroupApplication!]
}

type MembershipBoughtEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  newMember: Membership!
  newMemberId: String!
  rootAccount: String!
  controllerAccount: String!
  handle: String!
  metadata: MemberMetadata!
  metadataId: String!
  referrer: Membership
  referrerId: String
}

type MembershipBoughtEventConnection {
  totalCount: Int!
  edges: [MembershipBoughtEventEdge!]!
  pageInfo: PageInfo!
}

input MembershipBoughtEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  newMember: ID!
  rootAccount: String!
  controllerAccount: String!
  handle: String!
  metadata: ID!
  referrer: ID
}

type MembershipBoughtEventEdge {
  node: MembershipBoughtEvent!
  cursor: String!
}

enum MembershipBoughtEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  newMember_ASC
  newMember_DESC
  rootAccount_ASC
  rootAccount_DESC
  controllerAccount_ASC
  controllerAccount_DESC
  handle_ASC
  handle_DESC
  metadata_ASC
  metadata_DESC
  referrer_ASC
  referrer_DESC
}

input MembershipBoughtEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  newMember: ID
  rootAccount: String
  controllerAccount: String
  handle: String
  metadata: ID
  referrer: ID
}

input MembershipBoughtEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  newMember_eq: ID
  newMember_in: [ID!]
  rootAccount_eq: String
  rootAccount_contains: String
  rootAccount_startsWith: String
  rootAccount_endsWith: String
  rootAccount_in: [String!]
  controllerAccount_eq: String
  controllerAccount_contains: String
  controllerAccount_startsWith: String
  controllerAccount_endsWith: String
  controllerAccount_in: [String!]
  handle_eq: String
  handle_contains: String
  handle_startsWith: String
  handle_endsWith: String
  handle_in: [String!]
  metadata_eq: ID
  metadata_in: [ID!]
  referrer_eq: ID
  referrer_in: [ID!]
  newMember: MembershipWhereInput
  metadata: MemberMetadataWhereInput
  referrer: MembershipWhereInput
  AND: [MembershipBoughtEventWhereInput!]
  OR: [MembershipBoughtEventWhereInput!]
}

input MembershipBoughtEventWhereUniqueInput {
  id: ID!
}

type MembershipConnection {
  totalCount: Int!
  edges: [MembershipEdge!]!
  pageInfo: PageInfo!
}

input MembershipCreateInput {
  handle: String!
  metadata: ID!
  controllerAccount: String!
  rootAccount: String!
  entry: JSONObject!
  isVerified: Boolean!
  boundAccounts: [String!]!
  inviteCount: Float!
  invitedBy: ID
  referredBy: ID
  isFoundingMember: Boolean!
}

type MembershipEdge {
  node: Membership!
  cursor: String!
}

type MembershipEntryGenesis {
  phantom: Int
}

input MembershipEntryGenesisCreateInput {
  phantom: Float
}

input MembershipEntryGenesisUpdateInput {
  phantom: Float
}

input MembershipEntryGenesisWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  phantom_eq: Int
  phantom_gt: Int
  phantom_gte: Int
  phantom_lt: Int
  phantom_lte: Int
  phantom_in: [Int!]
  AND: [MembershipEntryGenesisWhereInput!]
  OR: [MembershipEntryGenesisWhereInput!]
}

input MembershipEntryGenesisWhereUniqueInput {
  id: ID!
}

type MembershipEntryInvited {
  memberInvitedEvent: MemberInvitedEvent
}

union MembershipEntryMethod =
  MembershipEntryPaid
  | MembershipEntryInvited
  | MembershipEntryGenesis
type MembershipEntryPaid {
  membershipBoughtEvent: MembershipBoughtEvent
}

enum MembershipOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  handle_ASC
  handle_DESC
  metadata_ASC
  metadata_DESC
  controllerAccount_ASC
  controllerAccount_DESC
  rootAccount_ASC
  rootAccount_DESC
  isVerified_ASC
  isVerified_DESC
  inviteCount_ASC
  inviteCount_DESC
  invitedBy_ASC
  invitedBy_DESC
  referredBy_ASC
  referredBy_DESC
  isFoundingMember_ASC
  isFoundingMember_DESC
}

type MembershipPriceUpdatedEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  newPrice: BigInt!
}

type MembershipPriceUpdatedEventConnection {
  totalCount: Int!
  edges: [MembershipPriceUpdatedEventEdge!]!
  pageInfo: PageInfo!
}

input MembershipPriceUpdatedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  newPrice: BigInt!
}

type MembershipPriceUpdatedEventEdge {
  node: MembershipPriceUpdatedEvent!
  cursor: String!
}

enum MembershipPriceUpdatedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  newPrice_ASC
  newPrice_DESC
}

input MembershipPriceUpdatedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  newPrice: BigInt
}

input MembershipPriceUpdatedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  newPrice_eq: BigInt
  newPrice_gt: BigInt
  newPrice_gte: BigInt
  newPrice_lt: BigInt
  newPrice_lte: BigInt
  newPrice_in: [BigInt!]
  AND: [MembershipPriceUpdatedEventWhereInput!]
  OR: [MembershipPriceUpdatedEventWhereInput!]
}

input MembershipPriceUpdatedEventWhereUniqueInput {
  id: ID!
}

type MembershipSystemSnapshot implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  snapshotBlock: Int!
  defaultInviteCount: Int!
  membershipPrice: BigInt!
  referralCut: Int!
  invitedInitialBalance: BigInt!
}

type MembershipSystemSnapshotConnection {
  totalCount: Int!
  edges: [MembershipSystemSnapshotEdge!]!
  pageInfo: PageInfo!
}

input MembershipSystemSnapshotCreateInput {
  snapshotBlock: Float!
  defaultInviteCount: Float!
  membershipPrice: BigInt!
  referralCut: Float!
  invitedInitialBalance: BigInt!
}

type MembershipSystemSnapshotEdge {
  node: MembershipSystemSnapshot!
  cursor: String!
}

enum MembershipSystemSnapshotOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  snapshotBlock_ASC
  snapshotBlock_DESC
  defaultInviteCount_ASC
  defaultInviteCount_DESC
  membershipPrice_ASC
  membershipPrice_DESC
  referralCut_ASC
  referralCut_DESC
  invitedInitialBalance_ASC
  invitedInitialBalance_DESC
}

input MembershipSystemSnapshotUpdateInput {
  snapshotBlock: Float
  defaultInviteCount: Float
  membershipPrice: BigInt
  referralCut: Float
  invitedInitialBalance: BigInt
}

input MembershipSystemSnapshotWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  snapshotBlock_eq: Int
  snapshotBlock_gt: Int
  snapshotBlock_gte: Int
  snapshotBlock_lt: Int
  snapshotBlock_lte: Int
  snapshotBlock_in: [Int!]
  defaultInviteCount_eq: Int
  defaultInviteCount_gt: Int
  defaultInviteCount_gte: Int
  defaultInviteCount_lt: Int
  defaultInviteCount_lte: Int
  defaultInviteCount_in: [Int!]
  membershipPrice_eq: BigInt
  membershipPrice_gt: BigInt
  membershipPrice_gte: BigInt
  membershipPrice_lt: BigInt
  membershipPrice_lte: BigInt
  membershipPrice_in: [BigInt!]
  referralCut_eq: Int
  referralCut_gt: Int
  referralCut_gte: Int
  referralCut_lt: Int
  referralCut_lte: Int
  referralCut_in: [Int!]
  invitedInitialBalance_eq: BigInt
  invitedInitialBalance_gt: BigInt
  invitedInitialBalance_gte: BigInt
  invitedInitialBalance_lt: BigInt
  invitedInitialBalance_lte: BigInt
  invitedInitialBalance_in: [BigInt!]
  AND: [MembershipSystemSnapshotWhereInput!]
  OR: [MembershipSystemSnapshotWhereInput!]
}

input MembershipSystemSnapshotWhereUniqueInput {
  id: ID!
}

input MembershipUpdateInput {
  handle: String
  metadata: ID
  controllerAccount: String
  rootAccount: String
  entry: JSONObject
  isVerified: Boolean
  boundAccounts: [String!]
  inviteCount: Float
  invitedBy: ID
  referredBy: ID
  isFoundingMember: Boolean
}

input MembershipWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  handle_eq: String
  handle_contains: String
  handle_startsWith: String
  handle_endsWith: String
  handle_in: [String!]
  metadata_eq: ID
  metadata_in: [ID!]
  controllerAccount_eq: String
  controllerAccount_contains: String
  controllerAccount_startsWith: String
  controllerAccount_endsWith: String
  controllerAccount_in: [String!]
  rootAccount_eq: String
  rootAccount_contains: String
  rootAccount_startsWith: String
  rootAccount_endsWith: String
  rootAccount_in: [String!]
  entry_json: JSONObject
  isVerified_eq: Boolean
  isVerified_in: [Boolean!]
  inviteCount_eq: Int
  inviteCount_gt: Int
  inviteCount_gte: Int
  inviteCount_lt: Int
  inviteCount_lte: Int
  inviteCount_in: [Int!]
  invitedBy_eq: ID
  invitedBy_in: [ID!]
  referredBy_eq: ID
  referredBy_in: [ID!]
  isFoundingMember_eq: Boolean
  isFoundingMember_in: [Boolean!]
  metadata: MemberMetadataWhereInput
  invitees_none: MembershipWhereInput
  invitees_some: MembershipWhereInput
  invitees_every: MembershipWhereInput
  invitedBy: MembershipWhereInput
  referredMembers_none: MembershipWhereInput
  referredMembers_some: MembershipWhereInput
  referredMembers_every: MembershipWhereInput
  referredBy: MembershipWhereInput
  roles_none: WorkerWhereInput
  roles_some: WorkerWhereInput
  roles_every: WorkerWhereInput
  whitelistedIn_none: ProposalDiscussionWhitelistWhereInput
  whitelistedIn_some: ProposalDiscussionWhitelistWhereInput
  whitelistedIn_every: ProposalDiscussionWhitelistWhereInput
  forumpostauthor_none: ForumPostWhereInput
  forumpostauthor_some: ForumPostWhereInput
  forumpostauthor_every: ForumPostWhereInput
  forumpostreactionmember_none: ForumPostReactionWhereInput
  forumpostreactionmember_some: ForumPostReactionWhereInput
  forumpostreactionmember_every: ForumPostReactionWhereInput
  forumthreadauthor_none: ForumThreadWhereInput
  forumthreadauthor_some: ForumThreadWhereInput
  forumthreadauthor_every: ForumThreadWhereInput
  invitestransferredeventsourceMember_none: InvitesTransferredEventWhereInput
  invitestransferredeventsourceMember_some: InvitesTransferredEventWhereInput
  invitestransferredeventsourceMember_every: InvitesTransferredEventWhereInput
  invitestransferredeventtargetMember_none: InvitesTransferredEventWhereInput
  invitestransferredeventtargetMember_some: InvitesTransferredEventWhereInput
  invitestransferredeventtargetMember_every: InvitesTransferredEventWhereInput
  memberaccountsupdatedeventmember_none: MemberAccountsUpdatedEventWhereInput
  memberaccountsupdatedeventmember_some: MemberAccountsUpdatedEventWhereInput
  memberaccountsupdatedeventmember_every: MemberAccountsUpdatedEventWhereInput
  memberinvitedeventinvitingMember_none: MemberInvitedEventWhereInput
  memberinvitedeventinvitingMember_some: MemberInvitedEventWhereInput
  memberinvitedeventinvitingMember_every: MemberInvitedEventWhereInput
  memberinvitedeventnewMember_none: MemberInvitedEventWhereInput
  memberinvitedeventnewMember_some: MemberInvitedEventWhereInput
  memberinvitedeventnewMember_every: MemberInvitedEventWhereInput
  memberprofileupdatedeventmember_none: MemberProfileUpdatedEventWhereInput
  memberprofileupdatedeventmember_some: MemberProfileUpdatedEventWhereInput
  memberprofileupdatedeventmember_every: MemberProfileUpdatedEventWhereInput
  memberverificationstatusupdatedeventmember_none: MemberVerificationStatusUpdatedEventWhereInput
  memberverificationstatusupdatedeventmember_some: MemberVerificationStatusUpdatedEventWhereInput
  memberverificationstatusupdatedeventmember_every: MemberVerificationStatusUpdatedEventWhereInput
  membershipboughteventnewMember_none: MembershipBoughtEventWhereInput
  membershipboughteventnewMember_some: MembershipBoughtEventWhereInput
  membershipboughteventnewMember_every: MembershipBoughtEventWhereInput
  membershipboughteventreferrer_none: MembershipBoughtEventWhereInput
  membershipboughteventreferrer_some: MembershipBoughtEventWhereInput
  membershipboughteventreferrer_every: MembershipBoughtEventWhereInput
  postdeletedeventactor_none: PostDeletedEventWhereInput
  postdeletedeventactor_some: PostDeletedEventWhereInput
  postdeletedeventactor_every: PostDeletedEventWhereInput
  postreactedeventreactingMember_none: PostReactedEventWhereInput
  postreactedeventreactingMember_some: PostReactedEventWhereInput
  postreactedeventreactingMember_every: PostReactedEventWhereInput
  proposalcreator_none: ProposalWhereInput
  proposalcreator_some: ProposalWhereInput
  proposalcreator_every: ProposalWhereInput
  proposaldiscussionpostauthor_none: ProposalDiscussionPostWhereInput
  proposaldiscussionpostauthor_some: ProposalDiscussionPostWhereInput
  proposaldiscussionpostauthor_every: ProposalDiscussionPostWhereInput
  proposaldiscussionpostdeletedeventactor_none: ProposalDiscussionPostDeletedEventWhereInput
  proposaldiscussionpostdeletedeventactor_some: ProposalDiscussionPostDeletedEventWhereInput
  proposaldiscussionpostdeletedeventactor_every: ProposalDiscussionPostDeletedEventWhereInput
  proposaldiscussionthreadmodechangedeventactor_none: ProposalDiscussionThreadModeChangedEventWhereInput
  proposaldiscussionthreadmodechangedeventactor_some: ProposalDiscussionThreadModeChangedEventWhereInput
  proposaldiscussionthreadmodechangedeventactor_every: ProposalDiscussionThreadModeChangedEventWhereInput
  proposalvotedeventvoter_none: ProposalVotedEventWhereInput
  proposalvotedeventvoter_some: ProposalVotedEventWhereInput
  proposalvotedeventvoter_every: ProposalVotedEventWhereInput
  stakingaccountaddedeventmember_none: StakingAccountAddedEventWhereInput
  stakingaccountaddedeventmember_some: StakingAccountAddedEventWhereInput
  stakingaccountaddedeventmember_every: StakingAccountAddedEventWhereInput
  stakingaccountconfirmedeventmember_none: StakingAccountConfirmedEventWhereInput
  stakingaccountconfirmedeventmember_some: StakingAccountConfirmedEventWhereInput
  stakingaccountconfirmedeventmember_every: StakingAccountConfirmedEventWhereInput
  stakingaccountremovedeventmember_none: StakingAccountRemovedEventWhereInput
  stakingaccountremovedeventmember_some: StakingAccountRemovedEventWhereInput
  stakingaccountremovedeventmember_every: StakingAccountRemovedEventWhereInput
  voteonpolleventvotingMember_none: VoteOnPollEventWhereInput
  voteonpolleventvotingMember_some: VoteOnPollEventWhereInput
  voteonpolleventvotingMember_every: VoteOnPollEventWhereInput
  workinggroupapplicationapplicant_none: WorkingGroupApplicationWhereInput
  workinggroupapplicationapplicant_some: WorkingGroupApplicationWhereInput
  workinggroupapplicationapplicant_every: WorkingGroupApplicationWhereInput
  AND: [MembershipWhereInput!]
  OR: [MembershipWhereInput!]
}

input MembershipWhereUniqueInput {
  id: ID
  handle: String
}

type MemberVerificationStatusUpdatedEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  member: Membership!
  memberId: String!
  worker: Worker!
  workerId: String!
  isVerified: Boolean!
}

type MemberVerificationStatusUpdatedEventConnection {
  totalCount: Int!
  edges: [MemberVerificationStatusUpdatedEventEdge!]!
  pageInfo: PageInfo!
}

input MemberVerificationStatusUpdatedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  member: ID!
  worker: ID!
  isVerified: Boolean!
}

type MemberVerificationStatusUpdatedEventEdge {
  node: MemberVerificationStatusUpdatedEvent!
  cursor: String!
}

enum MemberVerificationStatusUpdatedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  member_ASC
  member_DESC
  worker_ASC
  worker_DESC
  isVerified_ASC
  isVerified_DESC
}

input MemberVerificationStatusUpdatedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  member: ID
  worker: ID
  isVerified: Boolean
}

input MemberVerificationStatusUpdatedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  member_eq: ID
  member_in: [ID!]
  worker_eq: ID
  worker_in: [ID!]
  isVerified_eq: Boolean
  isVerified_in: [Boolean!]
  member: MembershipWhereInput
  worker: WorkerWhereInput
  AND: [MemberVerificationStatusUpdatedEventWhereInput!]
  OR: [MemberVerificationStatusUpdatedEventWhereInput!]
}

input MemberVerificationStatusUpdatedEventWhereUniqueInput {
  id: ID!
}

enum Network {
  BABYLON
  ALEXANDRIA
  ROME
  OLYMPIA
}

type NewMissedRewardLevelReachedEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  group: WorkingGroup!
  groupId: String!
  worker: Worker!
  workerId: String!
  newMissedRewardAmount: BigInt!
}

type NewMissedRewardLevelReachedEventConnection {
  totalCount: Int!
  edges: [NewMissedRewardLevelReachedEventEdge!]!
  pageInfo: PageInfo!
}

input NewMissedRewardLevelReachedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  group: ID!
  worker: ID!
  newMissedRewardAmount: BigInt!
}

type NewMissedRewardLevelReachedEventEdge {
  node: NewMissedRewardLevelReachedEvent!
  cursor: String!
}

enum NewMissedRewardLevelReachedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  group_ASC
  group_DESC
  worker_ASC
  worker_DESC
  newMissedRewardAmount_ASC
  newMissedRewardAmount_DESC
}

input NewMissedRewardLevelReachedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  group: ID
  worker: ID
  newMissedRewardAmount: BigInt
}

input NewMissedRewardLevelReachedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  group_eq: ID
  group_in: [ID!]
  worker_eq: ID
  worker_in: [ID!]
  newMissedRewardAmount_eq: BigInt
  newMissedRewardAmount_gt: BigInt
  newMissedRewardAmount_gte: BigInt
  newMissedRewardAmount_lt: BigInt
  newMissedRewardAmount_lte: BigInt
  newMissedRewardAmount_in: [BigInt!]
  group: WorkingGroupWhereInput
  worker: WorkerWhereInput
  AND: [NewMissedRewardLevelReachedEventWhereInput!]
  OR: [NewMissedRewardLevelReachedEventWhereInput!]
}

input NewMissedRewardLevelReachedEventWhereUniqueInput {
  id: ID!
}

type OpeningAddedEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  group: WorkingGroup!
  groupId: String!
  opening: WorkingGroupOpening!
  openingId: String!
}

type OpeningAddedEventConnection {
  totalCount: Int!
  edges: [OpeningAddedEventEdge!]!
  pageInfo: PageInfo!
}

input OpeningAddedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  group: ID!
  opening: ID!
}

type OpeningAddedEventEdge {
  node: OpeningAddedEvent!
  cursor: String!
}

enum OpeningAddedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  group_ASC
  group_DESC
  opening_ASC
  opening_DESC
}

input OpeningAddedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  group: ID
  opening: ID
}

input OpeningAddedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  group_eq: ID
  group_in: [ID!]
  opening_eq: ID
  opening_in: [ID!]
  group: WorkingGroupWhereInput
  opening: WorkingGroupOpeningWhereInput
  AND: [OpeningAddedEventWhereInput!]
  OR: [OpeningAddedEventWhereInput!]
}

input OpeningAddedEventWhereUniqueInput {
  id: ID!
}

type OpeningCanceledEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  group: WorkingGroup!
  groupId: String!
  opening: WorkingGroupOpening!
  openingId: String!
}

type OpeningCanceledEventConnection {
  totalCount: Int!
  edges: [OpeningCanceledEventEdge!]!
  pageInfo: PageInfo!
}

input OpeningCanceledEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  group: ID!
  opening: ID!
}

type OpeningCanceledEventEdge {
  node: OpeningCanceledEvent!
  cursor: String!
}

enum OpeningCanceledEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  group_ASC
  group_DESC
  opening_ASC
  opening_DESC
}

input OpeningCanceledEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  group: ID
  opening: ID
}

input OpeningCanceledEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  group_eq: ID
  group_in: [ID!]
  opening_eq: ID
  opening_in: [ID!]
  group: WorkingGroupWhereInput
  opening: WorkingGroupOpeningWhereInput
  AND: [OpeningCanceledEventWhereInput!]
  OR: [OpeningCanceledEventWhereInput!]
}

input OpeningCanceledEventWhereUniqueInput {
  id: ID!
}

type OpeningFilledEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  group: WorkingGroup!
  groupId: String!
  opening: WorkingGroupOpening!
  openingId: String!
  workersHired: [Worker!]!
}

type OpeningFilledEventConnection {
  totalCount: Int!
  edges: [OpeningFilledEventEdge!]!
  pageInfo: PageInfo!
}

input OpeningFilledEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  group: ID!
  opening: ID!
}

type OpeningFilledEventEdge {
  node: OpeningFilledEvent!
  cursor: String!
}

enum OpeningFilledEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  group_ASC
  group_DESC
  opening_ASC
  opening_DESC
}

input OpeningFilledEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  group: ID
  opening: ID
}

input OpeningFilledEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  group_eq: ID
  group_in: [ID!]
  opening_eq: ID
  opening_in: [ID!]
  group: WorkingGroupWhereInput
  opening: WorkingGroupOpeningWhereInput
  workersHired_none: WorkerWhereInput
  workersHired_some: WorkerWhereInput
  workersHired_every: WorkerWhereInput
  AND: [OpeningFilledEventWhereInput!]
  OR: [OpeningFilledEventWhereInput!]
}

input OpeningFilledEventWhereUniqueInput {
  id: ID!
}

type OpeningStatusCancelled {
  openingCanceledEvent: OpeningCanceledEvent
}

type OpeningStatusFilled {
  openingFilledEvent: OpeningFilledEvent
}

type OpeningStatusOpen {
  phantom: Int
}

input OpeningStatusOpenCreateInput {
  phantom: Float
}

input OpeningStatusOpenUpdateInput {
  phantom: Float
}

input OpeningStatusOpenWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  phantom_eq: Int
  phantom_gt: Int
  phantom_gte: Int
  phantom_lt: Int
  phantom_lte: Int
  phantom_in: [Int!]
  AND: [OpeningStatusOpenWhereInput!]
  OR: [OpeningStatusOpenWhereInput!]
}

input OpeningStatusOpenWhereUniqueInput {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PostAddedEvent implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  post: ForumPost!
  postId: String!
  isEditable: Boolean
  text: String!
}

type PostAddedEventConnection {
  totalCount: Int!
  edges: [PostAddedEventEdge!]!
  pageInfo: PageInfo!
}

input PostAddedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  post: ID!
  isEditable: Boolean
  text: String!
}

type PostAddedEventEdge {
  node: PostAddedEvent!
  cursor: String!
}

enum PostAddedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  post_ASC
  post_DESC
  isEditable_ASC
  isEditable_DESC
  text_ASC
  text_DESC
}

input PostAddedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  post: ID
  isEditable: Boolean
  text: String
}

input PostAddedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  post_eq: ID
  post_in: [ID!]
  isEditable_eq: Boolean
  isEditable_in: [Boolean!]
  text_eq: String
  text_contains: String
  text_startsWith: String
  text_endsWith: String
  text_in: [String!]
  post: ForumPostWhereInput
  AND: [PostAddedEventWhereInput!]
  OR: [PostAddedEventWhereInput!]
}

input PostAddedEventWhereUniqueInput {
  id: ID!
}

type PostDeletedEvent implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  posts: [ForumPost!]!
  actor: Membership!
  actorId: String!
  rationale: String!
}

type PostDeletedEventConnection {
  totalCount: Int!
  edges: [PostDeletedEventEdge!]!
  pageInfo: PageInfo!
}

input PostDeletedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  actor: ID!
  rationale: String!
}

type PostDeletedEventEdge {
  node: PostDeletedEvent!
  cursor: String!
}

enum PostDeletedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  actor_ASC
  actor_DESC
  rationale_ASC
  rationale_DESC
}

input PostDeletedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  actor: ID
  rationale: String
}

input PostDeletedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  actor_eq: ID
  actor_in: [ID!]
  rationale_eq: String
  rationale_contains: String
  rationale_startsWith: String
  rationale_endsWith: String
  rationale_in: [String!]
  posts_none: ForumPostWhereInput
  posts_some: ForumPostWhereInput
  posts_every: ForumPostWhereInput
  actor: MembershipWhereInput
  AND: [PostDeletedEventWhereInput!]
  OR: [PostDeletedEventWhereInput!]
}

input PostDeletedEventWhereUniqueInput {
  id: ID!
}

type PostModeratedEvent implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  post: ForumPost!
  postId: String!
  rationale: String!
  actor: Worker!
  actorId: String!
}

type PostModeratedEventConnection {
  totalCount: Int!
  edges: [PostModeratedEventEdge!]!
  pageInfo: PageInfo!
}

input PostModeratedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  post: ID!
  rationale: String!
  actor: ID!
}

type PostModeratedEventEdge {
  node: PostModeratedEvent!
  cursor: String!
}

enum PostModeratedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  post_ASC
  post_DESC
  rationale_ASC
  rationale_DESC
  actor_ASC
  actor_DESC
}

input PostModeratedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  post: ID
  rationale: String
  actor: ID
}

input PostModeratedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  post_eq: ID
  post_in: [ID!]
  rationale_eq: String
  rationale_contains: String
  rationale_startsWith: String
  rationale_endsWith: String
  rationale_in: [String!]
  actor_eq: ID
  actor_in: [ID!]
  post: ForumPostWhereInput
  actor: WorkerWhereInput
  AND: [PostModeratedEventWhereInput!]
  OR: [PostModeratedEventWhereInput!]
}

input PostModeratedEventWhereUniqueInput {
  id: ID!
}

union PostOrigin = PostOriginThreadInitial | PostOriginThreadReply
type PostOriginThreadInitial {
  threadCreatedEvent: ThreadCreatedEvent
}

type PostOriginThreadReply {
  postAddedEvent: PostAddedEvent
}

type PostReactedEvent implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  post: ForumPost!
  postId: String!
  reactionResult: PostReactionResult!
  reactingMember: Membership!
  reactingMemberId: String!
}

type PostReactedEventConnection {
  totalCount: Int!
  edges: [PostReactedEventEdge!]!
  pageInfo: PageInfo!
}

input PostReactedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  post: ID!
  reactionResult: JSONObject!
  reactingMember: ID!
}

type PostReactedEventEdge {
  node: PostReactedEvent!
  cursor: String!
}

enum PostReactedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  post_ASC
  post_DESC
  reactingMember_ASC
  reactingMember_DESC
}

input PostReactedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  post: ID
  reactionResult: JSONObject
  reactingMember: ID
}

input PostReactedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  post_eq: ID
  post_in: [ID!]
  reactionResult_json: JSONObject
  reactingMember_eq: ID
  reactingMember_in: [ID!]
  post: ForumPostWhereInput
  reactingMember: MembershipWhereInput
  AND: [PostReactedEventWhereInput!]
  OR: [PostReactedEventWhereInput!]
}

input PostReactedEventWhereUniqueInput {
  id: ID!
}

enum PostReaction {
  LIKE
}

union PostReactionResult =
  PostReactionResultCancel
  | PostReactionResultValid
  | PostReactionResultInvalid
type PostReactionResultCancel {
  phantom: Int
}

input PostReactionResultCancelCreateInput {
  phantom: Float
}

input PostReactionResultCancelUpdateInput {
  phantom: Float
}

input PostReactionResultCancelWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  phantom_eq: Int
  phantom_gt: Int
  phantom_gte: Int
  phantom_lt: Int
  phantom_lte: Int
  phantom_in: [Int!]
  AND: [PostReactionResultCancelWhereInput!]
  OR: [PostReactionResultCancelWhereInput!]
}

input PostReactionResultCancelWhereUniqueInput {
  id: ID!
}

type PostReactionResultInvalid {
  reactionId: Int!
}

input PostReactionResultInvalidCreateInput {
  reactionId: Float!
}

input PostReactionResultInvalidUpdateInput {
  reactionId: Float
}

input PostReactionResultInvalidWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  reactionId_eq: Int
  reactionId_gt: Int
  reactionId_gte: Int
  reactionId_lt: Int
  reactionId_lte: Int
  reactionId_in: [Int!]
  AND: [PostReactionResultInvalidWhereInput!]
  OR: [PostReactionResultInvalidWhereInput!]
}

input PostReactionResultInvalidWhereUniqueInput {
  id: ID!
}

type PostReactionResultValid {
  reaction: PostReaction!
  reactionId: Int!
}

input PostReactionResultValidCreateInput {
  reaction: PostReaction!
  reactionId: Float!
}

input PostReactionResultValidUpdateInput {
  reaction: PostReaction
  reactionId: Float
}

input PostReactionResultValidWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  reaction_eq: PostReaction
  reaction_in: [PostReaction!]
  reactionId_eq: Int
  reactionId_gt: Int
  reactionId_gte: Int
  reactionId_lt: Int
  reactionId_lte: Int
  reactionId_in: [Int!]
  AND: [PostReactionResultValidWhereInput!]
  OR: [PostReactionResultValidWhereInput!]
}

input PostReactionResultValidWhereUniqueInput {
  id: ID!
}

type PostsByTextFTSOutput {
  item: PostsByTextSearchResult!
  rank: Float!
  isTypeOf: String!
  highlight: String!
}

union PostsByTextSearchResult = ForumPost
union PostStatus =
  PostStatusActive
  | PostStatusLocked
  | PostStatusModerated
  | PostStatusRemoved
type PostStatusActive {
  phantom: Int
}

input PostStatusActiveCreateInput {
  phantom: Float
}

input PostStatusActiveUpdateInput {
  phantom: Float
}

input PostStatusActiveWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  phantom_eq: Int
  phantom_gt: Int
  phantom_gte: Int
  phantom_lt: Int
  phantom_lte: Int
  phantom_in: [Int!]
  AND: [PostStatusActiveWhereInput!]
  OR: [PostStatusActiveWhereInput!]
}

input PostStatusActiveWhereUniqueInput {
  id: ID!
}

type PostStatusLocked {
  postDeletedEvent: PostDeletedEvent
}

type PostStatusModerated {
  postModeratedEvent: PostModeratedEvent
}

type PostStatusRemoved {
  postDeletedEvent: PostDeletedEvent
}

type PostTextUpdatedEvent implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  post: ForumPost!
  postId: String!
  newText: String!
}

type PostTextUpdatedEventConnection {
  totalCount: Int!
  edges: [PostTextUpdatedEventEdge!]!
  pageInfo: PageInfo!
}

input PostTextUpdatedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  post: ID!
  newText: String!
}

type PostTextUpdatedEventEdge {
  node: PostTextUpdatedEvent!
  cursor: String!
}

enum PostTextUpdatedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  post_ASC
  post_DESC
  newText_ASC
  newText_DESC
}

input PostTextUpdatedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  post: ID
  newText: String
}

input PostTextUpdatedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  post_eq: ID
  post_in: [ID!]
  newText_eq: String
  newText_contains: String
  newText_startsWith: String
  newText_endsWith: String
  newText_in: [String!]
  post: ForumPostWhereInput
  AND: [PostTextUpdatedEventWhereInput!]
  OR: [PostTextUpdatedEventWhereInput!]
}

input PostTextUpdatedEventWhereUniqueInput {
  id: ID!
}

type ProcessorState {
  lastCompleteBlock: Float!
  lastProcessedEvent: String!
  indexerHead: Float!
  chainHead: Float!
}

type Proposal implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  title: String!
  description: String!
  details: ProposalDetails!
  stakingAccount: String
  creator: Membership!
  creatorId: String!
  createdInEvent: ProposalCreatedEvent!
  exactExecutionBlock: Int
  discussionThread: ProposalDiscussionThread!
  councilApprovals: Int!
  proposalStatusUpdates: [ProposalStatusUpdatedEvent!]!
  votes: [ProposalVotedEvent!]!
  status: ProposalStatus!
  statusSetAtBlock: Int!
  statusSetAtTime: DateTime!
  proposalcancelledeventproposal: [ProposalCancelledEvent!]
  proposaldecisionmadeeventproposal: [ProposalDecisionMadeEvent!]
  proposalexecutedeventproposal: [ProposalExecutedEvent!]
}

type ProposalCancelledEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  proposal: Proposal!
  proposalId: String!
}

type ProposalCancelledEventConnection {
  totalCount: Int!
  edges: [ProposalCancelledEventEdge!]!
  pageInfo: PageInfo!
}

input ProposalCancelledEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  proposal: ID!
}

type ProposalCancelledEventEdge {
  node: ProposalCancelledEvent!
  cursor: String!
}

enum ProposalCancelledEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  proposal_ASC
  proposal_DESC
}

input ProposalCancelledEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  proposal: ID
}

input ProposalCancelledEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  proposal_eq: ID
  proposal_in: [ID!]
  proposal: ProposalWhereInput
  AND: [ProposalCancelledEventWhereInput!]
  OR: [ProposalCancelledEventWhereInput!]
}

input ProposalCancelledEventWhereUniqueInput {
  id: ID!
}

type ProposalConnection {
  totalCount: Int!
  edges: [ProposalEdge!]!
  pageInfo: PageInfo!
}

type ProposalCreatedEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  proposal: Proposal!
  proposalId: String!
}

type ProposalCreatedEventConnection {
  totalCount: Int!
  edges: [ProposalCreatedEventEdge!]!
  pageInfo: PageInfo!
}

input ProposalCreatedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  proposal: ID!
}

type ProposalCreatedEventEdge {
  node: ProposalCreatedEvent!
  cursor: String!
}

enum ProposalCreatedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  proposal_ASC
  proposal_DESC
}

input ProposalCreatedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  proposal: ID
}

input ProposalCreatedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  proposal_eq: ID
  proposal_in: [ID!]
  proposal: ProposalWhereInput
  AND: [ProposalCreatedEventWhereInput!]
  OR: [ProposalCreatedEventWhereInput!]
}

input ProposalCreatedEventWhereUniqueInput {
  id: ID!
}

input ProposalCreateInput {
  title: String!
  description: String!
  details: JSONObject!
  stakingAccount: String
  creator: ID!
  exactExecutionBlock: Float
  councilApprovals: Float!
  status: JSONObject!
  statusSetAtBlock: Float!
  statusSetAtTime: DateTime!
}

type ProposalDecisionMadeEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  proposal: Proposal!
  proposalId: String!
  decisionStatus: ProposalDecisionStatus!
}

type ProposalDecisionMadeEventConnection {
  totalCount: Int!
  edges: [ProposalDecisionMadeEventEdge!]!
  pageInfo: PageInfo!
}

input ProposalDecisionMadeEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  proposal: ID!
  decisionStatus: JSONObject!
}

type ProposalDecisionMadeEventEdge {
  node: ProposalDecisionMadeEvent!
  cursor: String!
}

enum ProposalDecisionMadeEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  proposal_ASC
  proposal_DESC
}

input ProposalDecisionMadeEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  proposal: ID
  decisionStatus: JSONObject
}

input ProposalDecisionMadeEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  proposal_eq: ID
  proposal_in: [ID!]
  decisionStatus_json: JSONObject
  proposal: ProposalWhereInput
  AND: [ProposalDecisionMadeEventWhereInput!]
  OR: [ProposalDecisionMadeEventWhereInput!]
}

input ProposalDecisionMadeEventWhereUniqueInput {
  id: ID!
}

union ProposalDecisionStatus =
  ProposalStatusDormant
  | ProposalStatusGracing
  | ProposalStatusVetoed
  | ProposalStatusSlashed
  | ProposalStatusRejected
  | ProposalStatusExpired
  | ProposalStatusCancelled
  | ProposalStatusCanceledByRuntime
union ProposalDetails =
  SignalProposalDetails
  | RuntimeUpgradeProposalDetails
  | FundingRequestProposalDetails
  | SetMaxValidatorCountProposalDetails
  | CreateWorkingGroupLeadOpeningProposalDetails
  | FillWorkingGroupLeadOpeningProposalDetails
  | UpdateWorkingGroupBudgetProposalDetails
  | DecreaseWorkingGroupLeadStakeProposalDetails
  | SlashWorkingGroupLeadProposalDetails
  | SetWorkingGroupLeadRewardProposalDetails
  | TerminateWorkingGroupLeadProposalDetails
  | AmendConstitutionProposalDetails
  | CancelWorkingGroupLeadOpeningProposalDetails
  | SetMembershipPriceProposalDetails
  | SetCouncilBudgetIncrementProposalDetails
  | SetCouncilorRewardProposalDetails
  | SetInitialInvitationBalanceProposalDetails
  | SetInitialInvitationCountProposalDetails
  | SetMembershipLeadInvitationQuotaProposalDetails
  | SetReferralCutProposalDetails
  | CreateBlogPostProposalDetails
  | EditBlogPostProposalDetails
  | LockBlogPostProposalDetails
  | UnlockBlogPostProposalDetails
  | VetoProposalDetails
type ProposalDiscussionPost implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  author: Membership!
  authorId: String!
  status: ProposalDiscussionPostStatus!
  text: String!
  repliesTo: ProposalDiscussionPost
  repliesToId: String
  updates: [ProposalDiscussionPostUpdatedEvent!]!
  createdInEvent: ProposalDiscussionPostCreatedEvent!
  proposaldiscussionpostrepliesTo: [ProposalDiscussionPost!]
  proposaldiscussionpostdeletedeventpost: [ProposalDiscussionPostDeletedEvent!]
}

type ProposalDiscussionPostConnection {
  totalCount: Int!
  edges: [ProposalDiscussionPostEdge!]!
  pageInfo: PageInfo!
}

type ProposalDiscussionPostCreatedEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  post: ProposalDiscussionPost!
  postId: String!
  text: String!
}

type ProposalDiscussionPostCreatedEventConnection {
  totalCount: Int!
  edges: [ProposalDiscussionPostCreatedEventEdge!]!
  pageInfo: PageInfo!
}

input ProposalDiscussionPostCreatedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  post: ID!
  text: String!
}

type ProposalDiscussionPostCreatedEventEdge {
  node: ProposalDiscussionPostCreatedEvent!
  cursor: String!
}

enum ProposalDiscussionPostCreatedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  post_ASC
  post_DESC
  text_ASC
  text_DESC
}

input ProposalDiscussionPostCreatedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  post: ID
  text: String
}

input ProposalDiscussionPostCreatedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  post_eq: ID
  post_in: [ID!]
  text_eq: String
  text_contains: String
  text_startsWith: String
  text_endsWith: String
  text_in: [String!]
  post: ProposalDiscussionPostWhereInput
  AND: [ProposalDiscussionPostCreatedEventWhereInput!]
  OR: [ProposalDiscussionPostCreatedEventWhereInput!]
}

input ProposalDiscussionPostCreatedEventWhereUniqueInput {
  id: ID!
}

input ProposalDiscussionPostCreateInput {
  author: ID!
  status: JSONObject!
  text: String!
  repliesTo: ID
}

type ProposalDiscussionPostDeletedEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  post: ProposalDiscussionPost!
  postId: String!
  actor: Membership!
  actorId: String!
}

type ProposalDiscussionPostDeletedEventConnection {
  totalCount: Int!
  edges: [ProposalDiscussionPostDeletedEventEdge!]!
  pageInfo: PageInfo!
}

input ProposalDiscussionPostDeletedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  post: ID!
  actor: ID!
}

type ProposalDiscussionPostDeletedEventEdge {
  node: ProposalDiscussionPostDeletedEvent!
  cursor: String!
}

enum ProposalDiscussionPostDeletedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  post_ASC
  post_DESC
  actor_ASC
  actor_DESC
}

input ProposalDiscussionPostDeletedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  post: ID
  actor: ID
}

input ProposalDiscussionPostDeletedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  post_eq: ID
  post_in: [ID!]
  actor_eq: ID
  actor_in: [ID!]
  post: ProposalDiscussionPostWhereInput
  actor: MembershipWhereInput
  AND: [ProposalDiscussionPostDeletedEventWhereInput!]
  OR: [ProposalDiscussionPostDeletedEventWhereInput!]
}

input ProposalDiscussionPostDeletedEventWhereUniqueInput {
  id: ID!
}

type ProposalDiscussionPostEdge {
  node: ProposalDiscussionPost!
  cursor: String!
}

enum ProposalDiscussionPostOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  author_ASC
  author_DESC
  text_ASC
  text_DESC
  repliesTo_ASC
  repliesTo_DESC
}

union ProposalDiscussionPostStatus =
  ProposalDiscussionPostStatusActive
  | ProposalDiscussionPostStatusLocked
  | ProposalDiscussionPostStatusRemoved
type ProposalDiscussionPostStatusActive {
  phantom: Int
}

input ProposalDiscussionPostStatusActiveCreateInput {
  phantom: Float
}

input ProposalDiscussionPostStatusActiveUpdateInput {
  phantom: Float
}

input ProposalDiscussionPostStatusActiveWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  phantom_eq: Int
  phantom_gt: Int
  phantom_gte: Int
  phantom_lt: Int
  phantom_lte: Int
  phantom_in: [Int!]
  AND: [ProposalDiscussionPostStatusActiveWhereInput!]
  OR: [ProposalDiscussionPostStatusActiveWhereInput!]
}

input ProposalDiscussionPostStatusActiveWhereUniqueInput {
  id: ID!
}

type ProposalDiscussionPostStatusLocked {
  deletedInEvent: ProposalDiscussionPostDeletedEvent
}

type ProposalDiscussionPostStatusRemoved {
  deletedInEvent: ProposalDiscussionPostDeletedEvent
}

type ProposalDiscussionPostUpdatedEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  post: ProposalDiscussionPost!
  postId: String!
  text: String!
}

type ProposalDiscussionPostUpdatedEventConnection {
  totalCount: Int!
  edges: [ProposalDiscussionPostUpdatedEventEdge!]!
  pageInfo: PageInfo!
}

input ProposalDiscussionPostUpdatedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  post: ID!
  text: String!
}

type ProposalDiscussionPostUpdatedEventEdge {
  node: ProposalDiscussionPostUpdatedEvent!
  cursor: String!
}

enum ProposalDiscussionPostUpdatedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  post_ASC
  post_DESC
  text_ASC
  text_DESC
}

input ProposalDiscussionPostUpdatedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  post: ID
  text: String
}

input ProposalDiscussionPostUpdatedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  post_eq: ID
  post_in: [ID!]
  text_eq: String
  text_contains: String
  text_startsWith: String
  text_endsWith: String
  text_in: [String!]
  post: ProposalDiscussionPostWhereInput
  AND: [ProposalDiscussionPostUpdatedEventWhereInput!]
  OR: [ProposalDiscussionPostUpdatedEventWhereInput!]
}

input ProposalDiscussionPostUpdatedEventWhereUniqueInput {
  id: ID!
}

input ProposalDiscussionPostUpdateInput {
  author: ID
  status: JSONObject
  text: String
  repliesTo: ID
}

input ProposalDiscussionPostWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  author_eq: ID
  author_in: [ID!]
  status_json: JSONObject
  text_eq: String
  text_contains: String
  text_startsWith: String
  text_endsWith: String
  text_in: [String!]
  repliesTo_eq: ID
  repliesTo_in: [ID!]
  author: MembershipWhereInput
  repliesTo: ProposalDiscussionPostWhereInput
  updates_none: ProposalDiscussionPostUpdatedEventWhereInput
  updates_some: ProposalDiscussionPostUpdatedEventWhereInput
  updates_every: ProposalDiscussionPostUpdatedEventWhereInput
  createdInEvent: ProposalDiscussionPostCreatedEventWhereInput
  proposaldiscussionpostrepliesTo_none: ProposalDiscussionPostWhereInput
  proposaldiscussionpostrepliesTo_some: ProposalDiscussionPostWhereInput
  proposaldiscussionpostrepliesTo_every: ProposalDiscussionPostWhereInput
  proposaldiscussionpostdeletedeventpost_none: ProposalDiscussionPostDeletedEventWhereInput
  proposaldiscussionpostdeletedeventpost_some: ProposalDiscussionPostDeletedEventWhereInput
  proposaldiscussionpostdeletedeventpost_every: ProposalDiscussionPostDeletedEventWhereInput
  AND: [ProposalDiscussionPostWhereInput!]
  OR: [ProposalDiscussionPostWhereInput!]
}

input ProposalDiscussionPostWhereUniqueInput {
  id: ID!
}

type ProposalDiscussionThread implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  proposal: Proposal!
  proposalId: String!
  mode: ProposalDiscussionThreadMode!
  proposaldiscussionthreadcreatedeventthread: [ProposalDiscussionThreadCreatedEvent!]
  proposaldiscussionthreadmodechangedeventthread: [ProposalDiscussionThreadModeChangedEvent!]
}

type ProposalDiscussionThreadConnection {
  totalCount: Int!
  edges: [ProposalDiscussionThreadEdge!]!
  pageInfo: PageInfo!
}

type ProposalDiscussionThreadCreatedEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  thread: ProposalDiscussionThread!
  threadId: String!
}

type ProposalDiscussionThreadCreatedEventConnection {
  totalCount: Int!
  edges: [ProposalDiscussionThreadCreatedEventEdge!]!
  pageInfo: PageInfo!
}

input ProposalDiscussionThreadCreatedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  thread: ID!
}

type ProposalDiscussionThreadCreatedEventEdge {
  node: ProposalDiscussionThreadCreatedEvent!
  cursor: String!
}

enum ProposalDiscussionThreadCreatedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  thread_ASC
  thread_DESC
}

input ProposalDiscussionThreadCreatedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  thread: ID
}

input ProposalDiscussionThreadCreatedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  thread_eq: ID
  thread_in: [ID!]
  thread: ProposalDiscussionThreadWhereInput
  AND: [ProposalDiscussionThreadCreatedEventWhereInput!]
  OR: [ProposalDiscussionThreadCreatedEventWhereInput!]
}

input ProposalDiscussionThreadCreatedEventWhereUniqueInput {
  id: ID!
}

input ProposalDiscussionThreadCreateInput {
  proposal: ID!
  mode: JSONObject!
}

type ProposalDiscussionThreadEdge {
  node: ProposalDiscussionThread!
  cursor: String!
}

union ProposalDiscussionThreadMode =
  ProposalDiscussionThreadModeOpen
  | ProposalDiscussionThreadModeClosed
type ProposalDiscussionThreadModeChangedEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  thread: ProposalDiscussionThread!
  threadId: String!
  newMode: ProposalDiscussionThreadMode!
  actor: Membership!
  actorId: String!
}

type ProposalDiscussionThreadModeChangedEventConnection {
  totalCount: Int!
  edges: [ProposalDiscussionThreadModeChangedEventEdge!]!
  pageInfo: PageInfo!
}

input ProposalDiscussionThreadModeChangedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  thread: ID!
  newMode: JSONObject!
  actor: ID!
}

type ProposalDiscussionThreadModeChangedEventEdge {
  node: ProposalDiscussionThreadModeChangedEvent!
  cursor: String!
}

enum ProposalDiscussionThreadModeChangedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  thread_ASC
  thread_DESC
  actor_ASC
  actor_DESC
}

input ProposalDiscussionThreadModeChangedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  thread: ID
  newMode: JSONObject
  actor: ID
}

input ProposalDiscussionThreadModeChangedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  thread_eq: ID
  thread_in: [ID!]
  newMode_json: JSONObject
  actor_eq: ID
  actor_in: [ID!]
  thread: ProposalDiscussionThreadWhereInput
  actor: MembershipWhereInput
  AND: [ProposalDiscussionThreadModeChangedEventWhereInput!]
  OR: [ProposalDiscussionThreadModeChangedEventWhereInput!]
}

input ProposalDiscussionThreadModeChangedEventWhereUniqueInput {
  id: ID!
}

type ProposalDiscussionThreadModeClosed {
  whitelist: ProposalDiscussionWhitelist
}

type ProposalDiscussionThreadModeOpen {
  phantom: Int
}

input ProposalDiscussionThreadModeOpenCreateInput {
  phantom: Float
}

input ProposalDiscussionThreadModeOpenUpdateInput {
  phantom: Float
}

input ProposalDiscussionThreadModeOpenWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  phantom_eq: Int
  phantom_gt: Int
  phantom_gte: Int
  phantom_lt: Int
  phantom_lte: Int
  phantom_in: [Int!]
  AND: [ProposalDiscussionThreadModeOpenWhereInput!]
  OR: [ProposalDiscussionThreadModeOpenWhereInput!]
}

input ProposalDiscussionThreadModeOpenWhereUniqueInput {
  id: ID!
}

enum ProposalDiscussionThreadOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  proposal_ASC
  proposal_DESC
}

input ProposalDiscussionThreadUpdateInput {
  proposal: ID
  mode: JSONObject
}

input ProposalDiscussionThreadWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  proposal_eq: ID
  proposal_in: [ID!]
  mode_json: JSONObject
  proposal: ProposalWhereInput
  proposaldiscussionthreadcreatedeventthread_none: ProposalDiscussionThreadCreatedEventWhereInput
  proposaldiscussionthreadcreatedeventthread_some: ProposalDiscussionThreadCreatedEventWhereInput
  proposaldiscussionthreadcreatedeventthread_every: ProposalDiscussionThreadCreatedEventWhereInput
  proposaldiscussionthreadmodechangedeventthread_none: ProposalDiscussionThreadModeChangedEventWhereInput
  proposaldiscussionthreadmodechangedeventthread_some: ProposalDiscussionThreadModeChangedEventWhereInput
  proposaldiscussionthreadmodechangedeventthread_every: ProposalDiscussionThreadModeChangedEventWhereInput
  AND: [ProposalDiscussionThreadWhereInput!]
  OR: [ProposalDiscussionThreadWhereInput!]
}

input ProposalDiscussionThreadWhereUniqueInput {
  id: ID!
}

type ProposalDiscussionWhitelist implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  phantom: Int
  members: [Membership!]!
}

type ProposalDiscussionWhitelistConnection {
  totalCount: Int!
  edges: [ProposalDiscussionWhitelistEdge!]!
  pageInfo: PageInfo!
}

input ProposalDiscussionWhitelistCreateInput {
  phantom: Float
}

type ProposalDiscussionWhitelistEdge {
  node: ProposalDiscussionWhitelist!
  cursor: String!
}

enum ProposalDiscussionWhitelistOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  phantom_ASC
  phantom_DESC
}

input ProposalDiscussionWhitelistUpdateInput {
  phantom: Float
}

input ProposalDiscussionWhitelistWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  phantom_eq: Int
  phantom_gt: Int
  phantom_gte: Int
  phantom_lt: Int
  phantom_lte: Int
  phantom_in: [Int!]
  members_none: MembershipWhereInput
  members_some: MembershipWhereInput
  members_every: MembershipWhereInput
  AND: [ProposalDiscussionWhitelistWhereInput!]
  OR: [ProposalDiscussionWhitelistWhereInput!]
}

input ProposalDiscussionWhitelistWhereUniqueInput {
  id: ID!
}

type ProposalEdge {
  node: Proposal!
  cursor: String!
}

type ProposalExecutedEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  proposal: Proposal!
  proposalId: String!
  executionStatus: ProposalExecutionStatus!
}

type ProposalExecutedEventConnection {
  totalCount: Int!
  edges: [ProposalExecutedEventEdge!]!
  pageInfo: PageInfo!
}

input ProposalExecutedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  proposal: ID!
  executionStatus: JSONObject!
}

type ProposalExecutedEventEdge {
  node: ProposalExecutedEvent!
  cursor: String!
}

enum ProposalExecutedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  proposal_ASC
  proposal_DESC
}

input ProposalExecutedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  proposal: ID
  executionStatus: JSONObject
}

input ProposalExecutedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  proposal_eq: ID
  proposal_in: [ID!]
  executionStatus_json: JSONObject
  proposal: ProposalWhereInput
  AND: [ProposalExecutedEventWhereInput!]
  OR: [ProposalExecutedEventWhereInput!]
}

input ProposalExecutedEventWhereUniqueInput {
  id: ID!
}

union ProposalExecutionStatus =
  ProposalStatusExecuted
  | ProposalStatusExecutionFailed
union ProposalIntermediateStatus =
  ProposalStatusDeciding
  | ProposalStatusGracing
  | ProposalStatusDormant
enum ProposalOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  stakingAccount_ASC
  stakingAccount_DESC
  creator_ASC
  creator_DESC
  exactExecutionBlock_ASC
  exactExecutionBlock_DESC
  councilApprovals_ASC
  councilApprovals_DESC
  statusSetAtBlock_ASC
  statusSetAtBlock_DESC
  statusSetAtTime_ASC
  statusSetAtTime_DESC
}

type ProposalsByDescriptionFTSOutput {
  item: ProposalsByDescriptionSearchResult!
  rank: Float!
  isTypeOf: String!
  highlight: String!
}

union ProposalsByDescriptionSearchResult = Proposal
type ProposalsByTitleFTSOutput {
  item: ProposalsByTitleSearchResult!
  rank: Float!
  isTypeOf: String!
  highlight: String!
}

union ProposalsByTitleSearchResult = Proposal
union ProposalStatus =
  ProposalStatusDeciding
  | ProposalStatusGracing
  | ProposalStatusDormant
  | ProposalStatusVetoed
  | ProposalStatusExecuted
  | ProposalStatusExecutionFailed
  | ProposalStatusSlashed
  | ProposalStatusRejected
  | ProposalStatusExpired
  | ProposalStatusCancelled
  | ProposalStatusCanceledByRuntime
type ProposalStatusCanceledByRuntime {
  proposalDecisionMadeEvent: ProposalDecisionMadeEvent
}

type ProposalStatusCancelled {
  cancelledInEvent: ProposalCancelledEvent
}

type ProposalStatusDeciding {
  proposalStatusUpdatedEvent: ProposalStatusUpdatedEvent
}

type ProposalStatusDormant {
  proposalStatusUpdatedEvent: ProposalStatusUpdatedEvent
}

type ProposalStatusExecuted {
  proposalExecutedEvent: ProposalExecutedEvent
}

type ProposalStatusExecutionFailed {
  proposalExecutedEvent: ProposalExecutedEvent
  errorMessage: String!
}

input ProposalStatusExecutionFailedCreateInput {
  errorMessage: String!
}

input ProposalStatusExecutionFailedUpdateInput {
  errorMessage: String
}

input ProposalStatusExecutionFailedWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  errorMessage_eq: String
  errorMessage_contains: String
  errorMessage_startsWith: String
  errorMessage_endsWith: String
  errorMessage_in: [String!]
  AND: [ProposalStatusExecutionFailedWhereInput!]
  OR: [ProposalStatusExecutionFailedWhereInput!]
}

input ProposalStatusExecutionFailedWhereUniqueInput {
  id: ID!
}

type ProposalStatusExpired {
  proposalDecisionMadeEvent: ProposalDecisionMadeEvent
}

type ProposalStatusGracing {
  proposalStatusUpdatedEvent: ProposalStatusUpdatedEvent
}

type ProposalStatusRejected {
  proposalDecisionMadeEvent: ProposalDecisionMadeEvent
}

type ProposalStatusSlashed {
  proposalDecisionMadeEvent: ProposalDecisionMadeEvent
}

type ProposalStatusUpdatedEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  proposal: Proposal!
  proposalId: String!
  newStatus: ProposalIntermediateStatus!
}

type ProposalStatusUpdatedEventConnection {
  totalCount: Int!
  edges: [ProposalStatusUpdatedEventEdge!]!
  pageInfo: PageInfo!
}

input ProposalStatusUpdatedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  proposal: ID!
  newStatus: JSONObject!
}

type ProposalStatusUpdatedEventEdge {
  node: ProposalStatusUpdatedEvent!
  cursor: String!
}

enum ProposalStatusUpdatedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  proposal_ASC
  proposal_DESC
}

input ProposalStatusUpdatedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  proposal: ID
  newStatus: JSONObject
}

input ProposalStatusUpdatedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  proposal_eq: ID
  proposal_in: [ID!]
  newStatus_json: JSONObject
  proposal: ProposalWhereInput
  AND: [ProposalStatusUpdatedEventWhereInput!]
  OR: [ProposalStatusUpdatedEventWhereInput!]
}

input ProposalStatusUpdatedEventWhereUniqueInput {
  id: ID!
}

type ProposalStatusVetoed {
  proposalDecisionMadeEvent: ProposalDecisionMadeEvent
}

input ProposalUpdateInput {
  title: String
  description: String
  details: JSONObject
  stakingAccount: String
  creator: ID
  exactExecutionBlock: Float
  councilApprovals: Float
  status: JSONObject
  statusSetAtBlock: Float
  statusSetAtTime: DateTime
}

type ProposalVotedEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  voter: Membership!
  voterId: String!
  voteKind: ProposalVoteKind!
  proposal: Proposal!
  proposalId: String!
  rationale: String!
  votingRound: Int!
}

type ProposalVotedEventConnection {
  totalCount: Int!
  edges: [ProposalVotedEventEdge!]!
  pageInfo: PageInfo!
}

input ProposalVotedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  voter: ID!
  voteKind: ProposalVoteKind!
  proposal: ID!
  rationale: String!
  votingRound: Float!
}

type ProposalVotedEventEdge {
  node: ProposalVotedEvent!
  cursor: String!
}

enum ProposalVotedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  voter_ASC
  voter_DESC
  voteKind_ASC
  voteKind_DESC
  proposal_ASC
  proposal_DESC
  rationale_ASC
  rationale_DESC
  votingRound_ASC
  votingRound_DESC
}

input ProposalVotedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  voter: ID
  voteKind: ProposalVoteKind
  proposal: ID
  rationale: String
  votingRound: Float
}

input ProposalVotedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  voter_eq: ID
  voter_in: [ID!]
  voteKind_eq: ProposalVoteKind
  voteKind_in: [ProposalVoteKind!]
  proposal_eq: ID
  proposal_in: [ID!]
  rationale_eq: String
  rationale_contains: String
  rationale_startsWith: String
  rationale_endsWith: String
  rationale_in: [String!]
  votingRound_eq: Int
  votingRound_gt: Int
  votingRound_gte: Int
  votingRound_lt: Int
  votingRound_lte: Int
  votingRound_in: [Int!]
  voter: MembershipWhereInput
  proposal: ProposalWhereInput
  AND: [ProposalVotedEventWhereInput!]
  OR: [ProposalVotedEventWhereInput!]
}

input ProposalVotedEventWhereUniqueInput {
  id: ID!
}

enum ProposalVoteKind {
  APPROVE
  REJECT
  SLASH
  ABSTAIN
}

input ProposalWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  title_eq: String
  title_contains: String
  title_startsWith: String
  title_endsWith: String
  title_in: [String!]
  description_eq: String
  description_contains: String
  description_startsWith: String
  description_endsWith: String
  description_in: [String!]
  details_json: JSONObject
  stakingAccount_eq: String
  stakingAccount_contains: String
  stakingAccount_startsWith: String
  stakingAccount_endsWith: String
  stakingAccount_in: [String!]
  creator_eq: ID
  creator_in: [ID!]
  exactExecutionBlock_eq: Int
  exactExecutionBlock_gt: Int
  exactExecutionBlock_gte: Int
  exactExecutionBlock_lt: Int
  exactExecutionBlock_lte: Int
  exactExecutionBlock_in: [Int!]
  councilApprovals_eq: Int
  councilApprovals_gt: Int
  councilApprovals_gte: Int
  councilApprovals_lt: Int
  councilApprovals_lte: Int
  councilApprovals_in: [Int!]
  status_json: JSONObject
  statusSetAtBlock_eq: Int
  statusSetAtBlock_gt: Int
  statusSetAtBlock_gte: Int
  statusSetAtBlock_lt: Int
  statusSetAtBlock_lte: Int
  statusSetAtBlock_in: [Int!]
  statusSetAtTime_eq: DateTime
  statusSetAtTime_lt: DateTime
  statusSetAtTime_lte: DateTime
  statusSetAtTime_gt: DateTime
  statusSetAtTime_gte: DateTime
  creator: MembershipWhereInput
  createdInEvent: ProposalCreatedEventWhereInput
  discussionThread: ProposalDiscussionThreadWhereInput
  proposalStatusUpdates_none: ProposalStatusUpdatedEventWhereInput
  proposalStatusUpdates_some: ProposalStatusUpdatedEventWhereInput
  proposalStatusUpdates_every: ProposalStatusUpdatedEventWhereInput
  votes_none: ProposalVotedEventWhereInput
  votes_some: ProposalVotedEventWhereInput
  votes_every: ProposalVotedEventWhereInput
  proposalcancelledeventproposal_none: ProposalCancelledEventWhereInput
  proposalcancelledeventproposal_some: ProposalCancelledEventWhereInput
  proposalcancelledeventproposal_every: ProposalCancelledEventWhereInput
  proposaldecisionmadeeventproposal_none: ProposalDecisionMadeEventWhereInput
  proposaldecisionmadeeventproposal_some: ProposalDecisionMadeEventWhereInput
  proposaldecisionmadeeventproposal_every: ProposalDecisionMadeEventWhereInput
  proposalexecutedeventproposal_none: ProposalExecutedEventWhereInput
  proposalexecutedeventproposal_some: ProposalExecutedEventWhereInput
  proposalexecutedeventproposal_every: ProposalExecutedEventWhereInput
  AND: [ProposalWhereInput!]
  OR: [ProposalWhereInput!]
}

input ProposalWhereUniqueInput {
  id: ID!
}

type Query {
  applicationFormQuestionAnswers(
    offset: Int
    limit: Int = 50
    where: ApplicationFormQuestionAnswerWhereInput
    orderBy: [ApplicationFormQuestionAnswerOrderByInput!]
  ): [ApplicationFormQuestionAnswer!]!
  applicationFormQuestionAnswerByUniqueInput(
    where: ApplicationFormQuestionAnswerWhereUniqueInput!
  ): ApplicationFormQuestionAnswer
  applicationFormQuestionAnswersConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: ApplicationFormQuestionAnswerWhereInput
    orderBy: [ApplicationFormQuestionAnswerOrderByInput!]
  ): ApplicationFormQuestionAnswerConnection!
  applicationFormQuestions(
    offset: Int
    limit: Int = 50
    where: ApplicationFormQuestionWhereInput
    orderBy: [ApplicationFormQuestionOrderByInput!]
  ): [ApplicationFormQuestion!]!
  applicationFormQuestionByUniqueInput(
    where: ApplicationFormQuestionWhereUniqueInput!
  ): ApplicationFormQuestion
  applicationFormQuestionsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: ApplicationFormQuestionWhereInput
    orderBy: [ApplicationFormQuestionOrderByInput!]
  ): ApplicationFormQuestionConnection!
  applicationWithdrawnEvents(
    offset: Int
    limit: Int = 50
    where: ApplicationWithdrawnEventWhereInput
    orderBy: [ApplicationWithdrawnEventOrderByInput!]
  ): [ApplicationWithdrawnEvent!]!
  applicationWithdrawnEventByUniqueInput(
    where: ApplicationWithdrawnEventWhereUniqueInput!
  ): ApplicationWithdrawnEvent
  applicationWithdrawnEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: ApplicationWithdrawnEventWhereInput
    orderBy: [ApplicationWithdrawnEventOrderByInput!]
  ): ApplicationWithdrawnEventConnection!
  appliedOnOpeningEvents(
    offset: Int
    limit: Int = 50
    where: AppliedOnOpeningEventWhereInput
    orderBy: [AppliedOnOpeningEventOrderByInput!]
  ): [AppliedOnOpeningEvent!]!
  appliedOnOpeningEventByUniqueInput(
    where: AppliedOnOpeningEventWhereUniqueInput!
  ): AppliedOnOpeningEvent
  appliedOnOpeningEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: AppliedOnOpeningEventWhereInput
    orderBy: [AppliedOnOpeningEventOrderByInput!]
  ): AppliedOnOpeningEventConnection!
  budgetSetEvents(
    offset: Int
    limit: Int = 50
    where: BudgetSetEventWhereInput
    orderBy: [BudgetSetEventOrderByInput!]
  ): [BudgetSetEvent!]!
  budgetSetEventByUniqueInput(
    where: BudgetSetEventWhereUniqueInput!
  ): BudgetSetEvent
  budgetSetEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: BudgetSetEventWhereInput
    orderBy: [BudgetSetEventOrderByInput!]
  ): BudgetSetEventConnection!
  budgetSpendingEvents(
    offset: Int
    limit: Int = 50
    where: BudgetSpendingEventWhereInput
    orderBy: [BudgetSpendingEventOrderByInput!]
  ): [BudgetSpendingEvent!]!
  budgetSpendingEventByUniqueInput(
    where: BudgetSpendingEventWhereUniqueInput!
  ): BudgetSpendingEvent
  budgetSpendingEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: BudgetSpendingEventWhereInput
    orderBy: [BudgetSpendingEventOrderByInput!]
  ): BudgetSpendingEventConnection!
  categoryCreatedEvents(
    offset: Int
    limit: Int = 50
    where: CategoryCreatedEventWhereInput
    orderBy: [CategoryCreatedEventOrderByInput!]
  ): [CategoryCreatedEvent!]!
  categoryCreatedEventByUniqueInput(
    where: CategoryCreatedEventWhereUniqueInput!
  ): CategoryCreatedEvent
  categoryCreatedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: CategoryCreatedEventWhereInput
    orderBy: [CategoryCreatedEventOrderByInput!]
  ): CategoryCreatedEventConnection!
  categoryDeletedEvents(
    offset: Int
    limit: Int = 50
    where: CategoryDeletedEventWhereInput
    orderBy: [CategoryDeletedEventOrderByInput!]
  ): [CategoryDeletedEvent!]!
  categoryDeletedEventByUniqueInput(
    where: CategoryDeletedEventWhereUniqueInput!
  ): CategoryDeletedEvent
  categoryDeletedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: CategoryDeletedEventWhereInput
    orderBy: [CategoryDeletedEventOrderByInput!]
  ): CategoryDeletedEventConnection!
  categoryMembershipOfModeratorUpdatedEvents(
    offset: Int
    limit: Int = 50
    where: CategoryMembershipOfModeratorUpdatedEventWhereInput
    orderBy: [CategoryMembershipOfModeratorUpdatedEventOrderByInput!]
  ): [CategoryMembershipOfModeratorUpdatedEvent!]!
  categoryMembershipOfModeratorUpdatedEventByUniqueInput(
    where: CategoryMembershipOfModeratorUpdatedEventWhereUniqueInput!
  ): CategoryMembershipOfModeratorUpdatedEvent
  categoryMembershipOfModeratorUpdatedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: CategoryMembershipOfModeratorUpdatedEventWhereInput
    orderBy: [CategoryMembershipOfModeratorUpdatedEventOrderByInput!]
  ): CategoryMembershipOfModeratorUpdatedEventConnection!
  categoryStickyThreadUpdateEvents(
    offset: Int
    limit: Int = 50
    where: CategoryStickyThreadUpdateEventWhereInput
    orderBy: [CategoryStickyThreadUpdateEventOrderByInput!]
  ): [CategoryStickyThreadUpdateEvent!]!
  categoryStickyThreadUpdateEventByUniqueInput(
    where: CategoryStickyThreadUpdateEventWhereUniqueInput!
  ): CategoryStickyThreadUpdateEvent
  categoryStickyThreadUpdateEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: CategoryStickyThreadUpdateEventWhereInput
    orderBy: [CategoryStickyThreadUpdateEventOrderByInput!]
  ): CategoryStickyThreadUpdateEventConnection!
  categoryUpdatedEvents(
    offset: Int
    limit: Int = 50
    where: CategoryUpdatedEventWhereInput
    orderBy: [CategoryUpdatedEventOrderByInput!]
  ): [CategoryUpdatedEvent!]!
  categoryUpdatedEventByUniqueInput(
    where: CategoryUpdatedEventWhereUniqueInput!
  ): CategoryUpdatedEvent
  categoryUpdatedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: CategoryUpdatedEventWhereInput
    orderBy: [CategoryUpdatedEventOrderByInput!]
  ): CategoryUpdatedEventConnection!
  dataObjects(
    offset: Int
    limit: Int = 50
    where: DataObjectWhereInput
    orderBy: [DataObjectOrderByInput!]
  ): [DataObject!]!
  dataObjectByUniqueInput(where: DataObjectWhereUniqueInput!): DataObject
  dataObjectsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: DataObjectWhereInput
    orderBy: [DataObjectOrderByInput!]
  ): DataObjectConnection!
  events(
    offset: Int
    limit: Int = 50
    where: EventWhereInput
    orderBy: [EventOrderByInput!]
  ): [Event!]!
  forumCategories(
    offset: Int
    limit: Int = 50
    where: ForumCategoryWhereInput
    orderBy: [ForumCategoryOrderByInput!]
  ): [ForumCategory!]!
  forumCategoryByUniqueInput(
    where: ForumCategoryWhereUniqueInput!
  ): ForumCategory
  forumCategoriesConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: ForumCategoryWhereInput
    orderBy: [ForumCategoryOrderByInput!]
  ): ForumCategoryConnection!
  forumPollAlternatives(
    offset: Int
    limit: Int = 50
    where: ForumPollAlternativeWhereInput
    orderBy: [ForumPollAlternativeOrderByInput!]
  ): [ForumPollAlternative!]!
  forumPollAlternativeByUniqueInput(
    where: ForumPollAlternativeWhereUniqueInput!
  ): ForumPollAlternative
  forumPollAlternativesConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: ForumPollAlternativeWhereInput
    orderBy: [ForumPollAlternativeOrderByInput!]
  ): ForumPollAlternativeConnection!
  forumPolls(
    offset: Int
    limit: Int = 50
    where: ForumPollWhereInput
    orderBy: [ForumPollOrderByInput!]
  ): [ForumPoll!]!
  forumPollByUniqueInput(where: ForumPollWhereUniqueInput!): ForumPoll
  forumPollsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: ForumPollWhereInput
    orderBy: [ForumPollOrderByInput!]
  ): ForumPollConnection!
  forumPostReactions(
    offset: Int
    limit: Int = 50
    where: ForumPostReactionWhereInput
    orderBy: [ForumPostReactionOrderByInput!]
  ): [ForumPostReaction!]!
  forumPostReactionByUniqueInput(
    where: ForumPostReactionWhereUniqueInput!
  ): ForumPostReaction
  forumPostReactionsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: ForumPostReactionWhereInput
    orderBy: [ForumPostReactionOrderByInput!]
  ): ForumPostReactionConnection!
  forumPosts(
    offset: Int
    limit: Int = 50
    where: ForumPostWhereInput
    orderBy: [ForumPostOrderByInput!]
  ): [ForumPost!]!
  forumPostByUniqueInput(where: ForumPostWhereUniqueInput!): ForumPost
  forumPostsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: ForumPostWhereInput
    orderBy: [ForumPostOrderByInput!]
  ): ForumPostConnection!
  forumThreads(
    offset: Int
    limit: Int = 50
    where: ForumThreadWhereInput
    orderBy: [ForumThreadOrderByInput!]
  ): [ForumThread!]!
  forumThreadByUniqueInput(where: ForumThreadWhereUniqueInput!): ForumThread
  forumThreadsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: ForumThreadWhereInput
    orderBy: [ForumThreadOrderByInput!]
  ): ForumThreadConnection!
  fundingRequestDestinations(
    offset: Int
    limit: Int = 50
    where: FundingRequestDestinationWhereInput
    orderBy: [FundingRequestDestinationOrderByInput!]
  ): [FundingRequestDestination!]!
  fundingRequestDestinationByUniqueInput(
    where: FundingRequestDestinationWhereUniqueInput!
  ): FundingRequestDestination
  fundingRequestDestinationsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: FundingRequestDestinationWhereInput
    orderBy: [FundingRequestDestinationOrderByInput!]
  ): FundingRequestDestinationConnection!
  fundingRequestDestinationsLists(
    offset: Int
    limit: Int = 50
    where: FundingRequestDestinationsListWhereInput
    orderBy: [FundingRequestDestinationsListOrderByInput!]
  ): [FundingRequestDestinationsList!]!
  fundingRequestDestinationsListByUniqueInput(
    where: FundingRequestDestinationsListWhereUniqueInput!
  ): FundingRequestDestinationsList
  fundingRequestDestinationsListsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: FundingRequestDestinationsListWhereInput
    orderBy: [FundingRequestDestinationsListOrderByInput!]
  ): FundingRequestDestinationsListConnection!
  initialInvitationBalanceUpdatedEvents(
    offset: Int
    limit: Int = 50
    where: InitialInvitationBalanceUpdatedEventWhereInput
    orderBy: [InitialInvitationBalanceUpdatedEventOrderByInput!]
  ): [InitialInvitationBalanceUpdatedEvent!]!
  initialInvitationBalanceUpdatedEventByUniqueInput(
    where: InitialInvitationBalanceUpdatedEventWhereUniqueInput!
  ): InitialInvitationBalanceUpdatedEvent
  initialInvitationBalanceUpdatedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: InitialInvitationBalanceUpdatedEventWhereInput
    orderBy: [InitialInvitationBalanceUpdatedEventOrderByInput!]
  ): InitialInvitationBalanceUpdatedEventConnection!
  initialInvitationCountUpdatedEvents(
    offset: Int
    limit: Int = 50
    where: InitialInvitationCountUpdatedEventWhereInput
    orderBy: [InitialInvitationCountUpdatedEventOrderByInput!]
  ): [InitialInvitationCountUpdatedEvent!]!
  initialInvitationCountUpdatedEventByUniqueInput(
    where: InitialInvitationCountUpdatedEventWhereUniqueInput!
  ): InitialInvitationCountUpdatedEvent
  initialInvitationCountUpdatedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: InitialInvitationCountUpdatedEventWhereInput
    orderBy: [InitialInvitationCountUpdatedEventOrderByInput!]
  ): InitialInvitationCountUpdatedEventConnection!
  invitesTransferredEvents(
    offset: Int
    limit: Int = 50
    where: InvitesTransferredEventWhereInput
    orderBy: [InvitesTransferredEventOrderByInput!]
  ): [InvitesTransferredEvent!]!
  invitesTransferredEventByUniqueInput(
    where: InvitesTransferredEventWhereUniqueInput!
  ): InvitesTransferredEvent
  invitesTransferredEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: InvitesTransferredEventWhereInput
    orderBy: [InvitesTransferredEventOrderByInput!]
  ): InvitesTransferredEventConnection!
  leaderInvitationQuotaUpdatedEvents(
    offset: Int
    limit: Int = 50
    where: LeaderInvitationQuotaUpdatedEventWhereInput
    orderBy: [LeaderInvitationQuotaUpdatedEventOrderByInput!]
  ): [LeaderInvitationQuotaUpdatedEvent!]!
  leaderInvitationQuotaUpdatedEventByUniqueInput(
    where: LeaderInvitationQuotaUpdatedEventWhereUniqueInput!
  ): LeaderInvitationQuotaUpdatedEvent
  leaderInvitationQuotaUpdatedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: LeaderInvitationQuotaUpdatedEventWhereInput
    orderBy: [LeaderInvitationQuotaUpdatedEventOrderByInput!]
  ): LeaderInvitationQuotaUpdatedEventConnection!
  leaderSetEvents(
    offset: Int
    limit: Int = 50
    where: LeaderSetEventWhereInput
    orderBy: [LeaderSetEventOrderByInput!]
  ): [LeaderSetEvent!]!
  leaderSetEventByUniqueInput(
    where: LeaderSetEventWhereUniqueInput!
  ): LeaderSetEvent
  leaderSetEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: LeaderSetEventWhereInput
    orderBy: [LeaderSetEventOrderByInput!]
  ): LeaderSetEventConnection!
  leaderUnsetEvents(
    offset: Int
    limit: Int = 50
    where: LeaderUnsetEventWhereInput
    orderBy: [LeaderUnsetEventOrderByInput!]
  ): [LeaderUnsetEvent!]!
  leaderUnsetEventByUniqueInput(
    where: LeaderUnsetEventWhereUniqueInput!
  ): LeaderUnsetEvent
  leaderUnsetEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: LeaderUnsetEventWhereInput
    orderBy: [LeaderUnsetEventOrderByInput!]
  ): LeaderUnsetEventConnection!
  memberAccountsUpdatedEvents(
    offset: Int
    limit: Int = 50
    where: MemberAccountsUpdatedEventWhereInput
    orderBy: [MemberAccountsUpdatedEventOrderByInput!]
  ): [MemberAccountsUpdatedEvent!]!
  memberAccountsUpdatedEventByUniqueInput(
    where: MemberAccountsUpdatedEventWhereUniqueInput!
  ): MemberAccountsUpdatedEvent
  memberAccountsUpdatedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: MemberAccountsUpdatedEventWhereInput
    orderBy: [MemberAccountsUpdatedEventOrderByInput!]
  ): MemberAccountsUpdatedEventConnection!
  memberInvitedEvents(
    offset: Int
    limit: Int = 50
    where: MemberInvitedEventWhereInput
    orderBy: [MemberInvitedEventOrderByInput!]
  ): [MemberInvitedEvent!]!
  memberInvitedEventByUniqueInput(
    where: MemberInvitedEventWhereUniqueInput!
  ): MemberInvitedEvent
  memberInvitedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: MemberInvitedEventWhereInput
    orderBy: [MemberInvitedEventOrderByInput!]
  ): MemberInvitedEventConnection!
  memberMetadata(
    offset: Int
    limit: Int = 50
    where: MemberMetadataWhereInput
    orderBy: [MemberMetadataOrderByInput!]
  ): [MemberMetadata!]!
  memberMetadataByUniqueInput(
    where: MemberMetadataWhereUniqueInput!
  ): MemberMetadata
  memberMetadataConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: MemberMetadataWhereInput
    orderBy: [MemberMetadataOrderByInput!]
  ): MemberMetadataConnection!
  memberProfileUpdatedEvents(
    offset: Int
    limit: Int = 50
    where: MemberProfileUpdatedEventWhereInput
    orderBy: [MemberProfileUpdatedEventOrderByInput!]
  ): [MemberProfileUpdatedEvent!]!
  memberProfileUpdatedEventByUniqueInput(
    where: MemberProfileUpdatedEventWhereUniqueInput!
  ): MemberProfileUpdatedEvent
  memberProfileUpdatedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: MemberProfileUpdatedEventWhereInput
    orderBy: [MemberProfileUpdatedEventOrderByInput!]
  ): MemberProfileUpdatedEventConnection!
  memberVerificationStatusUpdatedEvents(
    offset: Int
    limit: Int = 50
    where: MemberVerificationStatusUpdatedEventWhereInput
    orderBy: [MemberVerificationStatusUpdatedEventOrderByInput!]
  ): [MemberVerificationStatusUpdatedEvent!]!
  memberVerificationStatusUpdatedEventByUniqueInput(
    where: MemberVerificationStatusUpdatedEventWhereUniqueInput!
  ): MemberVerificationStatusUpdatedEvent
  memberVerificationStatusUpdatedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: MemberVerificationStatusUpdatedEventWhereInput
    orderBy: [MemberVerificationStatusUpdatedEventOrderByInput!]
  ): MemberVerificationStatusUpdatedEventConnection!
  membershipBoughtEvents(
    offset: Int
    limit: Int = 50
    where: MembershipBoughtEventWhereInput
    orderBy: [MembershipBoughtEventOrderByInput!]
  ): [MembershipBoughtEvent!]!
  membershipBoughtEventByUniqueInput(
    where: MembershipBoughtEventWhereUniqueInput!
  ): MembershipBoughtEvent
  membershipBoughtEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: MembershipBoughtEventWhereInput
    orderBy: [MembershipBoughtEventOrderByInput!]
  ): MembershipBoughtEventConnection!
  membershipPriceUpdatedEvents(
    offset: Int
    limit: Int = 50
    where: MembershipPriceUpdatedEventWhereInput
    orderBy: [MembershipPriceUpdatedEventOrderByInput!]
  ): [MembershipPriceUpdatedEvent!]!
  membershipPriceUpdatedEventByUniqueInput(
    where: MembershipPriceUpdatedEventWhereUniqueInput!
  ): MembershipPriceUpdatedEvent
  membershipPriceUpdatedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: MembershipPriceUpdatedEventWhereInput
    orderBy: [MembershipPriceUpdatedEventOrderByInput!]
  ): MembershipPriceUpdatedEventConnection!
  membershipSystemSnapshots(
    offset: Int
    limit: Int = 50
    where: MembershipSystemSnapshotWhereInput
    orderBy: [MembershipSystemSnapshotOrderByInput!]
  ): [MembershipSystemSnapshot!]!
  membershipSystemSnapshotByUniqueInput(
    where: MembershipSystemSnapshotWhereUniqueInput!
  ): MembershipSystemSnapshot
  membershipSystemSnapshotsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: MembershipSystemSnapshotWhereInput
    orderBy: [MembershipSystemSnapshotOrderByInput!]
  ): MembershipSystemSnapshotConnection!
  memberships(
    offset: Int
    limit: Int = 50
    where: MembershipWhereInput
    orderBy: [MembershipOrderByInput!]
  ): [Membership!]!
  membershipByUniqueInput(where: MembershipWhereUniqueInput!): Membership
  membershipsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: MembershipWhereInput
    orderBy: [MembershipOrderByInput!]
  ): MembershipConnection!
  newMissedRewardLevelReachedEvents(
    offset: Int
    limit: Int = 50
    where: NewMissedRewardLevelReachedEventWhereInput
    orderBy: [NewMissedRewardLevelReachedEventOrderByInput!]
  ): [NewMissedRewardLevelReachedEvent!]!
  newMissedRewardLevelReachedEventByUniqueInput(
    where: NewMissedRewardLevelReachedEventWhereUniqueInput!
  ): NewMissedRewardLevelReachedEvent
  newMissedRewardLevelReachedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: NewMissedRewardLevelReachedEventWhereInput
    orderBy: [NewMissedRewardLevelReachedEventOrderByInput!]
  ): NewMissedRewardLevelReachedEventConnection!
  openingAddedEvents(
    offset: Int
    limit: Int = 50
    where: OpeningAddedEventWhereInput
    orderBy: [OpeningAddedEventOrderByInput!]
  ): [OpeningAddedEvent!]!
  openingAddedEventByUniqueInput(
    where: OpeningAddedEventWhereUniqueInput!
  ): OpeningAddedEvent
  openingAddedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: OpeningAddedEventWhereInput
    orderBy: [OpeningAddedEventOrderByInput!]
  ): OpeningAddedEventConnection!
  openingCanceledEvents(
    offset: Int
    limit: Int = 50
    where: OpeningCanceledEventWhereInput
    orderBy: [OpeningCanceledEventOrderByInput!]
  ): [OpeningCanceledEvent!]!
  openingCanceledEventByUniqueInput(
    where: OpeningCanceledEventWhereUniqueInput!
  ): OpeningCanceledEvent
  openingCanceledEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: OpeningCanceledEventWhereInput
    orderBy: [OpeningCanceledEventOrderByInput!]
  ): OpeningCanceledEventConnection!
  openingFilledEvents(
    offset: Int
    limit: Int = 50
    where: OpeningFilledEventWhereInput
    orderBy: [OpeningFilledEventOrderByInput!]
  ): [OpeningFilledEvent!]!
  openingFilledEventByUniqueInput(
    where: OpeningFilledEventWhereUniqueInput!
  ): OpeningFilledEvent
  openingFilledEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: OpeningFilledEventWhereInput
    orderBy: [OpeningFilledEventOrderByInput!]
  ): OpeningFilledEventConnection!
  postAddedEvents(
    offset: Int
    limit: Int = 50
    where: PostAddedEventWhereInput
    orderBy: [PostAddedEventOrderByInput!]
  ): [PostAddedEvent!]!
  postAddedEventByUniqueInput(
    where: PostAddedEventWhereUniqueInput!
  ): PostAddedEvent
  postAddedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: PostAddedEventWhereInput
    orderBy: [PostAddedEventOrderByInput!]
  ): PostAddedEventConnection!
  postDeletedEvents(
    offset: Int
    limit: Int = 50
    where: PostDeletedEventWhereInput
    orderBy: [PostDeletedEventOrderByInput!]
  ): [PostDeletedEvent!]!
  postDeletedEventByUniqueInput(
    where: PostDeletedEventWhereUniqueInput!
  ): PostDeletedEvent
  postDeletedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: PostDeletedEventWhereInput
    orderBy: [PostDeletedEventOrderByInput!]
  ): PostDeletedEventConnection!
  postModeratedEvents(
    offset: Int
    limit: Int = 50
    where: PostModeratedEventWhereInput
    orderBy: [PostModeratedEventOrderByInput!]
  ): [PostModeratedEvent!]!
  postModeratedEventByUniqueInput(
    where: PostModeratedEventWhereUniqueInput!
  ): PostModeratedEvent
  postModeratedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: PostModeratedEventWhereInput
    orderBy: [PostModeratedEventOrderByInput!]
  ): PostModeratedEventConnection!
  postReactedEvents(
    offset: Int
    limit: Int = 50
    where: PostReactedEventWhereInput
    orderBy: [PostReactedEventOrderByInput!]
  ): [PostReactedEvent!]!
  postReactedEventByUniqueInput(
    where: PostReactedEventWhereUniqueInput!
  ): PostReactedEvent
  postReactedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: PostReactedEventWhereInput
    orderBy: [PostReactedEventOrderByInput!]
  ): PostReactedEventConnection!
  postTextUpdatedEvents(
    offset: Int
    limit: Int = 50
    where: PostTextUpdatedEventWhereInput
    orderBy: [PostTextUpdatedEventOrderByInput!]
  ): [PostTextUpdatedEvent!]!
  postTextUpdatedEventByUniqueInput(
    where: PostTextUpdatedEventWhereUniqueInput!
  ): PostTextUpdatedEvent
  postTextUpdatedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: PostTextUpdatedEventWhereInput
    orderBy: [PostTextUpdatedEventOrderByInput!]
  ): PostTextUpdatedEventConnection!
  proposalCancelledEvents(
    offset: Int
    limit: Int = 50
    where: ProposalCancelledEventWhereInput
    orderBy: [ProposalCancelledEventOrderByInput!]
  ): [ProposalCancelledEvent!]!
  proposalCancelledEventByUniqueInput(
    where: ProposalCancelledEventWhereUniqueInput!
  ): ProposalCancelledEvent
  proposalCancelledEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: ProposalCancelledEventWhereInput
    orderBy: [ProposalCancelledEventOrderByInput!]
  ): ProposalCancelledEventConnection!
  proposalCreatedEvents(
    offset: Int
    limit: Int = 50
    where: ProposalCreatedEventWhereInput
    orderBy: [ProposalCreatedEventOrderByInput!]
  ): [ProposalCreatedEvent!]!
  proposalCreatedEventByUniqueInput(
    where: ProposalCreatedEventWhereUniqueInput!
  ): ProposalCreatedEvent
  proposalCreatedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: ProposalCreatedEventWhereInput
    orderBy: [ProposalCreatedEventOrderByInput!]
  ): ProposalCreatedEventConnection!
  proposalDecisionMadeEvents(
    offset: Int
    limit: Int = 50
    where: ProposalDecisionMadeEventWhereInput
    orderBy: [ProposalDecisionMadeEventOrderByInput!]
  ): [ProposalDecisionMadeEvent!]!
  proposalDecisionMadeEventByUniqueInput(
    where: ProposalDecisionMadeEventWhereUniqueInput!
  ): ProposalDecisionMadeEvent
  proposalDecisionMadeEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: ProposalDecisionMadeEventWhereInput
    orderBy: [ProposalDecisionMadeEventOrderByInput!]
  ): ProposalDecisionMadeEventConnection!
  proposalDiscussionPostCreatedEvents(
    offset: Int
    limit: Int = 50
    where: ProposalDiscussionPostCreatedEventWhereInput
    orderBy: [ProposalDiscussionPostCreatedEventOrderByInput!]
  ): [ProposalDiscussionPostCreatedEvent!]!
  proposalDiscussionPostCreatedEventByUniqueInput(
    where: ProposalDiscussionPostCreatedEventWhereUniqueInput!
  ): ProposalDiscussionPostCreatedEvent
  proposalDiscussionPostCreatedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: ProposalDiscussionPostCreatedEventWhereInput
    orderBy: [ProposalDiscussionPostCreatedEventOrderByInput!]
  ): ProposalDiscussionPostCreatedEventConnection!
  proposalDiscussionPostDeletedEvents(
    offset: Int
    limit: Int = 50
    where: ProposalDiscussionPostDeletedEventWhereInput
    orderBy: [ProposalDiscussionPostDeletedEventOrderByInput!]
  ): [ProposalDiscussionPostDeletedEvent!]!
  proposalDiscussionPostDeletedEventByUniqueInput(
    where: ProposalDiscussionPostDeletedEventWhereUniqueInput!
  ): ProposalDiscussionPostDeletedEvent
  proposalDiscussionPostDeletedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: ProposalDiscussionPostDeletedEventWhereInput
    orderBy: [ProposalDiscussionPostDeletedEventOrderByInput!]
  ): ProposalDiscussionPostDeletedEventConnection!
  proposalDiscussionPostUpdatedEvents(
    offset: Int
    limit: Int = 50
    where: ProposalDiscussionPostUpdatedEventWhereInput
    orderBy: [ProposalDiscussionPostUpdatedEventOrderByInput!]
  ): [ProposalDiscussionPostUpdatedEvent!]!
  proposalDiscussionPostUpdatedEventByUniqueInput(
    where: ProposalDiscussionPostUpdatedEventWhereUniqueInput!
  ): ProposalDiscussionPostUpdatedEvent
  proposalDiscussionPostUpdatedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: ProposalDiscussionPostUpdatedEventWhereInput
    orderBy: [ProposalDiscussionPostUpdatedEventOrderByInput!]
  ): ProposalDiscussionPostUpdatedEventConnection!
  proposalDiscussionPosts(
    offset: Int
    limit: Int = 50
    where: ProposalDiscussionPostWhereInput
    orderBy: [ProposalDiscussionPostOrderByInput!]
  ): [ProposalDiscussionPost!]!
  proposalDiscussionPostByUniqueInput(
    where: ProposalDiscussionPostWhereUniqueInput!
  ): ProposalDiscussionPost
  proposalDiscussionPostsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: ProposalDiscussionPostWhereInput
    orderBy: [ProposalDiscussionPostOrderByInput!]
  ): ProposalDiscussionPostConnection!
  proposalDiscussionThreadCreatedEvents(
    offset: Int
    limit: Int = 50
    where: ProposalDiscussionThreadCreatedEventWhereInput
    orderBy: [ProposalDiscussionThreadCreatedEventOrderByInput!]
  ): [ProposalDiscussionThreadCreatedEvent!]!
  proposalDiscussionThreadCreatedEventByUniqueInput(
    where: ProposalDiscussionThreadCreatedEventWhereUniqueInput!
  ): ProposalDiscussionThreadCreatedEvent
  proposalDiscussionThreadCreatedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: ProposalDiscussionThreadCreatedEventWhereInput
    orderBy: [ProposalDiscussionThreadCreatedEventOrderByInput!]
  ): ProposalDiscussionThreadCreatedEventConnection!
  proposalDiscussionThreadModeChangedEvents(
    offset: Int
    limit: Int = 50
    where: ProposalDiscussionThreadModeChangedEventWhereInput
    orderBy: [ProposalDiscussionThreadModeChangedEventOrderByInput!]
  ): [ProposalDiscussionThreadModeChangedEvent!]!
  proposalDiscussionThreadModeChangedEventByUniqueInput(
    where: ProposalDiscussionThreadModeChangedEventWhereUniqueInput!
  ): ProposalDiscussionThreadModeChangedEvent
  proposalDiscussionThreadModeChangedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: ProposalDiscussionThreadModeChangedEventWhereInput
    orderBy: [ProposalDiscussionThreadModeChangedEventOrderByInput!]
  ): ProposalDiscussionThreadModeChangedEventConnection!
  proposalDiscussionThreads(
    offset: Int
    limit: Int = 50
    where: ProposalDiscussionThreadWhereInput
    orderBy: [ProposalDiscussionThreadOrderByInput!]
  ): [ProposalDiscussionThread!]!
  proposalDiscussionThreadByUniqueInput(
    where: ProposalDiscussionThreadWhereUniqueInput!
  ): ProposalDiscussionThread
  proposalDiscussionThreadsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: ProposalDiscussionThreadWhereInput
    orderBy: [ProposalDiscussionThreadOrderByInput!]
  ): ProposalDiscussionThreadConnection!
  proposalDiscussionWhitelists(
    offset: Int
    limit: Int = 50
    where: ProposalDiscussionWhitelistWhereInput
    orderBy: [ProposalDiscussionWhitelistOrderByInput!]
  ): [ProposalDiscussionWhitelist!]!
  proposalDiscussionWhitelistByUniqueInput(
    where: ProposalDiscussionWhitelistWhereUniqueInput!
  ): ProposalDiscussionWhitelist
  proposalDiscussionWhitelistsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: ProposalDiscussionWhitelistWhereInput
    orderBy: [ProposalDiscussionWhitelistOrderByInput!]
  ): ProposalDiscussionWhitelistConnection!
  proposalExecutedEvents(
    offset: Int
    limit: Int = 50
    where: ProposalExecutedEventWhereInput
    orderBy: [ProposalExecutedEventOrderByInput!]
  ): [ProposalExecutedEvent!]!
  proposalExecutedEventByUniqueInput(
    where: ProposalExecutedEventWhereUniqueInput!
  ): ProposalExecutedEvent
  proposalExecutedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: ProposalExecutedEventWhereInput
    orderBy: [ProposalExecutedEventOrderByInput!]
  ): ProposalExecutedEventConnection!
  proposalStatusUpdatedEvents(
    offset: Int
    limit: Int = 50
    where: ProposalStatusUpdatedEventWhereInput
    orderBy: [ProposalStatusUpdatedEventOrderByInput!]
  ): [ProposalStatusUpdatedEvent!]!
  proposalStatusUpdatedEventByUniqueInput(
    where: ProposalStatusUpdatedEventWhereUniqueInput!
  ): ProposalStatusUpdatedEvent
  proposalStatusUpdatedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: ProposalStatusUpdatedEventWhereInput
    orderBy: [ProposalStatusUpdatedEventOrderByInput!]
  ): ProposalStatusUpdatedEventConnection!
  proposalVotedEvents(
    offset: Int
    limit: Int = 50
    where: ProposalVotedEventWhereInput
    orderBy: [ProposalVotedEventOrderByInput!]
  ): [ProposalVotedEvent!]!
  proposalVotedEventByUniqueInput(
    where: ProposalVotedEventWhereUniqueInput!
  ): ProposalVotedEvent
  proposalVotedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: ProposalVotedEventWhereInput
    orderBy: [ProposalVotedEventOrderByInput!]
  ): ProposalVotedEventConnection!
  proposals(
    offset: Int
    limit: Int = 50
    where: ProposalWhereInput
    orderBy: [ProposalOrderByInput!]
  ): [Proposal!]!
  proposalByUniqueInput(where: ProposalWhereUniqueInput!): Proposal
  proposalsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: ProposalWhereInput
    orderBy: [ProposalOrderByInput!]
  ): ProposalConnection!
  membersByHandle(
    whereMembership: MembershipWhereInput
    skip: Int = 0
    limit: Int = 5
    text: String!
  ): [MembersByHandleFTSOutput!]!
  postsByText(
    whereForumPost: ForumPostWhereInput
    skip: Int = 0
    limit: Int = 5
    text: String!
  ): [PostsByTextFTSOutput!]!
  proposalsByDescription(
    whereProposal: ProposalWhereInput
    skip: Int = 0
    limit: Int = 5
    text: String!
  ): [ProposalsByDescriptionFTSOutput!]!
  proposalsByTitle(
    whereProposal: ProposalWhereInput
    skip: Int = 0
    limit: Int = 5
    text: String!
  ): [ProposalsByTitleFTSOutput!]!
  threadsByTitle(
    whereForumThread: ForumThreadWhereInput
    skip: Int = 0
    limit: Int = 5
    text: String!
  ): [ThreadsByTitleFTSOutput!]!
  referralCutUpdatedEvents(
    offset: Int
    limit: Int = 50
    where: ReferralCutUpdatedEventWhereInput
    orderBy: [ReferralCutUpdatedEventOrderByInput!]
  ): [ReferralCutUpdatedEvent!]!
  referralCutUpdatedEventByUniqueInput(
    where: ReferralCutUpdatedEventWhereUniqueInput!
  ): ReferralCutUpdatedEvent
  referralCutUpdatedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: ReferralCutUpdatedEventWhereInput
    orderBy: [ReferralCutUpdatedEventOrderByInput!]
  ): ReferralCutUpdatedEventConnection!
  rewardPaidEvents(
    offset: Int
    limit: Int = 50
    where: RewardPaidEventWhereInput
    orderBy: [RewardPaidEventOrderByInput!]
  ): [RewardPaidEvent!]!
  rewardPaidEventByUniqueInput(
    where: RewardPaidEventWhereUniqueInput!
  ): RewardPaidEvent
  rewardPaidEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: RewardPaidEventWhereInput
    orderBy: [RewardPaidEventOrderByInput!]
  ): RewardPaidEventConnection!
  stakeDecreasedEvents(
    offset: Int
    limit: Int = 50
    where: StakeDecreasedEventWhereInput
    orderBy: [StakeDecreasedEventOrderByInput!]
  ): [StakeDecreasedEvent!]!
  stakeDecreasedEventByUniqueInput(
    where: StakeDecreasedEventWhereUniqueInput!
  ): StakeDecreasedEvent
  stakeDecreasedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: StakeDecreasedEventWhereInput
    orderBy: [StakeDecreasedEventOrderByInput!]
  ): StakeDecreasedEventConnection!
  stakeIncreasedEvents(
    offset: Int
    limit: Int = 50
    where: StakeIncreasedEventWhereInput
    orderBy: [StakeIncreasedEventOrderByInput!]
  ): [StakeIncreasedEvent!]!
  stakeIncreasedEventByUniqueInput(
    where: StakeIncreasedEventWhereUniqueInput!
  ): StakeIncreasedEvent
  stakeIncreasedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: StakeIncreasedEventWhereInput
    orderBy: [StakeIncreasedEventOrderByInput!]
  ): StakeIncreasedEventConnection!
  stakeSlashedEvents(
    offset: Int
    limit: Int = 50
    where: StakeSlashedEventWhereInput
    orderBy: [StakeSlashedEventOrderByInput!]
  ): [StakeSlashedEvent!]!
  stakeSlashedEventByUniqueInput(
    where: StakeSlashedEventWhereUniqueInput!
  ): StakeSlashedEvent
  stakeSlashedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: StakeSlashedEventWhereInput
    orderBy: [StakeSlashedEventOrderByInput!]
  ): StakeSlashedEventConnection!
  stakingAccountAddedEvents(
    offset: Int
    limit: Int = 50
    where: StakingAccountAddedEventWhereInput
    orderBy: [StakingAccountAddedEventOrderByInput!]
  ): [StakingAccountAddedEvent!]!
  stakingAccountAddedEventByUniqueInput(
    where: StakingAccountAddedEventWhereUniqueInput!
  ): StakingAccountAddedEvent
  stakingAccountAddedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: StakingAccountAddedEventWhereInput
    orderBy: [StakingAccountAddedEventOrderByInput!]
  ): StakingAccountAddedEventConnection!
  stakingAccountConfirmedEvents(
    offset: Int
    limit: Int = 50
    where: StakingAccountConfirmedEventWhereInput
    orderBy: [StakingAccountConfirmedEventOrderByInput!]
  ): [StakingAccountConfirmedEvent!]!
  stakingAccountConfirmedEventByUniqueInput(
    where: StakingAccountConfirmedEventWhereUniqueInput!
  ): StakingAccountConfirmedEvent
  stakingAccountConfirmedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: StakingAccountConfirmedEventWhereInput
    orderBy: [StakingAccountConfirmedEventOrderByInput!]
  ): StakingAccountConfirmedEventConnection!
  stakingAccountRemovedEvents(
    offset: Int
    limit: Int = 50
    where: StakingAccountRemovedEventWhereInput
    orderBy: [StakingAccountRemovedEventOrderByInput!]
  ): [StakingAccountRemovedEvent!]!
  stakingAccountRemovedEventByUniqueInput(
    where: StakingAccountRemovedEventWhereUniqueInput!
  ): StakingAccountRemovedEvent
  stakingAccountRemovedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: StakingAccountRemovedEventWhereInput
    orderBy: [StakingAccountRemovedEventOrderByInput!]
  ): StakingAccountRemovedEventConnection!
  statusTextChangedEvents(
    offset: Int
    limit: Int = 50
    where: StatusTextChangedEventWhereInput
    orderBy: [StatusTextChangedEventOrderByInput!]
  ): [StatusTextChangedEvent!]!
  statusTextChangedEventByUniqueInput(
    where: StatusTextChangedEventWhereUniqueInput!
  ): StatusTextChangedEvent
  statusTextChangedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: StatusTextChangedEventWhereInput
    orderBy: [StatusTextChangedEventOrderByInput!]
  ): StatusTextChangedEventConnection!
  terminatedLeaderEvents(
    offset: Int
    limit: Int = 50
    where: TerminatedLeaderEventWhereInput
    orderBy: [TerminatedLeaderEventOrderByInput!]
  ): [TerminatedLeaderEvent!]!
  terminatedLeaderEventByUniqueInput(
    where: TerminatedLeaderEventWhereUniqueInput!
  ): TerminatedLeaderEvent
  terminatedLeaderEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: TerminatedLeaderEventWhereInput
    orderBy: [TerminatedLeaderEventOrderByInput!]
  ): TerminatedLeaderEventConnection!
  terminatedWorkerEvents(
    offset: Int
    limit: Int = 50
    where: TerminatedWorkerEventWhereInput
    orderBy: [TerminatedWorkerEventOrderByInput!]
  ): [TerminatedWorkerEvent!]!
  terminatedWorkerEventByUniqueInput(
    where: TerminatedWorkerEventWhereUniqueInput!
  ): TerminatedWorkerEvent
  terminatedWorkerEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: TerminatedWorkerEventWhereInput
    orderBy: [TerminatedWorkerEventOrderByInput!]
  ): TerminatedWorkerEventConnection!
  threadCreatedEvents(
    offset: Int
    limit: Int = 50
    where: ThreadCreatedEventWhereInput
    orderBy: [ThreadCreatedEventOrderByInput!]
  ): [ThreadCreatedEvent!]!
  threadCreatedEventByUniqueInput(
    where: ThreadCreatedEventWhereUniqueInput!
  ): ThreadCreatedEvent
  threadCreatedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: ThreadCreatedEventWhereInput
    orderBy: [ThreadCreatedEventOrderByInput!]
  ): ThreadCreatedEventConnection!
  threadDeletedEvents(
    offset: Int
    limit: Int = 50
    where: ThreadDeletedEventWhereInput
    orderBy: [ThreadDeletedEventOrderByInput!]
  ): [ThreadDeletedEvent!]!
  threadDeletedEventByUniqueInput(
    where: ThreadDeletedEventWhereUniqueInput!
  ): ThreadDeletedEvent
  threadDeletedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: ThreadDeletedEventWhereInput
    orderBy: [ThreadDeletedEventOrderByInput!]
  ): ThreadDeletedEventConnection!
  threadModeratedEvents(
    offset: Int
    limit: Int = 50
    where: ThreadModeratedEventWhereInput
    orderBy: [ThreadModeratedEventOrderByInput!]
  ): [ThreadModeratedEvent!]!
  threadModeratedEventByUniqueInput(
    where: ThreadModeratedEventWhereUniqueInput!
  ): ThreadModeratedEvent
  threadModeratedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: ThreadModeratedEventWhereInput
    orderBy: [ThreadModeratedEventOrderByInput!]
  ): ThreadModeratedEventConnection!
  threadMovedEvents(
    offset: Int
    limit: Int = 50
    where: ThreadMovedEventWhereInput
    orderBy: [ThreadMovedEventOrderByInput!]
  ): [ThreadMovedEvent!]!
  threadMovedEventByUniqueInput(
    where: ThreadMovedEventWhereUniqueInput!
  ): ThreadMovedEvent
  threadMovedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: ThreadMovedEventWhereInput
    orderBy: [ThreadMovedEventOrderByInput!]
  ): ThreadMovedEventConnection!
  threadTitleUpdatedEvents(
    offset: Int
    limit: Int = 50
    where: ThreadTitleUpdatedEventWhereInput
    orderBy: [ThreadTitleUpdatedEventOrderByInput!]
  ): [ThreadTitleUpdatedEvent!]!
  threadTitleUpdatedEventByUniqueInput(
    where: ThreadTitleUpdatedEventWhereUniqueInput!
  ): ThreadTitleUpdatedEvent
  threadTitleUpdatedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: ThreadTitleUpdatedEventWhereInput
    orderBy: [ThreadTitleUpdatedEventOrderByInput!]
  ): ThreadTitleUpdatedEventConnection!
  upcomingWorkingGroupOpenings(
    offset: Int
    limit: Int = 50
    where: UpcomingWorkingGroupOpeningWhereInput
    orderBy: [UpcomingWorkingGroupOpeningOrderByInput!]
  ): [UpcomingWorkingGroupOpening!]!
  upcomingWorkingGroupOpeningByUniqueInput(
    where: UpcomingWorkingGroupOpeningWhereUniqueInput!
  ): UpcomingWorkingGroupOpening
  upcomingWorkingGroupOpeningsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: UpcomingWorkingGroupOpeningWhereInput
    orderBy: [UpcomingWorkingGroupOpeningOrderByInput!]
  ): UpcomingWorkingGroupOpeningConnection!
  voteOnPollEvents(
    offset: Int
    limit: Int = 50
    where: VoteOnPollEventWhereInput
    orderBy: [VoteOnPollEventOrderByInput!]
  ): [VoteOnPollEvent!]!
  voteOnPollEventByUniqueInput(
    where: VoteOnPollEventWhereUniqueInput!
  ): VoteOnPollEvent
  voteOnPollEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: VoteOnPollEventWhereInput
    orderBy: [VoteOnPollEventOrderByInput!]
  ): VoteOnPollEventConnection!
  workerExitedEvents(
    offset: Int
    limit: Int = 50
    where: WorkerExitedEventWhereInput
    orderBy: [WorkerExitedEventOrderByInput!]
  ): [WorkerExitedEvent!]!
  workerExitedEventByUniqueInput(
    where: WorkerExitedEventWhereUniqueInput!
  ): WorkerExitedEvent
  workerExitedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: WorkerExitedEventWhereInput
    orderBy: [WorkerExitedEventOrderByInput!]
  ): WorkerExitedEventConnection!
  workerRewardAccountUpdatedEvents(
    offset: Int
    limit: Int = 50
    where: WorkerRewardAccountUpdatedEventWhereInput
    orderBy: [WorkerRewardAccountUpdatedEventOrderByInput!]
  ): [WorkerRewardAccountUpdatedEvent!]!
  workerRewardAccountUpdatedEventByUniqueInput(
    where: WorkerRewardAccountUpdatedEventWhereUniqueInput!
  ): WorkerRewardAccountUpdatedEvent
  workerRewardAccountUpdatedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: WorkerRewardAccountUpdatedEventWhereInput
    orderBy: [WorkerRewardAccountUpdatedEventOrderByInput!]
  ): WorkerRewardAccountUpdatedEventConnection!
  workerRewardAmountUpdatedEvents(
    offset: Int
    limit: Int = 50
    where: WorkerRewardAmountUpdatedEventWhereInput
    orderBy: [WorkerRewardAmountUpdatedEventOrderByInput!]
  ): [WorkerRewardAmountUpdatedEvent!]!
  workerRewardAmountUpdatedEventByUniqueInput(
    where: WorkerRewardAmountUpdatedEventWhereUniqueInput!
  ): WorkerRewardAmountUpdatedEvent
  workerRewardAmountUpdatedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: WorkerRewardAmountUpdatedEventWhereInput
    orderBy: [WorkerRewardAmountUpdatedEventOrderByInput!]
  ): WorkerRewardAmountUpdatedEventConnection!
  workerRoleAccountUpdatedEvents(
    offset: Int
    limit: Int = 50
    where: WorkerRoleAccountUpdatedEventWhereInput
    orderBy: [WorkerRoleAccountUpdatedEventOrderByInput!]
  ): [WorkerRoleAccountUpdatedEvent!]!
  workerRoleAccountUpdatedEventByUniqueInput(
    where: WorkerRoleAccountUpdatedEventWhereUniqueInput!
  ): WorkerRoleAccountUpdatedEvent
  workerRoleAccountUpdatedEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: WorkerRoleAccountUpdatedEventWhereInput
    orderBy: [WorkerRoleAccountUpdatedEventOrderByInput!]
  ): WorkerRoleAccountUpdatedEventConnection!
  workerStartedLeavingEvents(
    offset: Int
    limit: Int = 50
    where: WorkerStartedLeavingEventWhereInput
    orderBy: [WorkerStartedLeavingEventOrderByInput!]
  ): [WorkerStartedLeavingEvent!]!
  workerStartedLeavingEventByUniqueInput(
    where: WorkerStartedLeavingEventWhereUniqueInput!
  ): WorkerStartedLeavingEvent
  workerStartedLeavingEventsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: WorkerStartedLeavingEventWhereInput
    orderBy: [WorkerStartedLeavingEventOrderByInput!]
  ): WorkerStartedLeavingEventConnection!
  workers(
    offset: Int
    limit: Int = 50
    where: WorkerWhereInput
    orderBy: [WorkerOrderByInput!]
  ): [Worker!]!
  workerByUniqueInput(where: WorkerWhereUniqueInput!): Worker
  workersConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: WorkerWhereInput
    orderBy: [WorkerOrderByInput!]
  ): WorkerConnection!
  workingGroupApplications(
    offset: Int
    limit: Int = 50
    where: WorkingGroupApplicationWhereInput
    orderBy: [WorkingGroupApplicationOrderByInput!]
  ): [WorkingGroupApplication!]!
  workingGroupApplicationByUniqueInput(
    where: WorkingGroupApplicationWhereUniqueInput!
  ): WorkingGroupApplication
  workingGroupApplicationsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: WorkingGroupApplicationWhereInput
    orderBy: [WorkingGroupApplicationOrderByInput!]
  ): WorkingGroupApplicationConnection!
  workingGroupMetadata(
    offset: Int
    limit: Int = 50
    where: WorkingGroupMetadataWhereInput
    orderBy: [WorkingGroupMetadataOrderByInput!]
  ): [WorkingGroupMetadata!]!
  workingGroupMetadataByUniqueInput(
    where: WorkingGroupMetadataWhereUniqueInput!
  ): WorkingGroupMetadata
  workingGroupMetadataConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: WorkingGroupMetadataWhereInput
    orderBy: [WorkingGroupMetadataOrderByInput!]
  ): WorkingGroupMetadataConnection!
  workingGroupOpeningMetadata(
    offset: Int
    limit: Int = 50
    where: WorkingGroupOpeningMetadataWhereInput
    orderBy: [WorkingGroupOpeningMetadataOrderByInput!]
  ): [WorkingGroupOpeningMetadata!]!
  workingGroupOpeningMetadataByUniqueInput(
    where: WorkingGroupOpeningMetadataWhereUniqueInput!
  ): WorkingGroupOpeningMetadata
  workingGroupOpeningMetadataConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: WorkingGroupOpeningMetadataWhereInput
    orderBy: [WorkingGroupOpeningMetadataOrderByInput!]
  ): WorkingGroupOpeningMetadataConnection!
  workingGroupOpenings(
    offset: Int
    limit: Int = 50
    where: WorkingGroupOpeningWhereInput
    orderBy: [WorkingGroupOpeningOrderByInput!]
  ): [WorkingGroupOpening!]!
  workingGroupOpeningByUniqueInput(
    where: WorkingGroupOpeningWhereUniqueInput!
  ): WorkingGroupOpening
  workingGroupOpeningsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: WorkingGroupOpeningWhereInput
    orderBy: [WorkingGroupOpeningOrderByInput!]
  ): WorkingGroupOpeningConnection!
  workingGroups(
    offset: Int
    limit: Int = 50
    where: WorkingGroupWhereInput
    orderBy: [WorkingGroupOrderByInput!]
  ): [WorkingGroup!]!
  workingGroupByUniqueInput(where: WorkingGroupWhereUniqueInput!): WorkingGroup
  workingGroupsConnection(
    first: Int
    after: String
    last: Int
    before: String
    where: WorkingGroupWhereInput
    orderBy: [WorkingGroupOrderByInput!]
  ): WorkingGroupConnection!
}

type ReferralCutUpdatedEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  newValue: Int!
}

type ReferralCutUpdatedEventConnection {
  totalCount: Int!
  edges: [ReferralCutUpdatedEventEdge!]!
  pageInfo: PageInfo!
}

input ReferralCutUpdatedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  newValue: Float!
}

type ReferralCutUpdatedEventEdge {
  node: ReferralCutUpdatedEvent!
  cursor: String!
}

enum ReferralCutUpdatedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  newValue_ASC
  newValue_DESC
}

input ReferralCutUpdatedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  newValue: Float
}

input ReferralCutUpdatedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  newValue_eq: Int
  newValue_gt: Int
  newValue_gte: Int
  newValue_lt: Int
  newValue_lte: Int
  newValue_in: [Int!]
  AND: [ReferralCutUpdatedEventWhereInput!]
  OR: [ReferralCutUpdatedEventWhereInput!]
}

input ReferralCutUpdatedEventWhereUniqueInput {
  id: ID!
}

type RewardPaidEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  group: WorkingGroup!
  groupId: String!
  worker: Worker!
  workerId: String!
  rewardAccount: String!
  amount: BigInt!
  paymentType: RewardPaymentType!
}

type RewardPaidEventConnection {
  totalCount: Int!
  edges: [RewardPaidEventEdge!]!
  pageInfo: PageInfo!
}

input RewardPaidEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  group: ID!
  worker: ID!
  rewardAccount: String!
  amount: BigInt!
  paymentType: RewardPaymentType!
}

type RewardPaidEventEdge {
  node: RewardPaidEvent!
  cursor: String!
}

enum RewardPaidEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  group_ASC
  group_DESC
  worker_ASC
  worker_DESC
  rewardAccount_ASC
  rewardAccount_DESC
  amount_ASC
  amount_DESC
  paymentType_ASC
  paymentType_DESC
}

input RewardPaidEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  group: ID
  worker: ID
  rewardAccount: String
  amount: BigInt
  paymentType: RewardPaymentType
}

input RewardPaidEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  group_eq: ID
  group_in: [ID!]
  worker_eq: ID
  worker_in: [ID!]
  rewardAccount_eq: String
  rewardAccount_contains: String
  rewardAccount_startsWith: String
  rewardAccount_endsWith: String
  rewardAccount_in: [String!]
  amount_eq: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_lt: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  paymentType_eq: RewardPaymentType
  paymentType_in: [RewardPaymentType!]
  group: WorkingGroupWhereInput
  worker: WorkerWhereInput
  AND: [RewardPaidEventWhereInput!]
  OR: [RewardPaidEventWhereInput!]
}

input RewardPaidEventWhereUniqueInput {
  id: ID!
}

enum RewardPaymentType {
  REGULAR
  MISSED
}

type RuntimeUpgradeProposalDetails {
  wasmBytecode: Bytes!
}

input RuntimeUpgradeProposalDetailsCreateInput {
  wasmBytecode: Bytes!
}

input RuntimeUpgradeProposalDetailsUpdateInput {
  wasmBytecode: Bytes
}

input RuntimeUpgradeProposalDetailsWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  wasmBytecode_eq: Bytes
  wasmBytecode_in: [Bytes!]
  AND: [RuntimeUpgradeProposalDetailsWhereInput!]
  OR: [RuntimeUpgradeProposalDetailsWhereInput!]
}

input RuntimeUpgradeProposalDetailsWhereUniqueInput {
  id: ID!
}

type SetCouncilBudgetIncrementProposalDetails {
  newAmount: BigInt!
}

input SetCouncilBudgetIncrementProposalDetailsCreateInput {
  newAmount: BigInt!
}

input SetCouncilBudgetIncrementProposalDetailsUpdateInput {
  newAmount: BigInt
}

input SetCouncilBudgetIncrementProposalDetailsWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  newAmount_eq: BigInt
  newAmount_gt: BigInt
  newAmount_gte: BigInt
  newAmount_lt: BigInt
  newAmount_lte: BigInt
  newAmount_in: [BigInt!]
  AND: [SetCouncilBudgetIncrementProposalDetailsWhereInput!]
  OR: [SetCouncilBudgetIncrementProposalDetailsWhereInput!]
}

input SetCouncilBudgetIncrementProposalDetailsWhereUniqueInput {
  id: ID!
}

type SetCouncilorRewardProposalDetails {
  newRewardPerBlock: BigInt!
}

input SetCouncilorRewardProposalDetailsCreateInput {
  newRewardPerBlock: BigInt!
}

input SetCouncilorRewardProposalDetailsUpdateInput {
  newRewardPerBlock: BigInt
}

input SetCouncilorRewardProposalDetailsWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  newRewardPerBlock_eq: BigInt
  newRewardPerBlock_gt: BigInt
  newRewardPerBlock_gte: BigInt
  newRewardPerBlock_lt: BigInt
  newRewardPerBlock_lte: BigInt
  newRewardPerBlock_in: [BigInt!]
  AND: [SetCouncilorRewardProposalDetailsWhereInput!]
  OR: [SetCouncilorRewardProposalDetailsWhereInput!]
}

input SetCouncilorRewardProposalDetailsWhereUniqueInput {
  id: ID!
}

type SetInitialInvitationBalanceProposalDetails {
  newInitialInvitationBalance: BigInt!
}

input SetInitialInvitationBalanceProposalDetailsCreateInput {
  newInitialInvitationBalance: BigInt!
}

input SetInitialInvitationBalanceProposalDetailsUpdateInput {
  newInitialInvitationBalance: BigInt
}

input SetInitialInvitationBalanceProposalDetailsWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  newInitialInvitationBalance_eq: BigInt
  newInitialInvitationBalance_gt: BigInt
  newInitialInvitationBalance_gte: BigInt
  newInitialInvitationBalance_lt: BigInt
  newInitialInvitationBalance_lte: BigInt
  newInitialInvitationBalance_in: [BigInt!]
  AND: [SetInitialInvitationBalanceProposalDetailsWhereInput!]
  OR: [SetInitialInvitationBalanceProposalDetailsWhereInput!]
}

input SetInitialInvitationBalanceProposalDetailsWhereUniqueInput {
  id: ID!
}

type SetInitialInvitationCountProposalDetails {
  newInitialInvitationsCount: Int!
}

input SetInitialInvitationCountProposalDetailsCreateInput {
  newInitialInvitationsCount: Float!
}

input SetInitialInvitationCountProposalDetailsUpdateInput {
  newInitialInvitationsCount: Float
}

input SetInitialInvitationCountProposalDetailsWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  newInitialInvitationsCount_eq: Int
  newInitialInvitationsCount_gt: Int
  newInitialInvitationsCount_gte: Int
  newInitialInvitationsCount_lt: Int
  newInitialInvitationsCount_lte: Int
  newInitialInvitationsCount_in: [Int!]
  AND: [SetInitialInvitationCountProposalDetailsWhereInput!]
  OR: [SetInitialInvitationCountProposalDetailsWhereInput!]
}

input SetInitialInvitationCountProposalDetailsWhereUniqueInput {
  id: ID!
}

type SetMaxValidatorCountProposalDetails {
  newMaxValidatorCount: Int!
}

input SetMaxValidatorCountProposalDetailsCreateInput {
  newMaxValidatorCount: Float!
}

input SetMaxValidatorCountProposalDetailsUpdateInput {
  newMaxValidatorCount: Float
}

input SetMaxValidatorCountProposalDetailsWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  newMaxValidatorCount_eq: Int
  newMaxValidatorCount_gt: Int
  newMaxValidatorCount_gte: Int
  newMaxValidatorCount_lt: Int
  newMaxValidatorCount_lte: Int
  newMaxValidatorCount_in: [Int!]
  AND: [SetMaxValidatorCountProposalDetailsWhereInput!]
  OR: [SetMaxValidatorCountProposalDetailsWhereInput!]
}

input SetMaxValidatorCountProposalDetailsWhereUniqueInput {
  id: ID!
}

type SetMembershipLeadInvitationQuotaProposalDetails {
  newLeadInvitationQuota: Int!
}

input SetMembershipLeadInvitationQuotaProposalDetailsCreateInput {
  newLeadInvitationQuota: Float!
}

input SetMembershipLeadInvitationQuotaProposalDetailsUpdateInput {
  newLeadInvitationQuota: Float
}

input SetMembershipLeadInvitationQuotaProposalDetailsWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  newLeadInvitationQuota_eq: Int
  newLeadInvitationQuota_gt: Int
  newLeadInvitationQuota_gte: Int
  newLeadInvitationQuota_lt: Int
  newLeadInvitationQuota_lte: Int
  newLeadInvitationQuota_in: [Int!]
  AND: [SetMembershipLeadInvitationQuotaProposalDetailsWhereInput!]
  OR: [SetMembershipLeadInvitationQuotaProposalDetailsWhereInput!]
}

input SetMembershipLeadInvitationQuotaProposalDetailsWhereUniqueInput {
  id: ID!
}

type SetMembershipPriceProposalDetails {
  newPrice: BigInt!
}

input SetMembershipPriceProposalDetailsCreateInput {
  newPrice: BigInt!
}

input SetMembershipPriceProposalDetailsUpdateInput {
  newPrice: BigInt
}

input SetMembershipPriceProposalDetailsWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  newPrice_eq: BigInt
  newPrice_gt: BigInt
  newPrice_gte: BigInt
  newPrice_lt: BigInt
  newPrice_lte: BigInt
  newPrice_in: [BigInt!]
  AND: [SetMembershipPriceProposalDetailsWhereInput!]
  OR: [SetMembershipPriceProposalDetailsWhereInput!]
}

input SetMembershipPriceProposalDetailsWhereUniqueInput {
  id: ID!
}

type SetReferralCutProposalDetails {
  newReferralCut: Int!
}

input SetReferralCutProposalDetailsCreateInput {
  newReferralCut: Float!
}

input SetReferralCutProposalDetailsUpdateInput {
  newReferralCut: Float
}

input SetReferralCutProposalDetailsWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  newReferralCut_eq: Int
  newReferralCut_gt: Int
  newReferralCut_gte: Int
  newReferralCut_lt: Int
  newReferralCut_lte: Int
  newReferralCut_in: [Int!]
  AND: [SetReferralCutProposalDetailsWhereInput!]
  OR: [SetReferralCutProposalDetailsWhereInput!]
}

input SetReferralCutProposalDetailsWhereUniqueInput {
  id: ID!
}

type SetWorkingGroupLeadRewardProposalDetails {
  lead: Worker
  newRewardPerBlock: BigInt!
}

input SetWorkingGroupLeadRewardProposalDetailsCreateInput {
  newRewardPerBlock: BigInt!
}

input SetWorkingGroupLeadRewardProposalDetailsUpdateInput {
  newRewardPerBlock: BigInt
}

input SetWorkingGroupLeadRewardProposalDetailsWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  newRewardPerBlock_eq: BigInt
  newRewardPerBlock_gt: BigInt
  newRewardPerBlock_gte: BigInt
  newRewardPerBlock_lt: BigInt
  newRewardPerBlock_lte: BigInt
  newRewardPerBlock_in: [BigInt!]
  AND: [SetWorkingGroupLeadRewardProposalDetailsWhereInput!]
  OR: [SetWorkingGroupLeadRewardProposalDetailsWhereInput!]
}

input SetWorkingGroupLeadRewardProposalDetailsWhereUniqueInput {
  id: ID!
}

type SignalProposalDetails {
  text: String!
}

input SignalProposalDetailsCreateInput {
  text: String!
}

input SignalProposalDetailsUpdateInput {
  text: String
}

input SignalProposalDetailsWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  text_eq: String
  text_contains: String
  text_startsWith: String
  text_endsWith: String
  text_in: [String!]
  AND: [SignalProposalDetailsWhereInput!]
  OR: [SignalProposalDetailsWhereInput!]
}

input SignalProposalDetailsWhereUniqueInput {
  id: ID!
}

type SlashWorkingGroupLeadProposalDetails {
  lead: Worker
  amount: BigInt!
}

input SlashWorkingGroupLeadProposalDetailsCreateInput {
  amount: BigInt!
}

input SlashWorkingGroupLeadProposalDetailsUpdateInput {
  amount: BigInt
}

input SlashWorkingGroupLeadProposalDetailsWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  amount_eq: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_lt: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  AND: [SlashWorkingGroupLeadProposalDetailsWhereInput!]
  OR: [SlashWorkingGroupLeadProposalDetailsWhereInput!]
}

input SlashWorkingGroupLeadProposalDetailsWhereUniqueInput {
  id: ID!
}

type StakeDecreasedEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  group: WorkingGroup!
  groupId: String!
  worker: Worker!
  workerId: String!
  amount: BigInt!
}

type StakeDecreasedEventConnection {
  totalCount: Int!
  edges: [StakeDecreasedEventEdge!]!
  pageInfo: PageInfo!
}

input StakeDecreasedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  group: ID!
  worker: ID!
  amount: BigInt!
}

type StakeDecreasedEventEdge {
  node: StakeDecreasedEvent!
  cursor: String!
}

enum StakeDecreasedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  group_ASC
  group_DESC
  worker_ASC
  worker_DESC
  amount_ASC
  amount_DESC
}

input StakeDecreasedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  group: ID
  worker: ID
  amount: BigInt
}

input StakeDecreasedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  group_eq: ID
  group_in: [ID!]
  worker_eq: ID
  worker_in: [ID!]
  amount_eq: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_lt: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  group: WorkingGroupWhereInput
  worker: WorkerWhereInput
  AND: [StakeDecreasedEventWhereInput!]
  OR: [StakeDecreasedEventWhereInput!]
}

input StakeDecreasedEventWhereUniqueInput {
  id: ID!
}

type StakeIncreasedEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  group: WorkingGroup!
  groupId: String!
  worker: Worker!
  workerId: String!
  amount: BigInt!
}

type StakeIncreasedEventConnection {
  totalCount: Int!
  edges: [StakeIncreasedEventEdge!]!
  pageInfo: PageInfo!
}

input StakeIncreasedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  group: ID!
  worker: ID!
  amount: BigInt!
}

type StakeIncreasedEventEdge {
  node: StakeIncreasedEvent!
  cursor: String!
}

enum StakeIncreasedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  group_ASC
  group_DESC
  worker_ASC
  worker_DESC
  amount_ASC
  amount_DESC
}

input StakeIncreasedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  group: ID
  worker: ID
  amount: BigInt
}

input StakeIncreasedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  group_eq: ID
  group_in: [ID!]
  worker_eq: ID
  worker_in: [ID!]
  amount_eq: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_lt: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  group: WorkingGroupWhereInput
  worker: WorkerWhereInput
  AND: [StakeIncreasedEventWhereInput!]
  OR: [StakeIncreasedEventWhereInput!]
}

input StakeIncreasedEventWhereUniqueInput {
  id: ID!
}

type StakeSlashedEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  group: WorkingGroup!
  groupId: String!
  worker: Worker!
  workerId: String!
  requestedAmount: BigInt!
  slashedAmount: BigInt!
  rationale: String
}

type StakeSlashedEventConnection {
  totalCount: Int!
  edges: [StakeSlashedEventEdge!]!
  pageInfo: PageInfo!
}

input StakeSlashedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  group: ID!
  worker: ID!
  requestedAmount: BigInt!
  slashedAmount: BigInt!
  rationale: String
}

type StakeSlashedEventEdge {
  node: StakeSlashedEvent!
  cursor: String!
}

enum StakeSlashedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  group_ASC
  group_DESC
  worker_ASC
  worker_DESC
  requestedAmount_ASC
  requestedAmount_DESC
  slashedAmount_ASC
  slashedAmount_DESC
  rationale_ASC
  rationale_DESC
}

input StakeSlashedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  group: ID
  worker: ID
  requestedAmount: BigInt
  slashedAmount: BigInt
  rationale: String
}

input StakeSlashedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  group_eq: ID
  group_in: [ID!]
  worker_eq: ID
  worker_in: [ID!]
  requestedAmount_eq: BigInt
  requestedAmount_gt: BigInt
  requestedAmount_gte: BigInt
  requestedAmount_lt: BigInt
  requestedAmount_lte: BigInt
  requestedAmount_in: [BigInt!]
  slashedAmount_eq: BigInt
  slashedAmount_gt: BigInt
  slashedAmount_gte: BigInt
  slashedAmount_lt: BigInt
  slashedAmount_lte: BigInt
  slashedAmount_in: [BigInt!]
  rationale_eq: String
  rationale_contains: String
  rationale_startsWith: String
  rationale_endsWith: String
  rationale_in: [String!]
  group: WorkingGroupWhereInput
  worker: WorkerWhereInput
  AND: [StakeSlashedEventWhereInput!]
  OR: [StakeSlashedEventWhereInput!]
}

input StakeSlashedEventWhereUniqueInput {
  id: ID!
}

type StakingAccountAddedEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  member: Membership!
  memberId: String!
  account: String!
}

type StakingAccountAddedEventConnection {
  totalCount: Int!
  edges: [StakingAccountAddedEventEdge!]!
  pageInfo: PageInfo!
}

input StakingAccountAddedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  member: ID!
  account: String!
}

type StakingAccountAddedEventEdge {
  node: StakingAccountAddedEvent!
  cursor: String!
}

enum StakingAccountAddedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  member_ASC
  member_DESC
  account_ASC
  account_DESC
}

input StakingAccountAddedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  member: ID
  account: String
}

input StakingAccountAddedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  member_eq: ID
  member_in: [ID!]
  account_eq: String
  account_contains: String
  account_startsWith: String
  account_endsWith: String
  account_in: [String!]
  member: MembershipWhereInput
  AND: [StakingAccountAddedEventWhereInput!]
  OR: [StakingAccountAddedEventWhereInput!]
}

input StakingAccountAddedEventWhereUniqueInput {
  id: ID!
}

type StakingAccountConfirmedEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  member: Membership!
  memberId: String!
  account: String!
}

type StakingAccountConfirmedEventConnection {
  totalCount: Int!
  edges: [StakingAccountConfirmedEventEdge!]!
  pageInfo: PageInfo!
}

input StakingAccountConfirmedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  member: ID!
  account: String!
}

type StakingAccountConfirmedEventEdge {
  node: StakingAccountConfirmedEvent!
  cursor: String!
}

enum StakingAccountConfirmedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  member_ASC
  member_DESC
  account_ASC
  account_DESC
}

input StakingAccountConfirmedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  member: ID
  account: String
}

input StakingAccountConfirmedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  member_eq: ID
  member_in: [ID!]
  account_eq: String
  account_contains: String
  account_startsWith: String
  account_endsWith: String
  account_in: [String!]
  member: MembershipWhereInput
  AND: [StakingAccountConfirmedEventWhereInput!]
  OR: [StakingAccountConfirmedEventWhereInput!]
}

input StakingAccountConfirmedEventWhereUniqueInput {
  id: ID!
}

type StakingAccountRemovedEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  member: Membership!
  memberId: String!
  account: String!
}

type StakingAccountRemovedEventConnection {
  totalCount: Int!
  edges: [StakingAccountRemovedEventEdge!]!
  pageInfo: PageInfo!
}

input StakingAccountRemovedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  member: ID!
  account: String!
}

type StakingAccountRemovedEventEdge {
  node: StakingAccountRemovedEvent!
  cursor: String!
}

enum StakingAccountRemovedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  member_ASC
  member_DESC
  account_ASC
  account_DESC
}

input StakingAccountRemovedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  member: ID
  account: String
}

input StakingAccountRemovedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  member_eq: ID
  member_in: [ID!]
  account_eq: String
  account_contains: String
  account_startsWith: String
  account_endsWith: String
  account_in: [String!]
  member: MembershipWhereInput
  AND: [StakingAccountRemovedEventWhereInput!]
  OR: [StakingAccountRemovedEventWhereInput!]
}

input StakingAccountRemovedEventWhereUniqueInput {
  id: ID!
}

type StandardDeleteResponse {
  id: ID!
}

type StatusTextChangedEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  group: WorkingGroup!
  groupId: String!
  metadata: String
  result: WorkingGroupMetadataActionResult!
  upcomingworkinggroupopeningcreatedInEvent: [UpcomingWorkingGroupOpening!]
  workinggroupmetadatasetInEvent: [WorkingGroupMetadata!]
}

type StatusTextChangedEventConnection {
  totalCount: Int!
  edges: [StatusTextChangedEventEdge!]!
  pageInfo: PageInfo!
}

input StatusTextChangedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  group: ID!
  metadata: String
  result: JSONObject!
}

type StatusTextChangedEventEdge {
  node: StatusTextChangedEvent!
  cursor: String!
}

enum StatusTextChangedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  group_ASC
  group_DESC
  metadata_ASC
  metadata_DESC
}

input StatusTextChangedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  group: ID
  metadata: String
  result: JSONObject
}

input StatusTextChangedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  group_eq: ID
  group_in: [ID!]
  metadata_eq: String
  metadata_contains: String
  metadata_startsWith: String
  metadata_endsWith: String
  metadata_in: [String!]
  result_json: JSONObject
  group: WorkingGroupWhereInput
  upcomingworkinggroupopeningcreatedInEvent_none: UpcomingWorkingGroupOpeningWhereInput
  upcomingworkinggroupopeningcreatedInEvent_some: UpcomingWorkingGroupOpeningWhereInput
  upcomingworkinggroupopeningcreatedInEvent_every: UpcomingWorkingGroupOpeningWhereInput
  workinggroupmetadatasetInEvent_none: WorkingGroupMetadataWhereInput
  workinggroupmetadatasetInEvent_some: WorkingGroupMetadataWhereInput
  workinggroupmetadatasetInEvent_every: WorkingGroupMetadataWhereInput
  AND: [StatusTextChangedEventWhereInput!]
  OR: [StatusTextChangedEventWhereInput!]
}

input StatusTextChangedEventWhereUniqueInput {
  id: ID!
}

type Subscription {
  stateSubscription: ProcessorState!
}

type TerminatedLeaderEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  group: WorkingGroup!
  groupId: String!
  worker: Worker!
  workerId: String!
  penalty: BigInt
  rationale: String
}

type TerminatedLeaderEventConnection {
  totalCount: Int!
  edges: [TerminatedLeaderEventEdge!]!
  pageInfo: PageInfo!
}

input TerminatedLeaderEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  group: ID!
  worker: ID!
  penalty: BigInt
  rationale: String
}

type TerminatedLeaderEventEdge {
  node: TerminatedLeaderEvent!
  cursor: String!
}

enum TerminatedLeaderEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  group_ASC
  group_DESC
  worker_ASC
  worker_DESC
  penalty_ASC
  penalty_DESC
  rationale_ASC
  rationale_DESC
}

input TerminatedLeaderEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  group: ID
  worker: ID
  penalty: BigInt
  rationale: String
}

input TerminatedLeaderEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  group_eq: ID
  group_in: [ID!]
  worker_eq: ID
  worker_in: [ID!]
  penalty_eq: BigInt
  penalty_gt: BigInt
  penalty_gte: BigInt
  penalty_lt: BigInt
  penalty_lte: BigInt
  penalty_in: [BigInt!]
  rationale_eq: String
  rationale_contains: String
  rationale_startsWith: String
  rationale_endsWith: String
  rationale_in: [String!]
  group: WorkingGroupWhereInput
  worker: WorkerWhereInput
  AND: [TerminatedLeaderEventWhereInput!]
  OR: [TerminatedLeaderEventWhereInput!]
}

input TerminatedLeaderEventWhereUniqueInput {
  id: ID!
}

type TerminatedWorkerEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  group: WorkingGroup!
  groupId: String!
  worker: Worker!
  workerId: String!
  penalty: BigInt
  rationale: String
}

type TerminatedWorkerEventConnection {
  totalCount: Int!
  edges: [TerminatedWorkerEventEdge!]!
  pageInfo: PageInfo!
}

input TerminatedWorkerEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  group: ID!
  worker: ID!
  penalty: BigInt
  rationale: String
}

type TerminatedWorkerEventEdge {
  node: TerminatedWorkerEvent!
  cursor: String!
}

enum TerminatedWorkerEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  group_ASC
  group_DESC
  worker_ASC
  worker_DESC
  penalty_ASC
  penalty_DESC
  rationale_ASC
  rationale_DESC
}

input TerminatedWorkerEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  group: ID
  worker: ID
  penalty: BigInt
  rationale: String
}

input TerminatedWorkerEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  group_eq: ID
  group_in: [ID!]
  worker_eq: ID
  worker_in: [ID!]
  penalty_eq: BigInt
  penalty_gt: BigInt
  penalty_gte: BigInt
  penalty_lt: BigInt
  penalty_lte: BigInt
  penalty_in: [BigInt!]
  rationale_eq: String
  rationale_contains: String
  rationale_startsWith: String
  rationale_endsWith: String
  rationale_in: [String!]
  group: WorkingGroupWhereInput
  worker: WorkerWhereInput
  AND: [TerminatedWorkerEventWhereInput!]
  OR: [TerminatedWorkerEventWhereInput!]
}

input TerminatedWorkerEventWhereUniqueInput {
  id: ID!
}

type TerminateWorkingGroupLeadProposalDetails {
  lead: Worker
  slashingAmount: BigInt
}

input TerminateWorkingGroupLeadProposalDetailsCreateInput {
  slashingAmount: BigInt
}

input TerminateWorkingGroupLeadProposalDetailsUpdateInput {
  slashingAmount: BigInt
}

input TerminateWorkingGroupLeadProposalDetailsWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  slashingAmount_eq: BigInt
  slashingAmount_gt: BigInt
  slashingAmount_gte: BigInt
  slashingAmount_lt: BigInt
  slashingAmount_lte: BigInt
  slashingAmount_in: [BigInt!]
  AND: [TerminateWorkingGroupLeadProposalDetailsWhereInput!]
  OR: [TerminateWorkingGroupLeadProposalDetailsWhereInput!]
}

input TerminateWorkingGroupLeadProposalDetailsWhereUniqueInput {
  id: ID!
}

type ThreadCreatedEvent implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  thread: ForumThread!
  threadId: String!
  title: String!
  text: String!
}

type ThreadCreatedEventConnection {
  totalCount: Int!
  edges: [ThreadCreatedEventEdge!]!
  pageInfo: PageInfo!
}

input ThreadCreatedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  thread: ID!
  title: String!
  text: String!
}

type ThreadCreatedEventEdge {
  node: ThreadCreatedEvent!
  cursor: String!
}

enum ThreadCreatedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  thread_ASC
  thread_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
}

input ThreadCreatedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  thread: ID
  title: String
  text: String
}

input ThreadCreatedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  thread_eq: ID
  thread_in: [ID!]
  title_eq: String
  title_contains: String
  title_startsWith: String
  title_endsWith: String
  title_in: [String!]
  text_eq: String
  text_contains: String
  text_startsWith: String
  text_endsWith: String
  text_in: [String!]
  thread: ForumThreadWhereInput
  AND: [ThreadCreatedEventWhereInput!]
  OR: [ThreadCreatedEventWhereInput!]
}

input ThreadCreatedEventWhereUniqueInput {
  id: ID!
}

type ThreadDeletedEvent implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  thread: ForumThread!
  threadId: String!
}

type ThreadDeletedEventConnection {
  totalCount: Int!
  edges: [ThreadDeletedEventEdge!]!
  pageInfo: PageInfo!
}

input ThreadDeletedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  thread: ID!
}

type ThreadDeletedEventEdge {
  node: ThreadDeletedEvent!
  cursor: String!
}

enum ThreadDeletedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  thread_ASC
  thread_DESC
}

input ThreadDeletedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  thread: ID
}

input ThreadDeletedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  thread_eq: ID
  thread_in: [ID!]
  thread: ForumThreadWhereInput
  AND: [ThreadDeletedEventWhereInput!]
  OR: [ThreadDeletedEventWhereInput!]
}

input ThreadDeletedEventWhereUniqueInput {
  id: ID!
}

type ThreadModeratedEvent implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  thread: ForumThread!
  threadId: String!
  rationale: String!
  actor: Worker!
  actorId: String!
}

type ThreadModeratedEventConnection {
  totalCount: Int!
  edges: [ThreadModeratedEventEdge!]!
  pageInfo: PageInfo!
}

input ThreadModeratedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  thread: ID!
  rationale: String!
  actor: ID!
}

type ThreadModeratedEventEdge {
  node: ThreadModeratedEvent!
  cursor: String!
}

enum ThreadModeratedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  thread_ASC
  thread_DESC
  rationale_ASC
  rationale_DESC
  actor_ASC
  actor_DESC
}

input ThreadModeratedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  thread: ID
  rationale: String
  actor: ID
}

input ThreadModeratedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  thread_eq: ID
  thread_in: [ID!]
  rationale_eq: String
  rationale_contains: String
  rationale_startsWith: String
  rationale_endsWith: String
  rationale_in: [String!]
  actor_eq: ID
  actor_in: [ID!]
  thread: ForumThreadWhereInput
  actor: WorkerWhereInput
  AND: [ThreadModeratedEventWhereInput!]
  OR: [ThreadModeratedEventWhereInput!]
}

input ThreadModeratedEventWhereUniqueInput {
  id: ID!
}

type ThreadMovedEvent implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  thread: ForumThread!
  threadId: String!
  oldCategory: ForumCategory!
  oldCategoryId: String!
  newCategory: ForumCategory!
  newCategoryId: String!
  actor: Worker!
  actorId: String!
}

type ThreadMovedEventConnection {
  totalCount: Int!
  edges: [ThreadMovedEventEdge!]!
  pageInfo: PageInfo!
}

input ThreadMovedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  thread: ID!
  oldCategory: ID!
  newCategory: ID!
  actor: ID!
}

type ThreadMovedEventEdge {
  node: ThreadMovedEvent!
  cursor: String!
}

enum ThreadMovedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  thread_ASC
  thread_DESC
  oldCategory_ASC
  oldCategory_DESC
  newCategory_ASC
  newCategory_DESC
  actor_ASC
  actor_DESC
}

input ThreadMovedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  thread: ID
  oldCategory: ID
  newCategory: ID
  actor: ID
}

input ThreadMovedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  thread_eq: ID
  thread_in: [ID!]
  oldCategory_eq: ID
  oldCategory_in: [ID!]
  newCategory_eq: ID
  newCategory_in: [ID!]
  actor_eq: ID
  actor_in: [ID!]
  thread: ForumThreadWhereInput
  oldCategory: ForumCategoryWhereInput
  newCategory: ForumCategoryWhereInput
  actor: WorkerWhereInput
  AND: [ThreadMovedEventWhereInput!]
  OR: [ThreadMovedEventWhereInput!]
}

input ThreadMovedEventWhereUniqueInput {
  id: ID!
}

type ThreadsByTitleFTSOutput {
  item: ThreadsByTitleSearchResult!
  rank: Float!
  isTypeOf: String!
  highlight: String!
}

union ThreadsByTitleSearchResult = ForumThread
union ThreadStatus =
  ThreadStatusActive
  | ThreadStatusLocked
  | ThreadStatusModerated
  | ThreadStatusRemoved
type ThreadStatusActive {
  phantom: Int
}

input ThreadStatusActiveCreateInput {
  phantom: Float
}

input ThreadStatusActiveUpdateInput {
  phantom: Float
}

input ThreadStatusActiveWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  phantom_eq: Int
  phantom_gt: Int
  phantom_gte: Int
  phantom_lt: Int
  phantom_lte: Int
  phantom_in: [Int!]
  AND: [ThreadStatusActiveWhereInput!]
  OR: [ThreadStatusActiveWhereInput!]
}

input ThreadStatusActiveWhereUniqueInput {
  id: ID!
}

type ThreadStatusLocked {
  threadDeletedEvent: ThreadDeletedEvent
}

type ThreadStatusModerated {
  threadModeratedEvent: ThreadModeratedEvent
}

type ThreadStatusRemoved {
  threadDeletedEvent: ThreadDeletedEvent
}

type ThreadTitleUpdatedEvent implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  thread: ForumThread!
  threadId: String!
  newTitle: String!
}

type ThreadTitleUpdatedEventConnection {
  totalCount: Int!
  edges: [ThreadTitleUpdatedEventEdge!]!
  pageInfo: PageInfo!
}

input ThreadTitleUpdatedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  thread: ID!
  newTitle: String!
}

type ThreadTitleUpdatedEventEdge {
  node: ThreadTitleUpdatedEvent!
  cursor: String!
}

enum ThreadTitleUpdatedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  thread_ASC
  thread_DESC
  newTitle_ASC
  newTitle_DESC
}

input ThreadTitleUpdatedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  thread: ID
  newTitle: String
}

input ThreadTitleUpdatedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  thread_eq: ID
  thread_in: [ID!]
  newTitle_eq: String
  newTitle_contains: String
  newTitle_startsWith: String
  newTitle_endsWith: String
  newTitle_in: [String!]
  thread: ForumThreadWhereInput
  AND: [ThreadTitleUpdatedEventWhereInput!]
  OR: [ThreadTitleUpdatedEventWhereInput!]
}

input ThreadTitleUpdatedEventWhereUniqueInput {
  id: ID!
}

type UnlockBlogPostProposalDetails {
  blogPost: String!
}

input UnlockBlogPostProposalDetailsCreateInput {
  blogPost: String!
}

input UnlockBlogPostProposalDetailsUpdateInput {
  blogPost: String
}

input UnlockBlogPostProposalDetailsWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  blogPost_eq: String
  blogPost_contains: String
  blogPost_startsWith: String
  blogPost_endsWith: String
  blogPost_in: [String!]
  AND: [UnlockBlogPostProposalDetailsWhereInput!]
  OR: [UnlockBlogPostProposalDetailsWhereInput!]
}

input UnlockBlogPostProposalDetailsWhereUniqueInput {
  id: ID!
}

type UpcomingOpeningAdded {
  upcomingOpeningId: String!
}

input UpcomingOpeningAddedCreateInput {
  upcomingOpeningId: String!
}

input UpcomingOpeningAddedUpdateInput {
  upcomingOpeningId: String
}

input UpcomingOpeningAddedWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  upcomingOpeningId_eq: String
  upcomingOpeningId_contains: String
  upcomingOpeningId_startsWith: String
  upcomingOpeningId_endsWith: String
  upcomingOpeningId_in: [String!]
  AND: [UpcomingOpeningAddedWhereInput!]
  OR: [UpcomingOpeningAddedWhereInput!]
}

input UpcomingOpeningAddedWhereUniqueInput {
  id: ID!
}

type UpcomingOpeningRemoved {
  upcomingOpeningId: String!
}

input UpcomingOpeningRemovedCreateInput {
  upcomingOpeningId: String!
}

input UpcomingOpeningRemovedUpdateInput {
  upcomingOpeningId: String
}

input UpcomingOpeningRemovedWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  upcomingOpeningId_eq: String
  upcomingOpeningId_contains: String
  upcomingOpeningId_startsWith: String
  upcomingOpeningId_endsWith: String
  upcomingOpeningId_in: [String!]
  AND: [UpcomingOpeningRemovedWhereInput!]
  OR: [UpcomingOpeningRemovedWhereInput!]
}

input UpcomingOpeningRemovedWhereUniqueInput {
  id: ID!
}

type UpcomingWorkingGroupOpening implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  createdInEvent: StatusTextChangedEvent!
  createdInEventId: String!
  group: WorkingGroup!
  groupId: String!
  expectedStart: DateTime
  stakeAmount: BigInt
  rewardPerBlock: BigInt
  metadata: WorkingGroupOpeningMetadata!
  metadataId: String!
}

type UpcomingWorkingGroupOpeningConnection {
  totalCount: Int!
  edges: [UpcomingWorkingGroupOpeningEdge!]!
  pageInfo: PageInfo!
}

input UpcomingWorkingGroupOpeningCreateInput {
  createdInEvent: ID!
  group: ID!
  expectedStart: DateTime
  stakeAmount: BigInt
  rewardPerBlock: BigInt
  metadata: ID!
}

type UpcomingWorkingGroupOpeningEdge {
  node: UpcomingWorkingGroupOpening!
  cursor: String!
}

enum UpcomingWorkingGroupOpeningOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  createdInEvent_ASC
  createdInEvent_DESC
  group_ASC
  group_DESC
  expectedStart_ASC
  expectedStart_DESC
  stakeAmount_ASC
  stakeAmount_DESC
  rewardPerBlock_ASC
  rewardPerBlock_DESC
  metadata_ASC
  metadata_DESC
}

input UpcomingWorkingGroupOpeningUpdateInput {
  createdInEvent: ID
  group: ID
  expectedStart: DateTime
  stakeAmount: BigInt
  rewardPerBlock: BigInt
  metadata: ID
}

input UpcomingWorkingGroupOpeningWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  createdInEvent_eq: ID
  createdInEvent_in: [ID!]
  group_eq: ID
  group_in: [ID!]
  expectedStart_eq: DateTime
  expectedStart_lt: DateTime
  expectedStart_lte: DateTime
  expectedStart_gt: DateTime
  expectedStart_gte: DateTime
  stakeAmount_eq: BigInt
  stakeAmount_gt: BigInt
  stakeAmount_gte: BigInt
  stakeAmount_lt: BigInt
  stakeAmount_lte: BigInt
  stakeAmount_in: [BigInt!]
  rewardPerBlock_eq: BigInt
  rewardPerBlock_gt: BigInt
  rewardPerBlock_gte: BigInt
  rewardPerBlock_lt: BigInt
  rewardPerBlock_lte: BigInt
  rewardPerBlock_in: [BigInt!]
  metadata_eq: ID
  metadata_in: [ID!]
  createdInEvent: StatusTextChangedEventWhereInput
  group: WorkingGroupWhereInput
  metadata: WorkingGroupOpeningMetadataWhereInput
  AND: [UpcomingWorkingGroupOpeningWhereInput!]
  OR: [UpcomingWorkingGroupOpeningWhereInput!]
}

input UpcomingWorkingGroupOpeningWhereUniqueInput {
  id: ID!
}

type UpdateWorkingGroupBudgetProposalDetails {
  amount: BigInt!
  group: WorkingGroup
}

input UpdateWorkingGroupBudgetProposalDetailsCreateInput {
  amount: BigInt!
}

input UpdateWorkingGroupBudgetProposalDetailsUpdateInput {
  amount: BigInt
}

input UpdateWorkingGroupBudgetProposalDetailsWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  amount_eq: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_lt: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  AND: [UpdateWorkingGroupBudgetProposalDetailsWhereInput!]
  OR: [UpdateWorkingGroupBudgetProposalDetailsWhereInput!]
}

input UpdateWorkingGroupBudgetProposalDetailsWhereUniqueInput {
  id: ID!
}

type VetoProposalDetails {
  proposal: Proposal
}

type VoteOnPollEvent implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  pollAlternative: ForumPollAlternative!
  pollAlternativeId: String!
  votingMember: Membership!
  votingMemberId: String!
}

type VoteOnPollEventConnection {
  totalCount: Int!
  edges: [VoteOnPollEventEdge!]!
  pageInfo: PageInfo!
}

input VoteOnPollEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  pollAlternative: ID!
  votingMember: ID!
}

type VoteOnPollEventEdge {
  node: VoteOnPollEvent!
  cursor: String!
}

enum VoteOnPollEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  pollAlternative_ASC
  pollAlternative_DESC
  votingMember_ASC
  votingMember_DESC
}

input VoteOnPollEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  pollAlternative: ID
  votingMember: ID
}

input VoteOnPollEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  pollAlternative_eq: ID
  pollAlternative_in: [ID!]
  votingMember_eq: ID
  votingMember_in: [ID!]
  pollAlternative: ForumPollAlternativeWhereInput
  votingMember: MembershipWhereInput
  AND: [VoteOnPollEventWhereInput!]
  OR: [VoteOnPollEventWhereInput!]
}

input VoteOnPollEventWhereUniqueInput {
  id: ID!
}

type Worker implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  runtimeId: Int!
  group: WorkingGroup!
  groupId: String!
  membership: Membership!
  membershipId: String!
  roleAccount: String!
  rewardAccount: String!
  stakeAccount: String!
  status: WorkerStatus!
  isLead: Boolean!
  stake: BigInt!
  rewardPerBlock: BigInt!
  missingRewardAmount: BigInt
  payouts: [RewardPaidEvent!]!
  slashes: [StakeSlashedEvent!]!
  entry: OpeningFilledEvent!
  entryId: String!
  application: WorkingGroupApplication!
  applicationId: String!
  storage: String
  managedForumCategories: [ForumCategory!]!
  categorydeletedeventactor: [CategoryDeletedEvent!]
  categorymembershipofmoderatorupdatedeventmoderator: [CategoryMembershipOfModeratorUpdatedEvent!]
  categorystickythreadupdateeventactor: [CategoryStickyThreadUpdateEvent!]
  categoryupdatedeventactor: [CategoryUpdatedEvent!]
  leaderseteventworker: [LeaderSetEvent!]
  leaderunseteventleader: [LeaderUnsetEvent!]
  memberverificationstatusupdatedeventworker: [MemberVerificationStatusUpdatedEvent!]
  newmissedrewardlevelreachedeventworker: [NewMissedRewardLevelReachedEvent!]
  postmoderatedeventactor: [PostModeratedEvent!]
  stakedecreasedeventworker: [StakeDecreasedEvent!]
  stakeincreasedeventworker: [StakeIncreasedEvent!]
  terminatedleadereventworker: [TerminatedLeaderEvent!]
  terminatedworkereventworker: [TerminatedWorkerEvent!]
  threadmoderatedeventactor: [ThreadModeratedEvent!]
  threadmovedeventactor: [ThreadMovedEvent!]
  workerexitedeventworker: [WorkerExitedEvent!]
  workerrewardaccountupdatedeventworker: [WorkerRewardAccountUpdatedEvent!]
  workerrewardamountupdatedeventworker: [WorkerRewardAmountUpdatedEvent!]
  workerroleaccountupdatedeventworker: [WorkerRoleAccountUpdatedEvent!]
  workerstartedleavingeventworker: [WorkerStartedLeavingEvent!]
  workinggroupleader: [WorkingGroup!]
}

type WorkerConnection {
  totalCount: Int!
  edges: [WorkerEdge!]!
  pageInfo: PageInfo!
}

input WorkerCreateInput {
  runtimeId: Float!
  group: ID!
  membership: ID!
  roleAccount: String!
  rewardAccount: String!
  stakeAccount: String!
  status: JSONObject!
  isLead: Boolean!
  stake: BigInt!
  rewardPerBlock: BigInt!
  missingRewardAmount: BigInt
  entry: ID!
  application: ID!
  storage: String
}

type WorkerEdge {
  node: Worker!
  cursor: String!
}

type WorkerExitedEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  group: WorkingGroup!
  groupId: String!
  worker: Worker!
  workerId: String!
}

type WorkerExitedEventConnection {
  totalCount: Int!
  edges: [WorkerExitedEventEdge!]!
  pageInfo: PageInfo!
}

input WorkerExitedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  group: ID!
  worker: ID!
}

type WorkerExitedEventEdge {
  node: WorkerExitedEvent!
  cursor: String!
}

enum WorkerExitedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  group_ASC
  group_DESC
  worker_ASC
  worker_DESC
}

input WorkerExitedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  group: ID
  worker: ID
}

input WorkerExitedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  group_eq: ID
  group_in: [ID!]
  worker_eq: ID
  worker_in: [ID!]
  group: WorkingGroupWhereInput
  worker: WorkerWhereInput
  AND: [WorkerExitedEventWhereInput!]
  OR: [WorkerExitedEventWhereInput!]
}

input WorkerExitedEventWhereUniqueInput {
  id: ID!
}

enum WorkerOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  runtimeId_ASC
  runtimeId_DESC
  group_ASC
  group_DESC
  membership_ASC
  membership_DESC
  roleAccount_ASC
  roleAccount_DESC
  rewardAccount_ASC
  rewardAccount_DESC
  stakeAccount_ASC
  stakeAccount_DESC
  isLead_ASC
  isLead_DESC
  stake_ASC
  stake_DESC
  rewardPerBlock_ASC
  rewardPerBlock_DESC
  missingRewardAmount_ASC
  missingRewardAmount_DESC
  entry_ASC
  entry_DESC
  application_ASC
  application_DESC
  storage_ASC
  storage_DESC
}

type WorkerRewardAccountUpdatedEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  group: WorkingGroup!
  groupId: String!
  worker: Worker!
  workerId: String!
  newRewardAccount: String!
}

type WorkerRewardAccountUpdatedEventConnection {
  totalCount: Int!
  edges: [WorkerRewardAccountUpdatedEventEdge!]!
  pageInfo: PageInfo!
}

input WorkerRewardAccountUpdatedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  group: ID!
  worker: ID!
  newRewardAccount: String!
}

type WorkerRewardAccountUpdatedEventEdge {
  node: WorkerRewardAccountUpdatedEvent!
  cursor: String!
}

enum WorkerRewardAccountUpdatedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  group_ASC
  group_DESC
  worker_ASC
  worker_DESC
  newRewardAccount_ASC
  newRewardAccount_DESC
}

input WorkerRewardAccountUpdatedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  group: ID
  worker: ID
  newRewardAccount: String
}

input WorkerRewardAccountUpdatedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  group_eq: ID
  group_in: [ID!]
  worker_eq: ID
  worker_in: [ID!]
  newRewardAccount_eq: String
  newRewardAccount_contains: String
  newRewardAccount_startsWith: String
  newRewardAccount_endsWith: String
  newRewardAccount_in: [String!]
  group: WorkingGroupWhereInput
  worker: WorkerWhereInput
  AND: [WorkerRewardAccountUpdatedEventWhereInput!]
  OR: [WorkerRewardAccountUpdatedEventWhereInput!]
}

input WorkerRewardAccountUpdatedEventWhereUniqueInput {
  id: ID!
}

type WorkerRewardAmountUpdatedEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  group: WorkingGroup!
  groupId: String!
  worker: Worker!
  workerId: String!
  newRewardPerBlock: BigInt!
}

type WorkerRewardAmountUpdatedEventConnection {
  totalCount: Int!
  edges: [WorkerRewardAmountUpdatedEventEdge!]!
  pageInfo: PageInfo!
}

input WorkerRewardAmountUpdatedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  group: ID!
  worker: ID!
  newRewardPerBlock: BigInt!
}

type WorkerRewardAmountUpdatedEventEdge {
  node: WorkerRewardAmountUpdatedEvent!
  cursor: String!
}

enum WorkerRewardAmountUpdatedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  group_ASC
  group_DESC
  worker_ASC
  worker_DESC
  newRewardPerBlock_ASC
  newRewardPerBlock_DESC
}

input WorkerRewardAmountUpdatedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  group: ID
  worker: ID
  newRewardPerBlock: BigInt
}

input WorkerRewardAmountUpdatedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  group_eq: ID
  group_in: [ID!]
  worker_eq: ID
  worker_in: [ID!]
  newRewardPerBlock_eq: BigInt
  newRewardPerBlock_gt: BigInt
  newRewardPerBlock_gte: BigInt
  newRewardPerBlock_lt: BigInt
  newRewardPerBlock_lte: BigInt
  newRewardPerBlock_in: [BigInt!]
  group: WorkingGroupWhereInput
  worker: WorkerWhereInput
  AND: [WorkerRewardAmountUpdatedEventWhereInput!]
  OR: [WorkerRewardAmountUpdatedEventWhereInput!]
}

input WorkerRewardAmountUpdatedEventWhereUniqueInput {
  id: ID!
}

type WorkerRoleAccountUpdatedEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  group: WorkingGroup!
  groupId: String!
  worker: Worker!
  workerId: String!
  newRoleAccount: String!
}

type WorkerRoleAccountUpdatedEventConnection {
  totalCount: Int!
  edges: [WorkerRoleAccountUpdatedEventEdge!]!
  pageInfo: PageInfo!
}

input WorkerRoleAccountUpdatedEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  group: ID!
  worker: ID!
  newRoleAccount: String!
}

type WorkerRoleAccountUpdatedEventEdge {
  node: WorkerRoleAccountUpdatedEvent!
  cursor: String!
}

enum WorkerRoleAccountUpdatedEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  group_ASC
  group_DESC
  worker_ASC
  worker_DESC
  newRoleAccount_ASC
  newRoleAccount_DESC
}

input WorkerRoleAccountUpdatedEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  group: ID
  worker: ID
  newRoleAccount: String
}

input WorkerRoleAccountUpdatedEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  group_eq: ID
  group_in: [ID!]
  worker_eq: ID
  worker_in: [ID!]
  newRoleAccount_eq: String
  newRoleAccount_contains: String
  newRoleAccount_startsWith: String
  newRoleAccount_endsWith: String
  newRoleAccount_in: [String!]
  group: WorkingGroupWhereInput
  worker: WorkerWhereInput
  AND: [WorkerRoleAccountUpdatedEventWhereInput!]
  OR: [WorkerRoleAccountUpdatedEventWhereInput!]
}

input WorkerRoleAccountUpdatedEventWhereUniqueInput {
  id: ID!
}

type WorkerStartedLeavingEvent implements Event & BaseGraphQLObject {
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  type: EventTypeOptions
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  group: WorkingGroup!
  groupId: String!
  worker: Worker!
  workerId: String!
  rationale: String
}

type WorkerStartedLeavingEventConnection {
  totalCount: Int!
  edges: [WorkerStartedLeavingEventEdge!]!
  pageInfo: PageInfo!
}

input WorkerStartedLeavingEventCreateInput {
  inExtrinsic: String
  inBlock: Float!
  network: Network!
  indexInBlock: Float!
  group: ID!
  worker: ID!
  rationale: String
}

type WorkerStartedLeavingEventEdge {
  node: WorkerStartedLeavingEvent!
  cursor: String!
}

enum WorkerStartedLeavingEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  inExtrinsic_ASC
  inExtrinsic_DESC
  inBlock_ASC
  inBlock_DESC
  network_ASC
  network_DESC
  indexInBlock_ASC
  indexInBlock_DESC
  group_ASC
  group_DESC
  worker_ASC
  worker_DESC
  rationale_ASC
  rationale_DESC
}

input WorkerStartedLeavingEventUpdateInput {
  inExtrinsic: String
  inBlock: Float
  network: Network
  indexInBlock: Float
  group: ID
  worker: ID
  rationale: String
}

input WorkerStartedLeavingEventWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  inExtrinsic_eq: String
  inExtrinsic_contains: String
  inExtrinsic_startsWith: String
  inExtrinsic_endsWith: String
  inExtrinsic_in: [String!]
  inBlock_eq: Int
  inBlock_gt: Int
  inBlock_gte: Int
  inBlock_lt: Int
  inBlock_lte: Int
  inBlock_in: [Int!]
  network_eq: Network
  network_in: [Network!]
  indexInBlock_eq: Int
  indexInBlock_gt: Int
  indexInBlock_gte: Int
  indexInBlock_lt: Int
  indexInBlock_lte: Int
  indexInBlock_in: [Int!]
  group_eq: ID
  group_in: [ID!]
  worker_eq: ID
  worker_in: [ID!]
  rationale_eq: String
  rationale_contains: String
  rationale_startsWith: String
  rationale_endsWith: String
  rationale_in: [String!]
  group: WorkingGroupWhereInput
  worker: WorkerWhereInput
  AND: [WorkerStartedLeavingEventWhereInput!]
  OR: [WorkerStartedLeavingEventWhereInput!]
}

input WorkerStartedLeavingEventWhereUniqueInput {
  id: ID!
}

union WorkerStatus =
  WorkerStatusActive
  | WorkerStatusLeft
  | WorkerStatusTerminated
type WorkerStatusActive {
  phantom: Int
}

input WorkerStatusActiveCreateInput {
  phantom: Float
}

input WorkerStatusActiveUpdateInput {
  phantom: Float
}

input WorkerStatusActiveWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  phantom_eq: Int
  phantom_gt: Int
  phantom_gte: Int
  phantom_lt: Int
  phantom_lte: Int
  phantom_in: [Int!]
  AND: [WorkerStatusActiveWhereInput!]
  OR: [WorkerStatusActiveWhereInput!]
}

input WorkerStatusActiveWhereUniqueInput {
  id: ID!
}

type WorkerStatusLeft {
  workerStartedLeavingEvent: WorkerStartedLeavingEvent
  workerExitedEvent: WorkerExitedEvent
}

type WorkerStatusTerminated {
  terminatedWorkerEvent: TerminatedWorkerEvent
}

input WorkerUpdateInput {
  runtimeId: Float
  group: ID
  membership: ID
  roleAccount: String
  rewardAccount: String
  stakeAccount: String
  status: JSONObject
  isLead: Boolean
  stake: BigInt
  rewardPerBlock: BigInt
  missingRewardAmount: BigInt
  entry: ID
  application: ID
  storage: String
}

input WorkerWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  runtimeId_eq: Int
  runtimeId_gt: Int
  runtimeId_gte: Int
  runtimeId_lt: Int
  runtimeId_lte: Int
  runtimeId_in: [Int!]
  group_eq: ID
  group_in: [ID!]
  membership_eq: ID
  membership_in: [ID!]
  roleAccount_eq: String
  roleAccount_contains: String
  roleAccount_startsWith: String
  roleAccount_endsWith: String
  roleAccount_in: [String!]
  rewardAccount_eq: String
  rewardAccount_contains: String
  rewardAccount_startsWith: String
  rewardAccount_endsWith: String
  rewardAccount_in: [String!]
  stakeAccount_eq: String
  stakeAccount_contains: String
  stakeAccount_startsWith: String
  stakeAccount_endsWith: String
  stakeAccount_in: [String!]
  status_json: JSONObject
  isLead_eq: Boolean
  isLead_in: [Boolean!]
  stake_eq: BigInt
  stake_gt: BigInt
  stake_gte: BigInt
  stake_lt: BigInt
  stake_lte: BigInt
  stake_in: [BigInt!]
  rewardPerBlock_eq: BigInt
  rewardPerBlock_gt: BigInt
  rewardPerBlock_gte: BigInt
  rewardPerBlock_lt: BigInt
  rewardPerBlock_lte: BigInt
  rewardPerBlock_in: [BigInt!]
  missingRewardAmount_eq: BigInt
  missingRewardAmount_gt: BigInt
  missingRewardAmount_gte: BigInt
  missingRewardAmount_lt: BigInt
  missingRewardAmount_lte: BigInt
  missingRewardAmount_in: [BigInt!]
  entry_eq: ID
  entry_in: [ID!]
  application_eq: ID
  application_in: [ID!]
  storage_eq: String
  storage_contains: String
  storage_startsWith: String
  storage_endsWith: String
  storage_in: [String!]
  group: WorkingGroupWhereInput
  membership: MembershipWhereInput
  payouts_none: RewardPaidEventWhereInput
  payouts_some: RewardPaidEventWhereInput
  payouts_every: RewardPaidEventWhereInput
  slashes_none: StakeSlashedEventWhereInput
  slashes_some: StakeSlashedEventWhereInput
  slashes_every: StakeSlashedEventWhereInput
  entry: OpeningFilledEventWhereInput
  application: WorkingGroupApplicationWhereInput
  managedForumCategories_none: ForumCategoryWhereInput
  managedForumCategories_some: ForumCategoryWhereInput
  managedForumCategories_every: ForumCategoryWhereInput
  categorydeletedeventactor_none: CategoryDeletedEventWhereInput
  categorydeletedeventactor_some: CategoryDeletedEventWhereInput
  categorydeletedeventactor_every: CategoryDeletedEventWhereInput
  categorymembershipofmoderatorupdatedeventmoderator_none: CategoryMembershipOfModeratorUpdatedEventWhereInput
  categorymembershipofmoderatorupdatedeventmoderator_some: CategoryMembershipOfModeratorUpdatedEventWhereInput
  categorymembershipofmoderatorupdatedeventmoderator_every: CategoryMembershipOfModeratorUpdatedEventWhereInput
  categorystickythreadupdateeventactor_none: CategoryStickyThreadUpdateEventWhereInput
  categorystickythreadupdateeventactor_some: CategoryStickyThreadUpdateEventWhereInput
  categorystickythreadupdateeventactor_every: CategoryStickyThreadUpdateEventWhereInput
  categoryupdatedeventactor_none: CategoryUpdatedEventWhereInput
  categoryupdatedeventactor_some: CategoryUpdatedEventWhereInput
  categoryupdatedeventactor_every: CategoryUpdatedEventWhereInput
  leaderseteventworker_none: LeaderSetEventWhereInput
  leaderseteventworker_some: LeaderSetEventWhereInput
  leaderseteventworker_every: LeaderSetEventWhereInput
  leaderunseteventleader_none: LeaderUnsetEventWhereInput
  leaderunseteventleader_some: LeaderUnsetEventWhereInput
  leaderunseteventleader_every: LeaderUnsetEventWhereInput
  memberverificationstatusupdatedeventworker_none: MemberVerificationStatusUpdatedEventWhereInput
  memberverificationstatusupdatedeventworker_some: MemberVerificationStatusUpdatedEventWhereInput
  memberverificationstatusupdatedeventworker_every: MemberVerificationStatusUpdatedEventWhereInput
  newmissedrewardlevelreachedeventworker_none: NewMissedRewardLevelReachedEventWhereInput
  newmissedrewardlevelreachedeventworker_some: NewMissedRewardLevelReachedEventWhereInput
  newmissedrewardlevelreachedeventworker_every: NewMissedRewardLevelReachedEventWhereInput
  postmoderatedeventactor_none: PostModeratedEventWhereInput
  postmoderatedeventactor_some: PostModeratedEventWhereInput
  postmoderatedeventactor_every: PostModeratedEventWhereInput
  stakedecreasedeventworker_none: StakeDecreasedEventWhereInput
  stakedecreasedeventworker_some: StakeDecreasedEventWhereInput
  stakedecreasedeventworker_every: StakeDecreasedEventWhereInput
  stakeincreasedeventworker_none: StakeIncreasedEventWhereInput
  stakeincreasedeventworker_some: StakeIncreasedEventWhereInput
  stakeincreasedeventworker_every: StakeIncreasedEventWhereInput
  terminatedleadereventworker_none: TerminatedLeaderEventWhereInput
  terminatedleadereventworker_some: TerminatedLeaderEventWhereInput
  terminatedleadereventworker_every: TerminatedLeaderEventWhereInput
  terminatedworkereventworker_none: TerminatedWorkerEventWhereInput
  terminatedworkereventworker_some: TerminatedWorkerEventWhereInput
  terminatedworkereventworker_every: TerminatedWorkerEventWhereInput
  threadmoderatedeventactor_none: ThreadModeratedEventWhereInput
  threadmoderatedeventactor_some: ThreadModeratedEventWhereInput
  threadmoderatedeventactor_every: ThreadModeratedEventWhereInput
  threadmovedeventactor_none: ThreadMovedEventWhereInput
  threadmovedeventactor_some: ThreadMovedEventWhereInput
  threadmovedeventactor_every: ThreadMovedEventWhereInput
  workerexitedeventworker_none: WorkerExitedEventWhereInput
  workerexitedeventworker_some: WorkerExitedEventWhereInput
  workerexitedeventworker_every: WorkerExitedEventWhereInput
  workerrewardaccountupdatedeventworker_none: WorkerRewardAccountUpdatedEventWhereInput
  workerrewardaccountupdatedeventworker_some: WorkerRewardAccountUpdatedEventWhereInput
  workerrewardaccountupdatedeventworker_every: WorkerRewardAccountUpdatedEventWhereInput
  workerrewardamountupdatedeventworker_none: WorkerRewardAmountUpdatedEventWhereInput
  workerrewardamountupdatedeventworker_some: WorkerRewardAmountUpdatedEventWhereInput
  workerrewardamountupdatedeventworker_every: WorkerRewardAmountUpdatedEventWhereInput
  workerroleaccountupdatedeventworker_none: WorkerRoleAccountUpdatedEventWhereInput
  workerroleaccountupdatedeventworker_some: WorkerRoleAccountUpdatedEventWhereInput
  workerroleaccountupdatedeventworker_every: WorkerRoleAccountUpdatedEventWhereInput
  workerstartedleavingeventworker_none: WorkerStartedLeavingEventWhereInput
  workerstartedleavingeventworker_some: WorkerStartedLeavingEventWhereInput
  workerstartedleavingeventworker_every: WorkerStartedLeavingEventWhereInput
  workinggroupleader_none: WorkingGroupWhereInput
  workinggroupleader_some: WorkingGroupWhereInput
  workinggroupleader_every: WorkingGroupWhereInput
  AND: [WorkerWhereInput!]
  OR: [WorkerWhereInput!]
}

input WorkerWhereUniqueInput {
  id: ID!
}

type WorkingGroup implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  name: String!
  metadata: WorkingGroupMetadata
  metadataId: String
  leader: Worker
  leaderId: String
  workers: [Worker!]!
  openings: [WorkingGroupOpening!]!
  budget: BigInt!
  applicationwithdrawneventgroup: [ApplicationWithdrawnEvent!]
  appliedonopeningeventgroup: [AppliedOnOpeningEvent!]
  budgetseteventgroup: [BudgetSetEvent!]
  budgetspendingeventgroup: [BudgetSpendingEvent!]
  leaderseteventgroup: [LeaderSetEvent!]
  leaderunseteventgroup: [LeaderUnsetEvent!]
  newmissedrewardlevelreachedeventgroup: [NewMissedRewardLevelReachedEvent!]
  openingaddedeventgroup: [OpeningAddedEvent!]
  openingcanceledeventgroup: [OpeningCanceledEvent!]
  openingfilledeventgroup: [OpeningFilledEvent!]
  rewardpaideventgroup: [RewardPaidEvent!]
  stakedecreasedeventgroup: [StakeDecreasedEvent!]
  stakeincreasedeventgroup: [StakeIncreasedEvent!]
  stakeslashedeventgroup: [StakeSlashedEvent!]
  statustextchangedeventgroup: [StatusTextChangedEvent!]
  terminatedleadereventgroup: [TerminatedLeaderEvent!]
  terminatedworkereventgroup: [TerminatedWorkerEvent!]
  upcomingworkinggroupopeninggroup: [UpcomingWorkingGroupOpening!]
  workerexitedeventgroup: [WorkerExitedEvent!]
  workerrewardaccountupdatedeventgroup: [WorkerRewardAccountUpdatedEvent!]
  workerrewardamountupdatedeventgroup: [WorkerRewardAmountUpdatedEvent!]
  workerroleaccountupdatedeventgroup: [WorkerRoleAccountUpdatedEvent!]
  workerstartedleavingeventgroup: [WorkerStartedLeavingEvent!]
  workinggroupmetadatagroup: [WorkingGroupMetadata!]
}

type WorkingGroupApplication implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  runtimeId: Int!
  opening: WorkingGroupOpening!
  openingId: String!
  applicant: Membership!
  applicantId: String!
  stake: BigInt!
  roleAccount: String!
  rewardAccount: String!
  stakingAccount: String!
  answers: [ApplicationFormQuestionAnswer!]!
  status: WorkingGroupApplicationStatus!
  createdInEvent: AppliedOnOpeningEvent!
  applicationwithdrawneventapplication: [ApplicationWithdrawnEvent!]
  workerapplication: [Worker!]
}

type WorkingGroupApplicationConnection {
  totalCount: Int!
  edges: [WorkingGroupApplicationEdge!]!
  pageInfo: PageInfo!
}

input WorkingGroupApplicationCreateInput {
  runtimeId: Float!
  opening: ID!
  applicant: ID!
  stake: BigInt!
  roleAccount: String!
  rewardAccount: String!
  stakingAccount: String!
  status: JSONObject!
}

type WorkingGroupApplicationEdge {
  node: WorkingGroupApplication!
  cursor: String!
}

enum WorkingGroupApplicationOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  runtimeId_ASC
  runtimeId_DESC
  opening_ASC
  opening_DESC
  applicant_ASC
  applicant_DESC
  stake_ASC
  stake_DESC
  roleAccount_ASC
  roleAccount_DESC
  rewardAccount_ASC
  rewardAccount_DESC
  stakingAccount_ASC
  stakingAccount_DESC
}

union WorkingGroupApplicationStatus =
  ApplicationStatusPending
  | ApplicationStatusAccepted
  | ApplicationStatusRejected
  | ApplicationStatusWithdrawn
  | ApplicationStatusCancelled
input WorkingGroupApplicationUpdateInput {
  runtimeId: Float
  opening: ID
  applicant: ID
  stake: BigInt
  roleAccount: String
  rewardAccount: String
  stakingAccount: String
  status: JSONObject
}

input WorkingGroupApplicationWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  runtimeId_eq: Int
  runtimeId_gt: Int
  runtimeId_gte: Int
  runtimeId_lt: Int
  runtimeId_lte: Int
  runtimeId_in: [Int!]
  opening_eq: ID
  opening_in: [ID!]
  applicant_eq: ID
  applicant_in: [ID!]
  stake_eq: BigInt
  stake_gt: BigInt
  stake_gte: BigInt
  stake_lt: BigInt
  stake_lte: BigInt
  stake_in: [BigInt!]
  roleAccount_eq: String
  roleAccount_contains: String
  roleAccount_startsWith: String
  roleAccount_endsWith: String
  roleAccount_in: [String!]
  rewardAccount_eq: String
  rewardAccount_contains: String
  rewardAccount_startsWith: String
  rewardAccount_endsWith: String
  rewardAccount_in: [String!]
  stakingAccount_eq: String
  stakingAccount_contains: String
  stakingAccount_startsWith: String
  stakingAccount_endsWith: String
  stakingAccount_in: [String!]
  status_json: JSONObject
  opening: WorkingGroupOpeningWhereInput
  applicant: MembershipWhereInput
  answers_none: ApplicationFormQuestionAnswerWhereInput
  answers_some: ApplicationFormQuestionAnswerWhereInput
  answers_every: ApplicationFormQuestionAnswerWhereInput
  createdInEvent: AppliedOnOpeningEventWhereInput
  applicationwithdrawneventapplication_none: ApplicationWithdrawnEventWhereInput
  applicationwithdrawneventapplication_some: ApplicationWithdrawnEventWhereInput
  applicationwithdrawneventapplication_every: ApplicationWithdrawnEventWhereInput
  workerapplication_none: WorkerWhereInput
  workerapplication_some: WorkerWhereInput
  workerapplication_every: WorkerWhereInput
  AND: [WorkingGroupApplicationWhereInput!]
  OR: [WorkingGroupApplicationWhereInput!]
}

input WorkingGroupApplicationWhereUniqueInput {
  id: ID!
}

type WorkingGroupConnection {
  totalCount: Int!
  edges: [WorkingGroupEdge!]!
  pageInfo: PageInfo!
}

input WorkingGroupCreateInput {
  name: String!
  metadata: ID
  leader: ID
  budget: BigInt!
}

type WorkingGroupEdge {
  node: WorkingGroup!
  cursor: String!
}

type WorkingGroupMetadata implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  status: String
  statusMessage: String
  about: String
  description: String
  setInEvent: StatusTextChangedEvent!
  setInEventId: String!
  group: WorkingGroup!
  groupId: String!
  workinggroupmetadata: [WorkingGroup!]
}

union WorkingGroupMetadataActionResult =
  UpcomingOpeningAdded
  | UpcomingOpeningRemoved
  | WorkingGroupMetadataSet
  | InvalidActionMetadata
type WorkingGroupMetadataConnection {
  totalCount: Int!
  edges: [WorkingGroupMetadataEdge!]!
  pageInfo: PageInfo!
}

input WorkingGroupMetadataCreateInput {
  status: String
  statusMessage: String
  about: String
  description: String
  setInEvent: ID!
  group: ID!
}

type WorkingGroupMetadataEdge {
  node: WorkingGroupMetadata!
  cursor: String!
}

enum WorkingGroupMetadataOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  status_ASC
  status_DESC
  statusMessage_ASC
  statusMessage_DESC
  about_ASC
  about_DESC
  description_ASC
  description_DESC
  setInEvent_ASC
  setInEvent_DESC
  group_ASC
  group_DESC
}

type WorkingGroupMetadataSet {
  metadata: WorkingGroupMetadata
}

input WorkingGroupMetadataUpdateInput {
  status: String
  statusMessage: String
  about: String
  description: String
  setInEvent: ID
  group: ID
}

input WorkingGroupMetadataWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  status_eq: String
  status_contains: String
  status_startsWith: String
  status_endsWith: String
  status_in: [String!]
  statusMessage_eq: String
  statusMessage_contains: String
  statusMessage_startsWith: String
  statusMessage_endsWith: String
  statusMessage_in: [String!]
  about_eq: String
  about_contains: String
  about_startsWith: String
  about_endsWith: String
  about_in: [String!]
  description_eq: String
  description_contains: String
  description_startsWith: String
  description_endsWith: String
  description_in: [String!]
  setInEvent_eq: ID
  setInEvent_in: [ID!]
  group_eq: ID
  group_in: [ID!]
  setInEvent: StatusTextChangedEventWhereInput
  group: WorkingGroupWhereInput
  workinggroupmetadata_none: WorkingGroupWhereInput
  workinggroupmetadata_some: WorkingGroupWhereInput
  workinggroupmetadata_every: WorkingGroupWhereInput
  AND: [WorkingGroupMetadataWhereInput!]
  OR: [WorkingGroupMetadataWhereInput!]
}

input WorkingGroupMetadataWhereUniqueInput {
  id: ID!
}

type WorkingGroupOpening implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  runtimeId: Int!
  group: WorkingGroup!
  groupId: String!
  applications: [WorkingGroupApplication!]!
  type: WorkingGroupOpeningType!
  status: WorkingGroupOpeningStatus!
  metadata: WorkingGroupOpeningMetadata!
  metadataId: String!
  stakeAmount: BigInt!
  unstakingPeriod: Int!
  rewardPerBlock: BigInt!
  createdInEvent: OpeningAddedEvent!
  appliedonopeningeventopening: [AppliedOnOpeningEvent!]
  openingcanceledeventopening: [OpeningCanceledEvent!]
  openingfilledeventopening: [OpeningFilledEvent!]
}

type WorkingGroupOpeningConnection {
  totalCount: Int!
  edges: [WorkingGroupOpeningEdge!]!
  pageInfo: PageInfo!
}

input WorkingGroupOpeningCreateInput {
  createdAt: DateTime!
  runtimeId: Float!
  group: ID!
  type: WorkingGroupOpeningType!
  status: JSONObject!
  metadata: ID!
  stakeAmount: BigInt!
  unstakingPeriod: Float!
  rewardPerBlock: BigInt!
}

type WorkingGroupOpeningEdge {
  node: WorkingGroupOpening!
  cursor: String!
}

type WorkingGroupOpeningMetadata implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  originallyValid: Boolean!
  shortDescription: String
  description: String
  hiringLimit: Int
  expectedEnding: DateTime
  applicationDetails: String
  applicationFormQuestions: [ApplicationFormQuestion!]!
  upcomingworkinggroupopeningmetadata: [UpcomingWorkingGroupOpening!]
  workinggroupopeningmetadata: [WorkingGroupOpening!]
}

type WorkingGroupOpeningMetadataConnection {
  totalCount: Int!
  edges: [WorkingGroupOpeningMetadataEdge!]!
  pageInfo: PageInfo!
}

input WorkingGroupOpeningMetadataCreateInput {
  originallyValid: Boolean!
  shortDescription: String
  description: String
  hiringLimit: Float
  expectedEnding: DateTime
  applicationDetails: String
}

type WorkingGroupOpeningMetadataEdge {
  node: WorkingGroupOpeningMetadata!
  cursor: String!
}

enum WorkingGroupOpeningMetadataOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  originallyValid_ASC
  originallyValid_DESC
  shortDescription_ASC
  shortDescription_DESC
  description_ASC
  description_DESC
  hiringLimit_ASC
  hiringLimit_DESC
  expectedEnding_ASC
  expectedEnding_DESC
  applicationDetails_ASC
  applicationDetails_DESC
}

input WorkingGroupOpeningMetadataUpdateInput {
  originallyValid: Boolean
  shortDescription: String
  description: String
  hiringLimit: Float
  expectedEnding: DateTime
  applicationDetails: String
}

input WorkingGroupOpeningMetadataWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  originallyValid_eq: Boolean
  originallyValid_in: [Boolean!]
  shortDescription_eq: String
  shortDescription_contains: String
  shortDescription_startsWith: String
  shortDescription_endsWith: String
  shortDescription_in: [String!]
  description_eq: String
  description_contains: String
  description_startsWith: String
  description_endsWith: String
  description_in: [String!]
  hiringLimit_eq: Int
  hiringLimit_gt: Int
  hiringLimit_gte: Int
  hiringLimit_lt: Int
  hiringLimit_lte: Int
  hiringLimit_in: [Int!]
  expectedEnding_eq: DateTime
  expectedEnding_lt: DateTime
  expectedEnding_lte: DateTime
  expectedEnding_gt: DateTime
  expectedEnding_gte: DateTime
  applicationDetails_eq: String
  applicationDetails_contains: String
  applicationDetails_startsWith: String
  applicationDetails_endsWith: String
  applicationDetails_in: [String!]
  applicationFormQuestions_none: ApplicationFormQuestionWhereInput
  applicationFormQuestions_some: ApplicationFormQuestionWhereInput
  applicationFormQuestions_every: ApplicationFormQuestionWhereInput
  upcomingworkinggroupopeningmetadata_none: UpcomingWorkingGroupOpeningWhereInput
  upcomingworkinggroupopeningmetadata_some: UpcomingWorkingGroupOpeningWhereInput
  upcomingworkinggroupopeningmetadata_every: UpcomingWorkingGroupOpeningWhereInput
  workinggroupopeningmetadata_none: WorkingGroupOpeningWhereInput
  workinggroupopeningmetadata_some: WorkingGroupOpeningWhereInput
  workinggroupopeningmetadata_every: WorkingGroupOpeningWhereInput
  AND: [WorkingGroupOpeningMetadataWhereInput!]
  OR: [WorkingGroupOpeningMetadataWhereInput!]
}

input WorkingGroupOpeningMetadataWhereUniqueInput {
  id: ID!
}

enum WorkingGroupOpeningOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  runtimeId_ASC
  runtimeId_DESC
  group_ASC
  group_DESC
  type_ASC
  type_DESC
  metadata_ASC
  metadata_DESC
  stakeAmount_ASC
  stakeAmount_DESC
  unstakingPeriod_ASC
  unstakingPeriod_DESC
  rewardPerBlock_ASC
  rewardPerBlock_DESC
}

union WorkingGroupOpeningStatus =
  OpeningStatusOpen
  | OpeningStatusFilled
  | OpeningStatusCancelled
enum WorkingGroupOpeningType {
  REGULAR
  LEADER
}

input WorkingGroupOpeningUpdateInput {
  createdAt: DateTime
  runtimeId: Float
  group: ID
  type: WorkingGroupOpeningType
  status: JSONObject
  metadata: ID
  stakeAmount: BigInt
  unstakingPeriod: Float
  rewardPerBlock: BigInt
}

input WorkingGroupOpeningWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  runtimeId_eq: Int
  runtimeId_gt: Int
  runtimeId_gte: Int
  runtimeId_lt: Int
  runtimeId_lte: Int
  runtimeId_in: [Int!]
  group_eq: ID
  group_in: [ID!]
  type_eq: WorkingGroupOpeningType
  type_in: [WorkingGroupOpeningType!]
  status_json: JSONObject
  metadata_eq: ID
  metadata_in: [ID!]
  stakeAmount_eq: BigInt
  stakeAmount_gt: BigInt
  stakeAmount_gte: BigInt
  stakeAmount_lt: BigInt
  stakeAmount_lte: BigInt
  stakeAmount_in: [BigInt!]
  unstakingPeriod_eq: Int
  unstakingPeriod_gt: Int
  unstakingPeriod_gte: Int
  unstakingPeriod_lt: Int
  unstakingPeriod_lte: Int
  unstakingPeriod_in: [Int!]
  rewardPerBlock_eq: BigInt
  rewardPerBlock_gt: BigInt
  rewardPerBlock_gte: BigInt
  rewardPerBlock_lt: BigInt
  rewardPerBlock_lte: BigInt
  rewardPerBlock_in: [BigInt!]
  group: WorkingGroupWhereInput
  applications_none: WorkingGroupApplicationWhereInput
  applications_some: WorkingGroupApplicationWhereInput
  applications_every: WorkingGroupApplicationWhereInput
  metadata: WorkingGroupOpeningMetadataWhereInput
  createdInEvent: OpeningAddedEventWhereInput
  appliedonopeningeventopening_none: AppliedOnOpeningEventWhereInput
  appliedonopeningeventopening_some: AppliedOnOpeningEventWhereInput
  appliedonopeningeventopening_every: AppliedOnOpeningEventWhereInput
  openingcanceledeventopening_none: OpeningCanceledEventWhereInput
  openingcanceledeventopening_some: OpeningCanceledEventWhereInput
  openingcanceledeventopening_every: OpeningCanceledEventWhereInput
  openingfilledeventopening_none: OpeningFilledEventWhereInput
  openingfilledeventopening_some: OpeningFilledEventWhereInput
  openingfilledeventopening_every: OpeningFilledEventWhereInput
  AND: [WorkingGroupOpeningWhereInput!]
  OR: [WorkingGroupOpeningWhereInput!]
}

input WorkingGroupOpeningWhereUniqueInput {
  id: ID!
}

enum WorkingGroupOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  name_ASC
  name_DESC
  metadata_ASC
  metadata_DESC
  leader_ASC
  leader_DESC
  budget_ASC
  budget_DESC
}

input WorkingGroupUpdateInput {
  name: String
  metadata: ID
  leader: ID
  budget: BigInt
}

input WorkingGroupWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  name_eq: String
  name_contains: String
  name_startsWith: String
  name_endsWith: String
  name_in: [String!]
  metadata_eq: ID
  metadata_in: [ID!]
  leader_eq: ID
  leader_in: [ID!]
  budget_eq: BigInt
  budget_gt: BigInt
  budget_gte: BigInt
  budget_lt: BigInt
  budget_lte: BigInt
  budget_in: [BigInt!]
  metadata: WorkingGroupMetadataWhereInput
  leader: WorkerWhereInput
  workers_none: WorkerWhereInput
  workers_some: WorkerWhereInput
  workers_every: WorkerWhereInput
  openings_none: WorkingGroupOpeningWhereInput
  openings_some: WorkingGroupOpeningWhereInput
  openings_every: WorkingGroupOpeningWhereInput
  applicationwithdrawneventgroup_none: ApplicationWithdrawnEventWhereInput
  applicationwithdrawneventgroup_some: ApplicationWithdrawnEventWhereInput
  applicationwithdrawneventgroup_every: ApplicationWithdrawnEventWhereInput
  appliedonopeningeventgroup_none: AppliedOnOpeningEventWhereInput
  appliedonopeningeventgroup_some: AppliedOnOpeningEventWhereInput
  appliedonopeningeventgroup_every: AppliedOnOpeningEventWhereInput
  budgetseteventgroup_none: BudgetSetEventWhereInput
  budgetseteventgroup_some: BudgetSetEventWhereInput
  budgetseteventgroup_every: BudgetSetEventWhereInput
  budgetspendingeventgroup_none: BudgetSpendingEventWhereInput
  budgetspendingeventgroup_some: BudgetSpendingEventWhereInput
  budgetspendingeventgroup_every: BudgetSpendingEventWhereInput
  leaderseteventgroup_none: LeaderSetEventWhereInput
  leaderseteventgroup_some: LeaderSetEventWhereInput
  leaderseteventgroup_every: LeaderSetEventWhereInput
  leaderunseteventgroup_none: LeaderUnsetEventWhereInput
  leaderunseteventgroup_some: LeaderUnsetEventWhereInput
  leaderunseteventgroup_every: LeaderUnsetEventWhereInput
  newmissedrewardlevelreachedeventgroup_none: NewMissedRewardLevelReachedEventWhereInput
  newmissedrewardlevelreachedeventgroup_some: NewMissedRewardLevelReachedEventWhereInput
  newmissedrewardlevelreachedeventgroup_every: NewMissedRewardLevelReachedEventWhereInput
  openingaddedeventgroup_none: OpeningAddedEventWhereInput
  openingaddedeventgroup_some: OpeningAddedEventWhereInput
  openingaddedeventgroup_every: OpeningAddedEventWhereInput
  openingcanceledeventgroup_none: OpeningCanceledEventWhereInput
  openingcanceledeventgroup_some: OpeningCanceledEventWhereInput
  openingcanceledeventgroup_every: OpeningCanceledEventWhereInput
  openingfilledeventgroup_none: OpeningFilledEventWhereInput
  openingfilledeventgroup_some: OpeningFilledEventWhereInput
  openingfilledeventgroup_every: OpeningFilledEventWhereInput
  rewardpaideventgroup_none: RewardPaidEventWhereInput
  rewardpaideventgroup_some: RewardPaidEventWhereInput
  rewardpaideventgroup_every: RewardPaidEventWhereInput
  stakedecreasedeventgroup_none: StakeDecreasedEventWhereInput
  stakedecreasedeventgroup_some: StakeDecreasedEventWhereInput
  stakedecreasedeventgroup_every: StakeDecreasedEventWhereInput
  stakeincreasedeventgroup_none: StakeIncreasedEventWhereInput
  stakeincreasedeventgroup_some: StakeIncreasedEventWhereInput
  stakeincreasedeventgroup_every: StakeIncreasedEventWhereInput
  stakeslashedeventgroup_none: StakeSlashedEventWhereInput
  stakeslashedeventgroup_some: StakeSlashedEventWhereInput
  stakeslashedeventgroup_every: StakeSlashedEventWhereInput
  statustextchangedeventgroup_none: StatusTextChangedEventWhereInput
  statustextchangedeventgroup_some: StatusTextChangedEventWhereInput
  statustextchangedeventgroup_every: StatusTextChangedEventWhereInput
  terminatedleadereventgroup_none: TerminatedLeaderEventWhereInput
  terminatedleadereventgroup_some: TerminatedLeaderEventWhereInput
  terminatedleadereventgroup_every: TerminatedLeaderEventWhereInput
  terminatedworkereventgroup_none: TerminatedWorkerEventWhereInput
  terminatedworkereventgroup_some: TerminatedWorkerEventWhereInput
  terminatedworkereventgroup_every: TerminatedWorkerEventWhereInput
  upcomingworkinggroupopeninggroup_none: UpcomingWorkingGroupOpeningWhereInput
  upcomingworkinggroupopeninggroup_some: UpcomingWorkingGroupOpeningWhereInput
  upcomingworkinggroupopeninggroup_every: UpcomingWorkingGroupOpeningWhereInput
  workerexitedeventgroup_none: WorkerExitedEventWhereInput
  workerexitedeventgroup_some: WorkerExitedEventWhereInput
  workerexitedeventgroup_every: WorkerExitedEventWhereInput
  workerrewardaccountupdatedeventgroup_none: WorkerRewardAccountUpdatedEventWhereInput
  workerrewardaccountupdatedeventgroup_some: WorkerRewardAccountUpdatedEventWhereInput
  workerrewardaccountupdatedeventgroup_every: WorkerRewardAccountUpdatedEventWhereInput
  workerrewardamountupdatedeventgroup_none: WorkerRewardAmountUpdatedEventWhereInput
  workerrewardamountupdatedeventgroup_some: WorkerRewardAmountUpdatedEventWhereInput
  workerrewardamountupdatedeventgroup_every: WorkerRewardAmountUpdatedEventWhereInput
  workerroleaccountupdatedeventgroup_none: WorkerRoleAccountUpdatedEventWhereInput
  workerroleaccountupdatedeventgroup_some: WorkerRoleAccountUpdatedEventWhereInput
  workerroleaccountupdatedeventgroup_every: WorkerRoleAccountUpdatedEventWhereInput
  workerstartedleavingeventgroup_none: WorkerStartedLeavingEventWhereInput
  workerstartedleavingeventgroup_some: WorkerStartedLeavingEventWhereInput
  workerstartedleavingeventgroup_every: WorkerStartedLeavingEventWhereInput
  workinggroupmetadatagroup_none: WorkingGroupMetadataWhereInput
  workinggroupmetadatagroup_some: WorkingGroupMetadataWhereInput
  workinggroupmetadatagroup_every: WorkingGroupMetadataWhereInput
  AND: [WorkingGroupWhereInput!]
  OR: [WorkingGroupWhereInput!]
}

input WorkingGroupWhereUniqueInput {
  id: ID
  name: String
}

